//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_fb "bufio";_de "bytes";_f "errors";_c "fmt";_a "github.com/unidoc/unipdf/v3/common";_cd "github.com/unidoc/unipdf/v3/core";_d "io";_g "math";);var ErrStackUnderflow =_f .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");func (_gda *PSProgram )String ()string {_ec :="\u007b\u0020";for _ ,_gfd :=range *_gda {_ec +=_gfd .String ();_ec +="\u0020";};_ec +="\u007d";return _ec ;};func (_cdg *PSOperand )DebugString ()string {return _c .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_cdg );};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_beea :=PSParser {};_ffcb :=_de .NewBuffer (content );_beea ._deafd =_fb .NewReader (_ffcb );return &_beea ;};func (_dad *PSOperand )sqrt (_cecg *PSStack )error {_dde ,_cgea :=_cecg .PopNumberAsFloat64 ();if _cgea !=nil {return _cgea ;};if _dde < 0{return ErrRangeCheck ;};_dedg :=_g .Sqrt (_dde );_cgea =_cecg .Push (MakeReal (_dedg ));return _cgea ;};

// Exec executes the operand `op` in the state specified by `stack`.
func (_adg *PSOperand )Exec (stack *PSStack )error {_bg :=ErrUnsupportedOperand ;switch *_adg {case "\u0061\u0062\u0073":_bg =_adg .abs (stack );case "\u0061\u0064\u0064":_bg =_adg .add (stack );case "\u0061\u006e\u0064":_bg =_adg .and (stack );case "\u0061\u0074\u0061\u006e":_bg =_adg .atan (stack );case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_bg =_adg .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_bg =_adg .ceiling (stack );case "\u0063\u006f\u0070\u0079":_bg =_adg .copy (stack );case "\u0063\u006f\u0073":_bg =_adg .cos (stack );case "\u0063\u0076\u0069":_bg =_adg .cvi (stack );case "\u0063\u0076\u0072":_bg =_adg .cvr (stack );case "\u0064\u0069\u0076":_bg =_adg .div (stack );case "\u0064\u0075\u0070":_bg =_adg .dup (stack );case "\u0065\u0071":_bg =_adg .eq (stack );case "\u0065\u0078\u0063\u0068":_bg =_adg .exch (stack );case "\u0065\u0078\u0070":_bg =_adg .exp (stack );case "\u0066\u006c\u006fo\u0072":_bg =_adg .floor (stack );case "\u0067\u0065":_bg =_adg .ge (stack );case "\u0067\u0074":_bg =_adg .gt (stack );case "\u0069\u0064\u0069\u0076":_bg =_adg .idiv (stack );case "\u0069\u0066":_bg =_adg .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_bg =_adg .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_bg =_adg .index (stack );case "\u006c\u0065":_bg =_adg .le (stack );case "\u006c\u006f\u0067":_bg =_adg .log (stack );case "\u006c\u006e":_bg =_adg .ln (stack );case "\u006c\u0074":_bg =_adg .lt (stack );case "\u006d\u006f\u0064":_bg =_adg .mod (stack );case "\u006d\u0075\u006c":_bg =_adg .mul (stack );case "\u006e\u0065":_bg =_adg .ne (stack );case "\u006e\u0065\u0067":_bg =_adg .neg (stack );case "\u006e\u006f\u0074":_bg =_adg .not (stack );case "\u006f\u0072":_bg =_adg .or (stack );case "\u0070\u006f\u0070":_bg =_adg .pop (stack );case "\u0072\u006f\u0075n\u0064":_bg =_adg .round (stack );case "\u0072\u006f\u006c\u006c":_bg =_adg .roll (stack );case "\u0073\u0069\u006e":_bg =_adg .sin (stack );case "\u0073\u0071\u0072\u0074":_bg =_adg .sqrt (stack );case "\u0073\u0075\u0062":_bg =_adg .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_bg =_adg .truncate (stack );case "\u0078\u006f\u0072":_bg =_adg .xor (stack );};return _bg ;};func (_bge *PSOperand )bitshift (_aag *PSStack )error {_gde ,_gdea :=_aag .PopInteger ();if _gdea !=nil {return _gdea ;};_aff ,_gdea :=_aag .PopInteger ();if _gdea !=nil {return _gdea ;};var _deg int ;if _gde >=0{_deg =_aff <<uint (_gde );}else {_deg =_aff >>uint (-_gde );};_gdea =_aag .Push (MakeInteger (_deg ));return _gdea ;};func (_afc *PSBoolean )DebugString ()string {return _c .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_afc .Val );};func (_ba *PSInteger )Duplicate ()PSObject {_ae :=PSInteger {};_ae .Val =_ba .Val ;return &_ae };var ErrUndefinedResult =_f .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");func (_af *PSReal )String ()string {return _c .Sprintf ("\u0025\u002e\u0035\u0066",_af .Val )};

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_ga *PSProgram ;};func (_ede *PSOperand )exch (_ggdd *PSStack )error {_eeef ,_cfc :=_ggdd .Pop ();if _cfc !=nil {return _cfc ;};_dff ,_cfc :=_ggdd .Pop ();if _cfc !=nil {return _cfc ;};_cfc =_ggdd .Push (_eeef );if _cfc !=nil {return _cfc ;};_cfc =_ggdd .Push (_dff );return _cfc ;};

// Parse parses the postscript and store as a program that can be executed.
func (_adefc *PSParser )Parse ()(*PSProgram ,error ){_adefc .skipSpaces ();_gcbf ,_egff :=_adefc ._deafd .Peek (2);if _egff !=nil {return nil ,_egff ;};if _gcbf [0]!='{'{return nil ,_f .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");};_eac ,_egff :=_adefc .parseFunction ();if _egff !=nil &&_egff !=_d .EOF {return nil ,_egff ;};return _eac ,_egff ;};func (_bebf *PSOperand )mod (_ged *PSStack )error {_ecg ,_cbfa :=_ged .Pop ();if _cbfa !=nil {return _cbfa ;};_fcea ,_cbfa :=_ged .Pop ();if _cbfa !=nil {return _cbfa ;};_cde ,_cce :=_ecg .(*PSInteger );if !_cce {return ErrTypeCheck ;};if _cde .Val ==0{return ErrUndefinedResult ;};_cag ,_cce :=_fcea .(*PSInteger );if !_cce {return ErrTypeCheck ;};_fedd :=_cag .Val %_cde .Val ;_cbfa =_ged .Push (MakeInteger (_fedd ));return _cbfa ;};func (_ebcb *PSOperand )lt (_abg *PSStack )error {_ebb ,_bebb :=_abg .PopNumberAsFloat64 ();if _bebb !=nil {return _bebb ;};_ccb ,_bebb :=_abg .PopNumberAsFloat64 ();if _bebb !=nil {return _bebb ;};if _g .Abs (_ccb -_ebb )< _eg {_fbe :=_abg .Push (MakeBool (false ));return _fbe ;}else if _ccb < _ebb {_cbda :=_abg .Push (MakeBool (true ));return _cbda ;}else {_eafeg :=_abg .Push (MakeBool (false ));return _eafeg ;};};func (_egd *PSOperand )ceiling (_fga *PSStack )error {_abfb ,_adc :=_fga .Pop ();if _adc !=nil {return _adc ;};if _adgf ,_gdb :=_abfb .(*PSReal );_gdb {_adc =_fga .Push (MakeReal (_g .Ceil (_adgf .Val )));}else if _cg ,_beg :=_abfb .(*PSInteger );_beg {_adc =_fga .Push (MakeInteger (_cg .Val ));}else {_adc =ErrTypeCheck ;};return _adc ;};func (_bbee *PSParser )parseFunction ()(*PSProgram ,error ){_bbdg ,_ :=_bbee ._deafd .ReadByte ();if _bbdg !='{'{return nil ,_f .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");};_gcbg :=NewPSProgram ();for {_bbee .skipSpaces ();_ece ,_dabb :=_bbee ._deafd .Peek (2);if _dabb !=nil {if _dabb ==_d .EOF {break ;};return nil ,_dabb ;};_a .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_ece ));if _ece [0]=='}'{_a .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_bbee ._deafd .ReadByte ();break ;}else if _ece [0]=='{'{_a .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_bcg ,_cad :=_bbee .parseFunction ();if _cad !=nil {return nil ,_cad ;};_gcbg .Append (_bcg );}else if _cd .IsDecimalDigit (_ece [0])||(_ece [0]=='-'&&_cd .IsDecimalDigit (_ece [1])){_a .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_beeaf ,_gfe :=_bbee .parseNumber ();if _gfe !=nil {return nil ,_gfe ;};_gcbg .Append (_beeaf );}else {_a .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_ece ,_ =_bbee ._deafd .Peek (5);_gced :=string (_ece );_a .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_gced );if (len (_gced )> 4)&&(_gced [:5]=="\u0066\u0061\u006cs\u0065"){_dbc ,_edgb :=_bbee .parseBool ();if _edgb !=nil {return nil ,_edgb ;};_gcbg .Append (_dbc );}else if (len (_gced )> 3)&&(_gced [:4]=="\u0074\u0072\u0075\u0065"){_cga ,_bfee :=_bbee .parseBool ();if _bfee !=nil {return nil ,_bfee ;};_gcbg .Append (_cga );}else {_gage ,_dabe :=_bbee .parseOperand ();if _dabe !=nil {return nil ,_dabe ;};_gcbg .Append (_gage );};};};return _gcbg ,nil ;};func (_cged *PSOperand )sin (_bec *PSStack )error {_egdg ,_dcb :=_bec .PopNumberAsFloat64 ();if _dcb !=nil {return _dcb ;};_acdfg :=_g .Sin (_egdg *_g .Pi /180.0);_dcb =_bec .Push (MakeReal (_acdfg ));return _dcb ;};const _eg =0.000001;

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};func (_gb *PSBoolean )String ()string {return _c .Sprintf ("\u0025\u0076",_gb .Val )};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_egbe :=PSBoolean {};_egbe .Val =val ;return &_egbe };func (_bcf *PSOperand )cvi (_acg *PSStack )error {_gca ,_aed :=_acg .Pop ();if _aed !=nil {return _aed ;};if _abc ,_fdg :=_gca .(*PSReal );_fdg {_gdf :=int (_abc .Val );_aed =_acg .Push (MakeInteger (_gdf ));}else if _cca ,_deb :=_gca .(*PSInteger );_deb {_dab :=_cca .Val ;_aed =_acg .Push (MakeInteger (_dab ));}else {return ErrTypeCheck ;};return _aed ;};func (_gag *PSProgram )DebugString ()string {_cdd :="\u007b\u0020";for _ ,_gf :=range *_gag {_cdd +=_gf .DebugString ();_cdd +="\u0020";};_cdd +="\u007d";return _cdd ;};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;var ErrRangeCheck =_f .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");

// Exec executes the program, typically leaving output values on the stack.
func (_bfa *PSProgram )Exec (stack *PSStack )error {for _ ,_da :=range *_bfa {var _ad error ;switch _edd :=_da .(type ){case *PSInteger :_ege :=_edd ;_ad =stack .Push (_ege );case *PSReal :_dd :=_edd ;_ad =stack .Push (_dd );case *PSBoolean :_bba :=_edd ;_ad =stack .Push (_bba );case *PSProgram :_gab :=_edd ;_ad =stack .Push (_gab );case *PSOperand :_cdb :=_edd ;_ad =_cdb .Exec (stack );default:return ErrTypeCheck ;};if _ad !=nil {return _ad ;};};return nil ;};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_eddf *PSStack )PopInteger ()(int ,error ){_gfc ,_gabg :=_eddf .Pop ();if _gabg !=nil {return 0,_gabg ;};if _agcf ,_dbbg :=_gfc .(*PSInteger );_dbbg {return _agcf .Val ,nil ;};return 0,ErrTypeCheck ;};func (_ccfe *PSOperand )xor (_ebf *PSStack )error {_ebfa ,_cgf :=_ebf .Pop ();if _cgf !=nil {return _cgf ;};_cbdg ,_cgf :=_ebf .Pop ();if _cgf !=nil {return _cgf ;};if _bgeg ,_bgaa :=_ebfa .(*PSBoolean );_bgaa {_fab ,_geb :=_cbdg .(*PSBoolean );if !_geb {return ErrTypeCheck ;};_cgf =_ebf .Push (MakeBool (_bgeg .Val !=_fab .Val ));return _cgf ;};if _geg ,_dded :=_ebfa .(*PSInteger );_dded {_ddg ,_eaab :=_cbdg .(*PSInteger );if !_eaab {return ErrTypeCheck ;};_cgf =_ebf .Push (MakeInteger (_geg .Val ^_ddg .Val ));return _cgf ;};return ErrTypeCheck ;};func (_ag *PSInteger )String ()string {return _c .Sprintf ("\u0025\u0064",_ag .Val )};

// String returns a string representation of the stack.
func (_gfca *PSStack )String ()string {_bdag :="\u005b\u0020";for _ ,_cdcg :=range *_gfca {_bdag +=_cdcg .String ();_bdag +="\u0020";};_bdag +="\u005d";return _bdag ;};func (_dbe *PSOperand )dup (_gee *PSStack )error {_babg ,_afa :=_gee .Pop ();if _afa !=nil {return _afa ;};_afa =_gee .Push (_babg );if _afa !=nil {return _afa ;};_afa =_gee .Push (_babg .Duplicate ());return _afa ;};func (_efca *PSParser )parseNumber ()(PSObject ,error ){_ecd ,_feb :=_cd .ParseNumber (_efca ._deafd );if _feb !=nil {return nil ,_feb ;};switch _bddc :=_ecd .(type ){case *_cd .PdfObjectFloat :return MakeReal (float64 (*_bddc )),nil ;case *_cd .PdfObjectInteger :return MakeInteger (int (*_bddc )),nil ;};return nil ,_c .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_ecd );};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_bcdg *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_aee ,_ffcg :=_bcdg .Pop ();if _ffcg !=nil {return 0,_ffcg ;};if _dbcb ,_bdgf :=_aee .(*PSReal );_bdgf {return _dbcb .Val ,nil ;}else if _addc ,_geec :=_aee .(*PSInteger );_geec {return float64 (_addc .Val ),nil ;}else {return 0,ErrTypeCheck ;};};func (_fad *PSOperand )eq (_gdg *PSStack )error {_bad ,_fdb :=_gdg .Pop ();if _fdb !=nil {return _fdb ;};_ceg ,_fdb :=_gdg .Pop ();if _fdb !=nil {return _fdb ;};_bace ,_baae :=_bad .(*PSBoolean );_gce ,_fdd :=_ceg .(*PSBoolean );if _baae ||_fdd {var _gfa error ;if _baae &&_fdd {_gfa =_gdg .Push (MakeBool (_bace .Val ==_gce .Val ));}else {_gfa =_gdg .Push (MakeBool (false ));};return _gfa ;};var _gcb float64 ;var _eba float64 ;if _ddcd ,_gcc :=_bad .(*PSInteger );_gcc {_gcb =float64 (_ddcd .Val );}else if _eeee ,_dee :=_bad .(*PSReal );_dee {_gcb =_eeee .Val ;}else {return ErrTypeCheck ;};if _eeb ,_ccf :=_ceg .(*PSInteger );_ccf {_eba =float64 (_eeb .Val );}else if _gdd ,_gcd :=_ceg .(*PSReal );_gcd {_eba =_gdd .Val ;}else {return ErrTypeCheck ;};if _g .Abs (_eba -_gcb )< _eg {_fdb =_gdg .Push (MakeBool (true ));}else {_fdb =_gdg .Push (MakeBool (false ));};return _fdb ;};func (_cda *PSInteger )DebugString ()string {return _c .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_cda .Val );};func (_agc *PSReal )DebugString ()string {return _c .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_agc .Val );};func (_dbdc *PSOperand )ge (_dfdg *PSStack )error {_add ,_dea :=_dfdg .PopNumberAsFloat64 ();if _dea !=nil {return _dea ;};_aafe ,_dea :=_dfdg .PopNumberAsFloat64 ();if _dea !=nil {return _dea ;};if _g .Abs (_aafe -_add )< _eg {_gfb :=_dfdg .Push (MakeBool (true ));return _gfb ;}else if _aafe > _add {_ggad :=_dfdg .Push (MakeBool (true ));return _ggad ;}else {_dfb :=_dfdg .Push (MakeBool (false ));return _dfb ;};};func (_bgb *PSOperand )log (_fbge *PSStack )error {_caa ,_gbd :=_fbge .PopNumberAsFloat64 ();if _gbd !=nil {return _gbd ;};_fed :=_g .Log10 (_caa );_gbd =_fbge .Push (MakeReal (_fed ));return _gbd ;};func (_bc *PSBoolean )Duplicate ()PSObject {_egg :=PSBoolean {};_egg .Val =_bc .Val ;return &_egg };func (_badd *PSOperand )round (_bbg *PSStack )error {_gdcg ,_dbgc :=_bbg .Pop ();if _dbgc !=nil {return _dbgc ;};if _dacc ,_dda :=_gdcg .(*PSReal );_dda {_dbgc =_bbg .Push (MakeReal (_g .Floor (_dacc .Val +0.5)));}else if _caaa ,_fadd :=_gdcg .(*PSInteger );_fadd {_dbgc =_bbg .Push (MakeInteger (_caaa .Val ));}else {return ErrTypeCheck ;};return _dbgc ;};

// Push pushes an object on top of the stack.
func (_fda *PSStack )Push (obj PSObject )error {if len (*_fda )> 100{return ErrStackOverflow ;};*_fda =append (*_fda ,obj );return nil ;};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_fabe :=PSReal {};_fabe .Val =val ;return &_fabe };func (_acea *PSOperand )exp (_dbb *PSStack )error {_beb ,_bbd :=_dbb .PopNumberAsFloat64 ();if _bbd !=nil {return _bbd ;};_fdbe ,_bbd :=_dbb .PopNumberAsFloat64 ();if _bbd !=nil {return _bbd ;};if _g .Abs (_beb )< 1&&_fdbe < 0{return ErrUndefinedResult ;};_dege :=_g .Pow (_fdbe ,_beb );_bbd =_dbb .Push (MakeReal (_dege ));return _bbd ;};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_b :=&PSExecutor {};_b .Stack =NewPSStack ();_b ._ga =program ;return _b ;};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};func (_aceg *PSOperand )floor (_fgae *PSStack )error {_fcg ,_bgd :=_fgae .Pop ();if _bgd !=nil {return _bgd ;};if _gga ,_ebca :=_fcg .(*PSReal );_ebca {_bgd =_fgae .Push (MakeReal (_g .Floor (_gga .Val )));}else if _dag ,_ced :=_fcg .(*PSInteger );_ced {_bgd =_fgae .Push (MakeInteger (_dag .Val ));}else {return ErrTypeCheck ;};return _bgd ;};func (_bf *PSReal )Duplicate ()PSObject {_gd :=PSReal {};_gd .Val =_bf .Val ;return &_gd };func (_fdf *PSOperand )not (_cdfb *PSStack )error {_dbg ,_bbcf :=_cdfb .Pop ();if _bbcf !=nil {return _bbcf ;};if _ebce ,_gcgb :=_dbg .(*PSBoolean );_gcgb {_bbcf =_cdfb .Push (MakeBool (!_ebce .Val ));return _bbcf ;}else if _adf ,_aef :=_dbg .(*PSInteger );_aef {_bbcf =_cdfb .Push (MakeInteger (^_adf .Val ));return _bbcf ;}else {return ErrTypeCheck ;};};func (_ca *PSOperand )cvr (_adce *PSStack )error {_ebc ,_cfg :=_adce .Pop ();if _cfg !=nil {return _cfg ;};if _bfd ,_eec :=_ebc .(*PSReal );_eec {_cfg =_adce .Push (MakeReal (_bfd .Val ));}else if _aaf ,_gg :=_ebc .(*PSInteger );_gg {_cfg =_adce .Push (MakeReal (float64 (_aaf .Val )));}else {return ErrTypeCheck ;};return _cfg ;};func (_aad *PSOperand )atan (_acd *PSStack )error {_gad ,_ge :=_acd .PopNumberAsFloat64 ();if _ge !=nil {return _ge ;};_gc ,_ge :=_acd .PopNumberAsFloat64 ();if _ge !=nil {return _ge ;};if _gad ==0{var _adb error ;if _gc < 0{_adb =_acd .Push (MakeReal (270));}else {_adb =_acd .Push (MakeReal (90));};return _adb ;};_ade :=_gc /_gad ;_efc :=_g .Atan (_ade )*180/_g .Pi ;_ge =_acd .Push (MakeReal (_efc ));return _ge ;};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _def []float64 ;for _ ,_ab :=range objects {if _bb ,_cf :=_ab .(*PSInteger );_cf {_def =append (_def ,float64 (_bb .Val ));}else if _fc ,_fcf :=_ab .(*PSReal );_fcf {_def =append (_def ,_fc .Val );}else {return nil ,ErrTypeCheck ;};};return _def ,nil ;};

// PSParser is a basic Postscript parser.
type PSParser struct{_deafd *_fb .Reader };func (_dffd *PSOperand )idiv (_addd *PSStack )error {_abcg ,_cge :=_addd .Pop ();if _cge !=nil {return _cge ;};_afad ,_cge :=_addd .Pop ();if _cge !=nil {return _cge ;};_dce ,_aga :=_abcg .(*PSInteger );if !_aga {return ErrTypeCheck ;};if _dce .Val ==0{return ErrUndefinedResult ;};_adgb ,_aga :=_afad .(*PSInteger );if !_aga {return ErrTypeCheck ;};_eff :=_adgb .Val /_dce .Val ;_cge =_addd .Push (MakeInteger (_eff ));return _cge ;};var ErrUnsupportedOperand =_f .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");

// Pop pops an object from the top of the stack.
func (_faf *PSStack )Pop ()(PSObject ,error ){if len (*_faf )< 1{return nil ,ErrStackUnderflow ;};_daef :=(*_faf )[len (*_faf )-1];*_faf =(*_faf )[0:len (*_faf )-1];return _daef ,nil ;};

// Append appends an object to the PSProgram.
func (_ce *PSProgram )Append (obj PSObject ){*_ce =append (*_ce ,obj )};func (_cc *PSOperand )add (_bcd *PSStack )error {_afe ,_gdac :=_bcd .Pop ();if _gdac !=nil {return _gdac ;};_bac ,_gdac :=_bcd .Pop ();if _gdac !=nil {return _gdac ;};_fa ,_ded :=_afe .(*PSReal );_eafe ,_abfe :=_afe .(*PSInteger );if !_ded &&!_abfe {return ErrTypeCheck ;};_ecf ,_db :=_bac .(*PSReal );_dfe ,_cdf :=_bac .(*PSInteger );if !_db &&!_cdf {return ErrTypeCheck ;};if _abfe &&_cdf {_dgda :=_eafe .Val +_dfe .Val ;_cfa :=_bcd .Push (MakeInteger (_dgda ));return _cfa ;};var _fd float64 =0;if _ded {_fd =_fa .Val ;}else {_fd =float64 (_eafe .Val );};if _db {_fd +=_ecf .Val ;}else {_fd +=float64 (_dfe .Val );};_gdac =_bcd .Push (MakeReal (_fd ));return _gdac ;};func (_faa *PSOperand )and (_dae *PSStack )error {_dbd ,_faaa :=_dae .Pop ();if _faaa !=nil {return _faaa ;};_ddc ,_faaa :=_dae .Pop ();if _faaa !=nil {return _faaa ;};if _bdd ,_eb :=_dbd .(*PSBoolean );_eb {_fbbf ,_cb :=_ddc .(*PSBoolean );if !_cb {return ErrTypeCheck ;};_faaa =_dae .Push (MakeBool (_bdd .Val &&_fbbf .Val ));return _faaa ;};if _eddg ,_dga :=_dbd .(*PSInteger );_dga {_aab ,_bda :=_ddc .(*PSInteger );if !_bda {return ErrTypeCheck ;};_faaa =_dae .Push (MakeInteger (_eddg .Val &_aab .Val ));return _faaa ;};return ErrTypeCheck ;};func (_fac *PSOperand )or (_ggdde *PSStack )error {_bcc ,_gdga :=_ggdde .Pop ();if _gdga !=nil {return _gdga ;};_fbgec ,_gdga :=_ggdde .Pop ();if _gdga !=nil {return _gdga ;};if _cagd ,_bga :=_bcc .(*PSBoolean );_bga {_caf ,_agg :=_fbgec .(*PSBoolean );if !_agg {return ErrTypeCheck ;};_gdga =_ggdde .Push (MakeBool (_cagd .Val ||_caf .Val ));return _gdga ;};if _gdgab ,_abff :=_bcc .(*PSInteger );_abff {_ddcg ,_ccfc :=_fbgec .(*PSInteger );if !_ccfc {return ErrTypeCheck ;};_gdga =_ggdde .Push (MakeInteger (_gdgab .Val |_ddcg .Val ));return _gdga ;};return ErrTypeCheck ;};func (_eda *PSOperand )index (_bega *PSStack )error {_edc ,_bce :=_bega .Pop ();if _bce !=nil {return _bce ;};_ggg ,_bee :=_edc .(*PSInteger );if !_bee {return ErrTypeCheck ;};if _ggg .Val < 0{return ErrRangeCheck ;};if _ggg .Val > len (*_bega )-1{return ErrStackUnderflow ;};_fcd :=(*_bega )[len (*_bega )-1-_ggg .Val ];_bce =_bega .Push (_fcd .Duplicate ());return _bce ;};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_dg *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_bd :=range objects {_aa :=_dg .Stack .Push (_bd );if _aa !=nil {return nil ,_aa ;};};_ac :=_dg ._ga .Exec (_dg .Stack );if _ac !=nil {_a .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ac );return nil ,_ac ;};_egb :=[]PSObject (*_dg .Stack );_dg .Stack .Empty ();return _egb ,nil ;};func (_bag *PSOperand )cos (_daf *PSStack )error {_gcg ,_gdaa :=_daf .PopNumberAsFloat64 ();if _gdaa !=nil {return _gdaa ;};_ff :=_g .Cos (_gcg *_g .Pi /180.0);_gdaa =_daf .Push (MakeReal (_ff ));return _gdaa ;};func (_efff *PSOperand )le (_aeb *PSStack )error {_cdbd ,_ddd :=_aeb .PopNumberAsFloat64 ();if _ddd !=nil {return _ddd ;};_bed ,_ddd :=_aeb .PopNumberAsFloat64 ();if _ddd !=nil {return _ddd ;};if _g .Abs (_bed -_cdbd )< _eg {_fe :=_aeb .Push (MakeBool (true ));return _fe ;}else if _bed < _cdbd {_eae :=_aeb .Push (MakeBool (true ));return _eae ;}else {_gcab :=_aeb .Push (MakeBool (false ));return _gcab ;};};func (_egdc *PSOperand )gt (_bfb *PSStack )error {_afca ,_gddg :=_bfb .PopNumberAsFloat64 ();if _gddg !=nil {return _gddg ;};_bbab ,_gddg :=_bfb .PopNumberAsFloat64 ();if _gddg !=nil {return _gddg ;};if _g .Abs (_bbab -_afca )< _eg {_badb :=_bfb .Push (MakeBool (false ));return _badb ;}else if _bbab > _afca {_dafc :=_bfb .Push (MakeBool (true ));return _dafc ;}else {_dede :=_bfb .Push (MakeBool (false ));return _dede ;};};func (_bgdf *PSOperand )ne (_afcb *PSStack )error {_ecfba :=_bgdf .eq (_afcb );if _ecfba !=nil {return _ecfba ;};_ecfba =_bgdf .not (_afcb );return _ecfba ;};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_bcb :=PSOperand (val );return &_bcb };

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};func (_dbbf *PSOperand )roll (_ega *PSStack )error {_ddb ,_ccea :=_ega .Pop ();if _ccea !=nil {return _ccea ;};_bebe ,_ccea :=_ega .Pop ();if _ccea !=nil {return _ccea ;};_bbdd ,_cdeg :=_ddb .(*PSInteger );if !_cdeg {return ErrTypeCheck ;};_gdbc ,_cdeg :=_bebe .(*PSInteger );if !_cdeg {return ErrTypeCheck ;};if _gdbc .Val < 0{return ErrRangeCheck ;};if _gdbc .Val ==0||_gdbc .Val ==1{return nil ;};if _gdbc .Val > len (*_ega ){return ErrStackUnderflow ;};for _dbed :=0;_dbed < _cagdc (_bbdd .Val );_dbed ++{var _aeg []PSObject ;_aeg =(*_ega )[len (*_ega )-(_gdbc .Val ):len (*_ega )];if _bbdd .Val > 0{_dcc :=_aeg [len (_aeg )-1];_aeg =append ([]PSObject {_dcc },_aeg [0:len (_aeg )-1]...);}else {_fgb :=_aeg [len (_aeg )-_gdbc .Val ];_aeg =append (_aeg [1:],_fgb );};_cbe :=append ((*_ega )[0:len (*_ega )-_gdbc .Val ],_aeg ...);_ega =&_cbe ;};return nil ;};var ErrStackOverflow =_f .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");func (_fgac *PSOperand )ifelse (_deaf *PSStack )error {_fcc ,_caeg :=_deaf .Pop ();if _caeg !=nil {return _caeg ;};_cbf ,_caeg :=_deaf .Pop ();if _caeg !=nil {return _caeg ;};_debf ,_caeg :=_deaf .Pop ();if _caeg !=nil {return _caeg ;};_bbc ,_gbc :=_fcc .(*PSProgram );if !_gbc {return ErrTypeCheck ;};_bbb ,_gbc :=_cbf .(*PSProgram );if !_gbc {return ErrTypeCheck ;};_gdeab ,_gbc :=_debf .(*PSBoolean );if !_gbc {return ErrTypeCheck ;};if _gdeab .Val {_dfa :=_bbb .Exec (_deaf );return _dfa ;};_caeg =_bbc .Exec (_deaf );return _caeg ;};func (_dgd *PSOperand )abs (_abf *PSStack )error {_dgdg ,_aba :=_abf .Pop ();if _aba !=nil {return _aba ;};if _df ,_dgg :=_dgdg .(*PSReal );_dgg {_dfd :=_df .Val ;if _dfd < 0{_aba =_abf .Push (MakeReal (-_dfd ));}else {_aba =_abf .Push (MakeReal (_dfd ));};}else if _ee ,_abab :=_dgdg .(*PSInteger );_abab {_eaf :=_ee .Val ;if _eaf < 0{_aba =_abf .Push (MakeInteger (-_eaf ));}else {_aba =_abf .Push (MakeInteger (_eaf ));};}else {return ErrTypeCheck ;};return _aba ;};func (_age *PSOperand )neg (_abag *PSStack )error {_dac ,_dcg :=_abag .Pop ();if _dcg !=nil {return _dcg ;};if _ddcf ,_bbac :=_dac .(*PSReal );_bbac {_dcg =_abag .Push (MakeReal (-_ddcf .Val ));return _dcg ;}else if _bgc ,_gcfe :=_dac .(*PSInteger );_gcfe {_dcg =_abag .Push (MakeInteger (-_bgc .Val ));return _dcg ;}else {return ErrTypeCheck ;};};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_gfg *PSStack )DebugString ()string {_ffe :="\u005b\u0020";for _ ,_cbae :=range *_gfg {_ffe +=_cbae .DebugString ();_ffe +="\u0020";};_ffe +="\u005d";return _ffe ;};func (_egfd *PSOperand )truncate (_geea *PSStack )error {_bff ,_fbf :=_geea .Pop ();if _fbf !=nil {return _fbf ;};if _fgdg ,_ffc :=_bff .(*PSReal );_ffc {_ddeg :=int (_fgdg .Val );_fbf =_geea .Push (MakeReal (float64 (_ddeg )));}else if _ddbc ,_aggc :=_bff .(*PSInteger );_aggc {_fbf =_geea .Push (MakeInteger (_ddbc .Val ));}else {return ErrTypeCheck ;};return _fbf ;};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;func (_cba *PSParser )skipSpaces ()(int ,error ){_aagd :=0;for {_dcca ,_fge :=_cba ._deafd .Peek (1);if _fge !=nil {return 0,_fge ;};if _cd .IsWhiteSpace (_dcca [0]){_cba ._deafd .ReadByte ();_aagd ++;}else {break ;};};return _aagd ,nil ;};func _cagdc (_cbea int )int {if _cbea < 0{return -_cbea ;};return _cbea ;};

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_gccc :=PSInteger {};_gccc .Val =val ;return &_gccc };func (_bbe *PSOperand )ln (_acf *PSStack )error {_gccg ,_bfg :=_acf .PopNumberAsFloat64 ();if _bfg !=nil {return _bfg ;};_cgd :=_g .Log (_gccg );_bfg =_acf .Push (MakeReal (_cgd ));return _bfg ;};func (_cec *PSOperand )pop (_bbag *PSStack )error {_ ,_dcd :=_bbag .Pop ();if _dcd !=nil {return _dcd ;};return nil ;};

// Empty empties the stack.
func (_gdacc *PSStack )Empty (){*_gdacc =[]PSObject {}};func (_cdc *PSProgram )Duplicate ()PSObject {_ef :=&PSProgram {};for _ ,_ace :=range *_cdc {_ef .Append (_ace .Duplicate ());};return _ef ;};var ErrTypeCheck =_f .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};func (_dedf *PSOperand )ifCondition (_acdf *PSStack )error {_cegf ,_fcb :=_acdf .Pop ();if _fcb !=nil {return _fcb ;};_bbabb ,_fcb :=_acdf .Pop ();if _fcb !=nil {return _fcb ;};_fce ,_faaag :=_cegf .(*PSProgram );if !_faaag {return ErrTypeCheck ;};_cbdf ,_faaag :=_bbabb .(*PSBoolean );if !_faaag {return ErrTypeCheck ;};if _cbdf .Val {_fba :=_fce .Exec (_acdf );return _fba ;};return nil ;};func (_defc *PSOperand )mul (_dcef *PSStack )error {_fbgg ,_gcf :=_dcef .Pop ();if _gcf !=nil {return _gcf ;};_fgd ,_gcf :=_dcef .Pop ();if _gcf !=nil {return _gcf ;};_cgb ,_edg :=_fbgg .(*PSReal );_dgb ,_bcaf :=_fbgg .(*PSInteger );if !_edg &&!_bcaf {return ErrTypeCheck ;};_adcg ,_ecfb :=_fgd .(*PSReal );_eea ,_ccfa :=_fgd .(*PSInteger );if !_ecfb &&!_ccfa {return ErrTypeCheck ;};if _bcaf &&_ccfa {_cfd :=_dgb .Val *_eea .Val ;_bfe :=_dcef .Push (MakeInteger (_cfd ));return _bfe ;};var _ebe float64 =0;if _edg {_ebe =_cgb .Val ;}else {_ebe =float64 (_dgb .Val );};if _ecfb {_ebe *=_adcg .Val ;}else {_ebe *=float64 (_eea .Val );};_gcf =_dcef .Push (MakeReal (_ebe ));return _gcf ;};func (_gcgf *PSParser )parseBool ()(*PSBoolean ,error ){_aafed ,_bddb :=_gcgf ._deafd .Peek (4);if _bddb !=nil {return MakeBool (false ),_bddb ;};if (len (_aafed )>=4)&&(string (_aafed [:4])=="\u0074\u0072\u0075\u0065"){_gcgf ._deafd .Discard (4);return MakeBool (true ),nil ;};_aafed ,_bddb =_gcgf ._deafd .Peek (5);if _bddb !=nil {return MakeBool (false ),_bddb ;};if (len (_aafed )>=5)&&(string (_aafed [:5])=="\u0066\u0061\u006cs\u0065"){_gcgf ._deafd .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_f .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};func (_dfc *PSOperand )copy (_bged *PSStack )error {_egf ,_bca :=_bged .PopInteger ();if _bca !=nil {return _bca ;};if _egf < 0{return ErrRangeCheck ;};if _egf > len (*_bged ){return ErrRangeCheck ;};*_bged =append (*_bged ,(*_bged )[len (*_bged )-_egf :]...);return nil ;};func (_fg *PSOperand )String ()string {return _c .Sprintf ("\u0025\u0073",*_fg )};

// PSInteger represents an integer.
type PSInteger struct{Val int ;};func (_bgg *PSParser )parseOperand ()(*PSOperand ,error ){var _efe []byte ;for {_dfg ,_gfde :=_bgg ._deafd .Peek (1);if _gfde !=nil {if _gfde ==_d .EOF {break ;};return nil ,_gfde ;};if _cd .IsDelimiter (_dfg [0]){break ;};if _cd .IsWhiteSpace (_dfg [0]){break ;};_babgb ,_ :=_bgg ._deafd .ReadByte ();_efe =append (_efe ,_babgb );};if len (_efe )==0{return nil ,_f .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};return MakeOperand (string (_efe )),nil ;};func (_eaa *PSOperand )Duplicate ()PSObject {_baa :=*_eaa ;return &_baa };func (_fdge *PSOperand )sub (_egeb *PSStack )error {_cdda ,_aec :=_egeb .Pop ();if _aec !=nil {return _aec ;};_bdg ,_aec :=_egeb .Pop ();if _aec !=nil {return _aec ;};_fdba ,_edce :=_cdda .(*PSReal );_bef ,_adef :=_cdda .(*PSInteger );if !_edce &&!_adef {return ErrTypeCheck ;};_bfec ,_cdgg :=_bdg .(*PSReal );_agf ,_cgeda :=_bdg .(*PSInteger );if !_cdgg &&!_cgeda {return ErrTypeCheck ;};if _adef &&_cgeda {_beba :=_agf .Val -_bef .Val ;_dge :=_egeb .Push (MakeInteger (_beba ));return _dge ;};var _cfe float64 =0;if _cdgg {_cfe =_bfec .Val ;}else {_cfe =float64 (_agf .Val );};if _edce {_cfe -=_fdba .Val ;}else {_cfe -=float64 (_bef .Val );};_aec =_egeb .Push (MakeReal (_cfe ));return _aec ;};func (_cae *PSOperand )div (_eee *PSStack )error {_ggd ,_ada :=_eee .Pop ();if _ada !=nil {return _ada ;};_bab ,_ada :=_eee .Pop ();if _ada !=nil {return _ada ;};_dafb ,_dc :=_ggd .(*PSReal );_afd ,_cbd :=_ggd .(*PSInteger );if !_dc &&!_cbd {return ErrTypeCheck ;};if _dc &&_dafb .Val ==0{return ErrUndefinedResult ;};if _cbd &&_afd .Val ==0{return ErrUndefinedResult ;};_gdc ,_dcf :=_bab .(*PSReal );_fae ,_debb :=_bab .(*PSInteger );if !_dcf &&!_debb {return ErrTypeCheck ;};var _cfb float64 =0;if _dcf {_cfb =_gdc .Val ;}else {_cfb =float64 (_fae .Val );};if _dc {_cfb /=_dafb .Val ;}else {_cfb /=float64 (_afd .Val );};_ada =_eee .Push (MakeReal (_cfb ));return _ada ;};