//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package contentstream provides functionality for parsing and creating content streams for PDF files.
//
// For processing and manipulating content streams, it allows parse the content stream into a list of
// operands that can then be processed further for rendering or extraction of information.
// The ContentStreamProcessor offers a basic engine for processing the content stream and can be used
// to render or modify the contents.
//
// For creating content streams, see NewContentCreator.  It allows adding multiple operands and then can
// be converted to a string for embedding in a PDF file.
//
// The contentstream package uses the core and model packages.
package contentstream ;import (_d "bufio";_ga "bytes";_g "encoding/hex";_aa "errors";_b "fmt";_bb "github.com/unidoc/unipdf/v3/common";_bg "github.com/unidoc/unipdf/v3/core";_gb "github.com/unidoc/unipdf/v3/internal/imageutil";_ac "github.com/unidoc/unipdf/v3/internal/transform";_db "github.com/unidoc/unipdf/v3/model";_ab "image/color";_ee "image/jpeg";_e "io";_df "math";_c "strconv";);

// Add_Tm appends 'Tm' operand to the content stream:
// Set the text line matrix.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_ege *ContentCreator )Add_Tm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_faad :=ContentStreamOperation {};_faad .Operand ="\u0054\u006d";_faad .Params =_cfde ([]float64 {a ,b ,c ,d ,e ,f });_ege ._af =append (_ege ._af ,&_faad );return _ege ;};

// String is same as Bytes() except returns as a string for convenience.
func (_becd *ContentCreator )String ()string {return string (_becd ._af .Bytes ())};

// Pop pops and returns the topmost GraphicsState off the `gsStack`.
func (_ffd *GraphicStateStack )Pop ()GraphicsState {_cdd :=(*_ffd )[len (*_ffd )-1];*_ffd =(*_ffd )[:len (*_ffd )-1];return _cdd ;};

// Add_f appends 'f' operand to the content stream:
// Fill the path using the nonzero winding number rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_cc *ContentCreator )Add_f ()*ContentCreator {_aag :=ContentStreamOperation {};_aag .Operand ="\u0066";_cc ._af =append (_cc ._af ,&_aag );return _cc ;};

// Add_K appends 'K' operand to the content stream:
// Set the stroking colorspace to DeviceCMYK and sets the c,m,y,k color (0-1 each component).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dee *ContentCreator )Add_K (c ,m ,y ,k float64 )*ContentCreator {_cadb :=ContentStreamOperation {};_cadb .Operand ="\u004b";_cadb .Params =_cfde ([]float64 {c ,m ,y ,k });_dee ._af =append (_dee ._af ,&_cadb );return _dee ;};

// Add_ri adds 'ri' operand to the content stream, which sets the color rendering intent.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fef *ContentCreator )Add_ri (intent _bg .PdfObjectName )*ContentCreator {_ca :=ContentStreamOperation {};_ca .Operand ="\u0072\u0069";_ca .Params =_fbbf ([]_bg .PdfObjectName {intent });_fef ._af =append (_fef ._af ,&_ca );return _fef ;};

// Add_rg appends 'rg' operand to the content stream:
// Same as RG but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gcd *ContentCreator )Add_rg (r ,g ,b float64 )*ContentCreator {_fge :=ContentStreamOperation {};_fge .Operand ="\u0072\u0067";_fge .Params =_cfde ([]float64 {r ,g ,b });_gcd ._af =append (_gcd ._af ,&_fge );return _gcd ;};func (_bdab *ContentStreamParser )parseOperand ()(*_bg .PdfObjectString ,error ){var _fcd []byte ;for {_edag ,_bbee :=_bdab ._ddd .Peek (1);if _bbee !=nil {return _bg .MakeString (string (_fcd )),_bbee ;};if _bg .IsDelimiter (_edag [0]){break ;};if _bg .IsWhiteSpace (_edag [0]){break ;};_edca ,_ :=_bdab ._ddd .ReadByte ();_fcd =append (_fcd ,_edca );};return _bg .MakeString (string (_fcd )),nil ;};func (_dggf *ContentStreamParser )parseHexString ()(*_bg .PdfObjectString ,error ){_dggf ._ddd .ReadByte ();_febb :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");var _dfa []byte ;for {_dggf .skipSpaces ();_abb ,_adf :=_dggf ._ddd .Peek (1);if _adf !=nil {return _bg .MakeString (""),_adf ;};if _abb [0]=='>'{_dggf ._ddd .ReadByte ();break ;};_gaff ,_ :=_dggf ._ddd .ReadByte ();if _ga .IndexByte (_febb ,_gaff )>=0{_dfa =append (_dfa ,_gaff );};};if len (_dfa )%2==1{_dfa =append (_dfa ,'0');};_edc ,_ :=_g .DecodeString (string (_dfa ));return _bg .MakeHexString (string (_edc )),nil ;};

// ContentStreamInlineImage is a representation of an inline image in a Content stream. Everything between the BI and EI operands.
// ContentStreamInlineImage implements the core.PdfObject interface although strictly it is not a PDF object.
type ContentStreamInlineImage struct{BitsPerComponent _bg .PdfObject ;ColorSpace _bg .PdfObject ;Decode _bg .PdfObject ;DecodeParms _bg .PdfObject ;Filter _bg .PdfObject ;Height _bg .PdfObject ;ImageMask _bg .PdfObject ;Intent _bg .PdfObject ;Interpolate _bg .PdfObject ;Width _bg .PdfObject ;_fgeg []byte ;_eac *_gb .ImageBase ;};

// Add_Tw appends 'Tw' operand to the content stream:
// Set word spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_bcag *ContentCreator )Add_Tw (wordSpace float64 )*ContentCreator {_bgf :=ContentStreamOperation {};_bgf .Operand ="\u0054\u0077";_bgf .Params =_cfde ([]float64 {wordSpace });_bcag ._af =append (_bcag ._af ,&_bgf );return _bcag ;};func _fbbf (_dfcc []_bg .PdfObjectName )[]_bg .PdfObject {var _ggae []_bg .PdfObject ;for _ ,_agg :=range _dfcc {_ggae =append (_ggae ,_bg .MakeName (string (_agg )));};return _ggae ;};

// Add_W_starred appends 'W*' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (even odd rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_fac *ContentCreator )Add_W_starred ()*ContentCreator {_agc :=ContentStreamOperation {};_agc .Operand ="\u0057\u002a";_fac ._af =append (_fac ._af ,&_agc );return _fac ;};func (_edcg *ContentStreamProcessor )handleCommand_sc (_ddae *ContentStreamOperation ,_baddd *_db .PdfPageResources )error {_dcbd :=_edcg ._ddfb .ColorspaceNonStroking ;if !_bcbe (_dcbd ){if len (_ddae .Params )!=_dcbd .GetNumComponents (){_bb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_bb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ddae .Params ),_dcbd );return _aa .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_gea ,_bgaf :=_dcbd .ColorFromPdfObjects (_ddae .Params );if _bgaf !=nil {return _bgaf ;};_edcg ._ddfb .ColorNonStroking =_gea ;return nil ;};

// Add_cm adds 'cm' operation to the content stream: Modifies the current transformation matrix (ctm)
// of the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_cg *ContentCreator )Add_cm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_ed :=ContentStreamOperation {};_ed .Operand ="\u0063\u006d";_ed .Params =_cfde ([]float64 {a ,b ,c ,d ,e ,f });_cg ._af =append (_cg ._af ,&_ed );return _cg ;};

// AddOperand adds a specified operand.
func (_fb *ContentCreator )AddOperand (op ContentStreamOperation )*ContentCreator {_fb ._af =append (_fb ._af ,&op );return _fb ;};

// HandlerFunc is the function syntax that the ContentStreamProcessor handler must implement.
type HandlerFunc func (_eacf *ContentStreamOperation ,_baga GraphicsState ,_faec *_db .PdfPageResources )error ;

// Add_BT appends 'BT' operand to the content stream:
// Begin text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_dbe *ContentCreator )Add_BT ()*ContentCreator {_egb :=ContentStreamOperation {};_egb .Operand ="\u0042\u0054";_dbe ._af =append (_dbe ._af ,&_egb );return _dbe ;};

// Add_BMC appends 'BMC' operand to the content stream:
// Begins a marked-content sequence terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_gfe *ContentCreator )Add_BMC (tag _bg .PdfObjectName )*ContentCreator {_dagc :=ContentStreamOperation {};_dagc .Operand ="\u0042\u004d\u0043";_dagc .Params =_fbbf ([]_bg .PdfObjectName {tag });_gfe ._af =append (_gfe ._af ,&_dagc );return _gfe ;};

// Add_m adds 'm' operand to the content stream: Move the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_cec *ContentCreator )Add_m (x ,y float64 )*ContentCreator {_ggd :=ContentStreamOperation {};_ggd .Operand ="\u006d";_ggd .Params =_cfde ([]float64 {x ,y });_cec ._af =append (_cec ._af ,&_ggd );return _cec ;};func (_eagd *ContentStreamParser )parseArray ()(*_bg .PdfObjectArray ,error ){_fceg :=_bg .MakeArray ();_eagd ._ddd .ReadByte ();for {_eagd .skipSpaces ();_ccdg ,_efea :=_eagd ._ddd .Peek (1);if _efea !=nil {return _fceg ,_efea ;};if _ccdg [0]==']'{_eagd ._ddd .ReadByte ();break ;};_eefe ,_ ,_efea :=_eagd .parseObject ();if _efea !=nil {return _fceg ,_efea ;};_fceg .Append (_eefe );};return _fceg ,nil ;};

// NewContentCreator returns a new initialized ContentCreator.
func NewContentCreator ()*ContentCreator {_eec :=&ContentCreator {};_eec ._af =ContentStreamOperations {};return _eec ;};

// Add_j adds 'j' operand to the content stream: Set the line join style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fa *ContentCreator )Add_j (lineJoinStyle string )*ContentCreator {_edf :=ContentStreamOperation {};_edf .Operand ="\u006a";_edf .Params =_fbbf ([]_bg .PdfObjectName {_bg .PdfObjectName (lineJoinStyle )});_fa ._af =append (_fa ._af ,&_edf );return _fa ;};

// Add_scn_pattern appends 'scn' operand to the content stream for pattern `name`:
// scn with name attribute (for pattern). Syntax: c1 ... cn name scn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bcac *ContentCreator )Add_scn_pattern (name _bg .PdfObjectName ,c ...float64 )*ContentCreator {_bd :=ContentStreamOperation {};_bd .Operand ="\u0073\u0063\u006e";_bd .Params =_cfde (c );_bd .Params =append (_bd .Params ,_bg .MakeName (string (name )));_bcac ._af =append (_bcac ._af ,&_bd );return _bcac ;};

// Add_b_starred appends 'b*' operand to the content stream:
// Close, fill and then stroke the path (even-odd winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ecb *ContentCreator )Add_b_starred ()*ContentCreator {_bee :=ContentStreamOperation {};_bee .Operand ="\u0062\u002a";_ecb ._af =append (_ecb ._af ,&_bee );return _ecb ;};func (_bea *ContentStreamProcessor )handleCommand_SC (_cfd *ContentStreamOperation ,_dbg *_db .PdfPageResources )error {_dbcf :=_bea ._ddfb .ColorspaceStroking ;if len (_cfd .Params )!=_dbcf .GetNumComponents (){_bb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_bb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_cfd .Params ),_dbcf );return _aa .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_cgba ,_eedg :=_dbcf .ColorFromPdfObjects (_cfd .Params );if _eedg !=nil {return _eedg ;};_bea ._ddfb .ColorStroking =_cgba ;return nil ;};

// Add_ET appends 'ET' operand to the content stream:
// End text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_fdca *ContentCreator )Add_ET ()*ContentCreator {_fcf :=ContentStreamOperation {};_fcf .Operand ="\u0045\u0054";_fdca ._af =append (_fdca ._af ,&_fcf );return _fdca ;};func (_bgbb *ContentStreamProcessor )handleCommand_K (_agfa *ContentStreamOperation ,_ffec *_db .PdfPageResources )error {_adb :=_db .NewPdfColorspaceDeviceCMYK ();if len (_agfa .Params )!=_adb .GetNumComponents (){_bb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_bb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_agfa .Params ),_adb );return _aa .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_bdcf ,_agcg :=_adb .ColorFromPdfObjects (_agfa .Params );if _agcg !=nil {return _agcg ;};_bgbb ._ddfb .ColorspaceStroking =_adb ;_bgbb ._ddfb .ColorStroking =_bdcf ;return nil ;};

// ToImage exports the inline image to Image which can be transformed or exported easily.
// Page resources are needed to look up colorspace information.
func (_egcd *ContentStreamInlineImage )ToImage (resources *_db .PdfPageResources )(*_db .Image ,error ){_eggg ,_cdbd :=_egcd .toImageBase (resources );if _cdbd !=nil {return nil ,_cdbd ;};_aee ,_cdbd :=_ddag (_egcd );if _cdbd !=nil {return nil ,_cdbd ;};_bb .Log .Trace ("\u0065n\u0063o\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076\u0020\u0025\u0054",_aee ,_aee );_bb .Log .Trace ("\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u002b\u0076",_egcd );_dac ,_cdbd :=_aee .DecodeBytes (_egcd ._fgeg );if _cdbd !=nil {return nil ,_cdbd ;};_bddd :=&_db .Image {Width :int64 (_eggg .Width ),Height :int64 (_eggg .Height ),BitsPerComponent :int64 (_eggg .BitsPerComponent ),ColorComponents :_eggg .ColorComponents ,Data :_dac };if len (_eggg .Decode )> 0{for _bfc :=0;_bfc < len (_eggg .Decode );_bfc ++{_eggg .Decode [_bfc ]*=float64 ((int (1)<<uint (_eggg .BitsPerComponent ))-1);};_bddd .SetDecode (_eggg .Decode );};return _bddd ,nil ;};

// SetStrokingColor sets the stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_bcad *ContentCreator )SetStrokingColor (color _db .PdfColor )*ContentCreator {switch _fed :=color .(type ){case *_db .PdfColorDeviceGray :_bcad .Add_G (_fed .Val ());case *_db .PdfColorDeviceRGB :_bcad .Add_RG (_fed .R (),_fed .G (),_fed .B ());case *_db .PdfColorDeviceCMYK :_bcad .Add_K (_fed .C (),_fed .M (),_fed .Y (),_fed .K ());default:_bb .Log .Debug ("\u0053\u0065\u0074\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006fl\u006f\u0072\u003a\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006fr\u003a\u0020\u0025\u0054",_fed );};return _bcad ;};

// HandlerConditionEnum represents the type of operand content stream processor (handler).
// The handler may process a single specific named operand or all operands.
type HandlerConditionEnum int ;

// Add_Do adds 'Do' operation to the content stream:
// Displays an XObject (image or form) specified by `name`.
//
// See section 8.8 "External Objects" and Table 87 (pp. 209-220 PDF32000_2008).
func (_bab *ContentCreator )Add_Do (name _bg .PdfObjectName )*ContentCreator {_cbc :=ContentStreamOperation {};_cbc .Operand ="\u0044\u006f";_cbc .Params =_fbbf ([]_bg .PdfObjectName {name });_bab ._af =append (_bab ._af ,&_cbc );return _bab ;};

// ParseInlineImage parses an inline image from a content stream, both reading its properties and binary data.
// When called, "BI" has already been read from the stream.  This function
// finishes reading through "EI" and then returns the ContentStreamInlineImage.
func (_fgbb *ContentStreamParser )ParseInlineImage ()(*ContentStreamInlineImage ,error ){_edg :=ContentStreamInlineImage {};for {_fgbb .skipSpaces ();_fdf ,_aaf ,_bafd :=_fgbb .parseObject ();if _bafd !=nil {return nil ,_bafd ;};if !_aaf {_dfeb ,_bfa :=_bg .GetName (_fdf );if !_bfa {_bb .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_fdf );return nil ,_b .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_fdf );};_gfg ,_cfc ,_cdg :=_fgbb .parseObject ();if _cdg !=nil {return nil ,_cdg ;};if _cfc {return nil ,_b .Errorf ("\u006eo\u0074\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067 \u0061\u006e\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};switch *_dfeb {case "\u0042\u0050\u0043","\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074":_edg .BitsPerComponent =_gfg ;case "\u0043\u0053","\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065":_edg .ColorSpace =_gfg ;case "\u0044","\u0044\u0065\u0063\u006f\u0064\u0065":_edg .Decode =_gfg ;case "\u0044\u0050","D\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073":_edg .DecodeParms =_gfg ;case "\u0046","\u0046\u0069\u006c\u0074\u0065\u0072":_edg .Filter =_gfg ;case "\u0048","\u0048\u0065\u0069\u0067\u0068\u0074":_edg .Height =_gfg ;case "\u0049\u004d","\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k":_edg .ImageMask =_gfg ;case "\u0049\u006e\u0074\u0065\u006e\u0074":_edg .Intent =_gfg ;case "\u0049","I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065":_edg .Interpolate =_gfg ;case "\u0057","\u0057\u0069\u0064t\u0068":_edg .Width =_gfg ;case "\u004c\u0065\u006e\u0067\u0074\u0068","\u0053u\u0062\u0074\u0079\u0070\u0065","\u0054\u0079\u0070\u0065":_bb .Log .Debug ("\u0049\u0067\u006e\u006fr\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0070a\u0072\u0061\u006d\u0065\u0074\u0065\u0072 \u0025\u0073",*_dfeb );default:return nil ,_b .Errorf ("\u0075\u006e\u006b\u006e\u006f\u0077n\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0020\u0025\u0073",*_dfeb );};};if _aaf {_feff ,_bge :=_fdf .(*_bg .PdfObjectString );if !_bge {return nil ,_b .Errorf ("\u0066a\u0069\u006ce\u0064\u0020\u0074o\u0020\u0072\u0065\u0061\u0064\u0020\u0069n\u006c\u0069\u006e\u0065\u0020\u0069m\u0061\u0067\u0065\u0020\u002d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};if _feff .Str ()=="\u0045\u0049"{_bb .Log .Trace ("\u0049n\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020f\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e\u002e\u002e");return &_edg ,nil ;}else if _feff .Str ()=="\u0049\u0044"{_bb .Log .Trace ("\u0049\u0044\u0020\u0073\u0074\u0061\u0072\u0074");_gdde ,_gbb :=_fgbb ._ddd .Peek (1);if _gbb !=nil {return nil ,_gbb ;};if _bg .IsWhiteSpace (_gdde [0]){_fgbb ._ddd .Discard (1);};_edg ._fgeg =[]byte {};_bccf :=0;var _ged []byte ;for {_cadc ,_deab :=_fgbb ._ddd .ReadByte ();if _deab !=nil {_bb .Log .Debug ("\u0055\u006e\u0061\u0062\u006ce\u0020\u0074\u006f\u0020\u0066\u0069\u006e\u0064\u0020\u0065\u006e\u0064\u0020o\u0066\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0045\u0049\u0020\u0069\u006e\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0061\u0074a");return nil ,_deab ;};if _bccf ==0{if _bg .IsWhiteSpace (_cadc ){_ged =[]byte {};_ged =append (_ged ,_cadc );_bccf =1;}else if _cadc =='E'{_ged =append (_ged ,_cadc );_bccf =2;}else {_edg ._fgeg =append (_edg ._fgeg ,_cadc );};}else if _bccf ==1{_ged =append (_ged ,_cadc );if _cadc =='E'{_bccf =2;}else {_edg ._fgeg =append (_edg ._fgeg ,_ged ...);_ged =[]byte {};if _bg .IsWhiteSpace (_cadc ){_bccf =1;}else {_bccf =0;};};}else if _bccf ==2{_ged =append (_ged ,_cadc );if _cadc =='I'{_bccf =3;}else {_edg ._fgeg =append (_edg ._fgeg ,_ged ...);_ged =[]byte {};_bccf =0;};}else if _bccf ==3{_ged =append (_ged ,_cadc );if _bg .IsWhiteSpace (_cadc ){_afb ,_gggc :=_fgbb ._ddd .Peek (20);if _gggc !=nil &&_gggc !=_e .EOF {return nil ,_gggc ;};_badd :=NewContentStreamParser (string (_afb ));_cca :=true ;for _edgf :=0;_edgf < 3;_edgf ++{_gag ,_fefda ,_agb :=_badd .parseObject ();if _agb !=nil {if _agb ==_e .EOF {break ;};continue ;};if _fefda &&!_eeea (_gag .String ()){_cca =false ;break ;};};if _cca {if len (_edg ._fgeg )> 100{_bb .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061m\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078 \u002e\u002e\u002e",len (_edg ._fgeg ),_edg ._fgeg [:100]);}else {_bb .Log .Trace ("\u0049\u006d\u0061\u0067e \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025 \u0078",len (_edg ._fgeg ),_edg ._fgeg );};return &_edg ,nil ;};};_edg ._fgeg =append (_edg ._fgeg ,_ged ...);_ged =[]byte {};_bccf =0;};};};};};};func _eeea (_gcea string )bool {_ ,_fedd :=_cfg [_gcea ];return _fedd };

// Add_n appends 'n' operand to the content stream:
// End the path without filling or stroking.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_cfe *ContentCreator )Add_n ()*ContentCreator {_gce :=ContentStreamOperation {};_gce .Operand ="\u006e";_cfe ._af =append (_cfe ._af ,&_gce );return _cfe ;};

// Add_b appends 'b' operand to the content stream:
// Close, fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_gcg *ContentCreator )Add_b ()*ContentCreator {_ecd :=ContentStreamOperation {};_ecd .Operand ="\u0062";_gcg ._af =append (_gcg ._af ,&_ecd );return _gcg ;};

// Add_Q adds 'Q' operand to the content stream: Pops the most recently stored state from the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ea *ContentCreator )Add_Q ()*ContentCreator {_cf :=ContentStreamOperation {};_cf .Operand ="\u0051";_ea ._af =append (_ea ._af ,&_cf );return _ea ;};func (_f *ContentStreamOperations )isWrapped ()bool {if len (*_f )< 2{return false ;};_bbc :=0;for _ ,_ef :=range *_f {if _ef .Operand =="\u0071"{_bbc ++;}else if _ef .Operand =="\u0051"{_bbc --;}else {if _bbc < 1{return false ;};};};return _bbc ==0;};

// Add_Td appends 'Td' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_fdd *ContentCreator )Add_Td (tx ,ty float64 )*ContentCreator {_aga :=ContentStreamOperation {};_aga .Operand ="\u0054\u0064";_aga .Params =_cfde ([]float64 {tx ,ty });_fdd ._af =append (_fdd ._af ,&_aga );return _fdd ;};

// Add_quote appends "'" operand to the content stream:
// Move to next line and show a string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_gfb *ContentCreator )Add_quote (textstr _bg .PdfObjectString )*ContentCreator {_cbcb :=ContentStreamOperation {};_cbcb .Operand ="\u0027";_cbcb .Params =_ebgb ([]_bg .PdfObjectString {textstr });_gfb ._af =append (_gfb ._af ,&_cbcb );return _gfb ;};

// Add_cs appends 'cs' operand to the content stream:
// Same as CS but for non-stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cad *ContentCreator )Add_cs (name _bg .PdfObjectName )*ContentCreator {_ffb :=ContentStreamOperation {};_ffb .Operand ="\u0063\u0073";_ffb .Params =_fbbf ([]_bg .PdfObjectName {name });_cad ._af =append (_cad ._af ,&_ffb );return _cad ;};

// Add_SCN_pattern appends 'SCN' operand to the content stream for pattern `name`:
// SCN with name attribute (for pattern). Syntax: c1 ... cn name SCN.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gcf *ContentCreator )Add_SCN_pattern (name _bg .PdfObjectName ,c ...float64 )*ContentCreator {_ge :=ContentStreamOperation {};_ge .Operand ="\u0053\u0043\u004e";_ge .Params =_cfde (c );_ge .Params =append (_ge .Params ,_bg .MakeName (string (name )));_gcf ._af =append (_gcf ._af ,&_ge );return _gcf ;};func (_fcfd *ContentStreamParser )skipSpaces ()(int ,error ){_fdcad :=0;for {_bcga ,_efdc :=_fcfd ._ddd .Peek (1);if _efdc !=nil {return 0,_efdc ;};if _bg .IsWhiteSpace (_bcga [0]){_fcfd ._ddd .ReadByte ();_fdcad ++;}else {break ;};};return _fdcad ,nil ;};

// Add_CS appends 'CS' operand to the content stream:
// Set the current colorspace for stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fgc *ContentCreator )Add_CS (name _bg .PdfObjectName )*ContentCreator {_aae :=ContentStreamOperation {};_aae .Operand ="\u0043\u0053";_aae .Params =_fbbf ([]_bg .PdfObjectName {name });_fgc ._af =append (_fgc ._af ,&_aae );return _fgc ;};

// GetEncoder returns the encoder of the inline image.
func (_dfbe *ContentStreamInlineImage )GetEncoder ()(_bg .StreamEncoder ,error ){return _ddag (_dfbe )};

// Add_TJ appends 'TJ' operand to the content stream:
// Show one or more text string. Array of numbers (displacement) and strings.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_fde *ContentCreator )Add_TJ (vals ..._bg .PdfObject )*ContentCreator {_afa :=ContentStreamOperation {};_afa .Operand ="\u0054\u004a";_afa .Params =[]_bg .PdfObject {_bg .MakeArray (vals ...)};_fde ._af =append (_fde ._af ,&_afa );return _fde ;};

// IsMask checks if an image is a mask.
// The image mask entry in the image dictionary specifies that the image data shall be used as a stencil
// mask for painting in the current color. The mask data is 1bpc, grayscale.
func (_fbfb *ContentStreamInlineImage )IsMask ()(bool ,error ){if _fbfb .ImageMask !=nil {_eggc ,_ecfa :=_fbfb .ImageMask .(*_bg .PdfObjectBool );if !_ecfa {_bb .Log .Debug ("\u0049m\u0061\u0067\u0065\u0020\u006d\u0061\u0073\u006b\u0020\u006e\u006ft\u0020\u0061\u0020\u0062\u006f\u006f\u006c\u0065\u0061\u006e");return false ,_aa .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065");};return bool (*_eggc ),nil ;};return false ,nil ;};

// Add_TL appends 'TL' operand to the content stream:
// Set leading.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_gba *ContentCreator )Add_TL (leading float64 )*ContentCreator {_gfc :=ContentStreamOperation {};_gfc .Operand ="\u0054\u004c";_gfc .Params =_cfde ([]float64 {leading });_gba ._af =append (_gba ._af ,&_gfc );return _gba ;};func _cfde (_edb []float64 )[]_bg .PdfObject {var _cgeb []_bg .PdfObject ;for _ ,_effd :=range _edb {_cgeb =append (_cgeb ,_bg .MakeFloat (_effd ));};return _cgeb ;};

// Add_Tstar appends 'T*' operand to the content stream:
// Move to the start of next line.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_gbg *ContentCreator )Add_Tstar ()*ContentCreator {_aea :=ContentStreamOperation {};_aea .Operand ="\u0054\u002a";_gbg ._af =append (_gbg ._af ,&_aea );return _gbg ;};

// Process processes the entire list of operations. Maintains the graphics state that is passed to any
// handlers that are triggered during processing (either on specific operators or all).
func (_gfcdc *ContentStreamProcessor )Process (resources *_db .PdfPageResources )error {_gfcdc ._ddfb .ColorspaceStroking =_db .NewPdfColorspaceDeviceGray ();_gfcdc ._ddfb .ColorspaceNonStroking =_db .NewPdfColorspaceDeviceGray ();_gfcdc ._ddfb .ColorStroking =_db .NewPdfColorDeviceGray (0);_gfcdc ._ddfb .ColorNonStroking =_db .NewPdfColorDeviceGray (0);_gfcdc ._ddfb .CTM =_ac .IdentityMatrix ();for _ ,_efad :=range _gfcdc ._bae {var _egf error ;switch _efad .Operand {case "\u0071":_gfcdc ._ebg .Push (_gfcdc ._ddfb );case "\u0051":if len (_gfcdc ._ebg )==0{_bb .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0060\u0051\u0060\u0020\u006f\u0070e\u0072\u0061\u0074\u006f\u0072\u002e\u0020\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0073\u0020\u0073\u0074\u0061\u0074\u0065 \u0073\u0074\u0061\u0063\u006b\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079.\u0020\u0053\u006bi\u0070\u0070\u0069\u006e\u0067\u002e");continue ;};_gfcdc ._ddfb =_gfcdc ._ebg .Pop ();case "\u0043\u0053":_egf =_gfcdc .handleCommand_CS (_efad ,resources );case "\u0063\u0073":_egf =_gfcdc .handleCommand_cs (_efad ,resources );case "\u0053\u0043":_egf =_gfcdc .handleCommand_SC (_efad ,resources );case "\u0053\u0043\u004e":_egf =_gfcdc .handleCommand_SCN (_efad ,resources );case "\u0073\u0063":_egf =_gfcdc .handleCommand_sc (_efad ,resources );case "\u0073\u0063\u006e":_egf =_gfcdc .handleCommand_scn (_efad ,resources );case "\u0047":_egf =_gfcdc .handleCommand_G (_efad ,resources );case "\u0067":_egf =_gfcdc .handleCommand_g (_efad ,resources );case "\u0052\u0047":_egf =_gfcdc .handleCommand_RG (_efad ,resources );case "\u0072\u0067":_egf =_gfcdc .handleCommand_rg (_efad ,resources );case "\u004b":_egf =_gfcdc .handleCommand_K (_efad ,resources );case "\u006b":_egf =_gfcdc .handleCommand_k (_efad ,resources );case "\u0063\u006d":_egf =_gfcdc .handleCommand_cm (_efad ,resources );};if _egf !=nil {_bb .Log .Debug ("\u0050\u0072\u006f\u0063\u0065\u0073s\u006f\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u0028\u0025\u0073)\u003a\u0020\u0025\u0076",_efad .Operand ,_egf );_bb .Log .Debug ("\u004f\u0070\u0065r\u0061\u006e\u0064\u003a\u0020\u0025\u0023\u0076",_efad .Operand );return _egf ;};for _ ,_gge :=range _gfcdc ._dbcg {var _fca error ;if _gge .Condition .All (){_fca =_gge .Handler (_efad ,_gfcdc ._ddfb ,resources );}else if _gge .Condition .Operand ()&&_efad .Operand ==_gge .Operand {_fca =_gge .Handler (_efad ,_gfcdc ._ddfb ,resources );};if _fca !=nil {_bb .Log .Debug ("P\u0072\u006f\u0063\u0065\u0073\u0073o\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0072 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_fca );return _fca ;};};};return nil ;};

// All returns true if `hce` is equivalent to HandlerConditionEnumAllOperands.
func (_dfdf HandlerConditionEnum )All ()bool {return _dfdf ==HandlerConditionEnumAllOperands };

// Add_B_starred appends 'B*' operand to the content stream:
// Fill and then stroke the path (even-odd rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_eeg *ContentCreator )Add_B_starred ()*ContentCreator {_ccd :=ContentStreamOperation {};_ccd .Operand ="\u0042\u002a";_eeg ._af =append (_eeg ._af ,&_ccd );return _eeg ;};

// Scale applies x-y scaling to the transformation matrix.
func (_ff *ContentCreator )Scale (sx ,sy float64 )*ContentCreator {return _ff .Add_cm (sx ,0,0,sy ,0,0);};

// Add_B appends 'B' operand to the content stream:
// Fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_fda *ContentCreator )Add_B ()*ContentCreator {_baa :=ContentStreamOperation {};_baa .Operand ="\u0042";_fda ._af =append (_fda ._af ,&_baa );return _fda ;};func (_efee *ContentStreamParser )parseObject ()(_efg _bg .PdfObject ,_faee bool ,_bdfb error ){_efee .skipSpaces ();for {_cfa ,_gff :=_efee ._ddd .Peek (2);if _gff !=nil {return nil ,false ,_gff ;};_bb .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_cfa ));if _cfa [0]=='%'{_efee .skipComments ();continue ;}else if _cfa [0]=='/'{_bgba ,_facg :=_efee .parseName ();_bb .Log .Trace ("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027",_bgba );return &_bgba ,false ,_facg ;}else if _cfa [0]=='('{_bb .Log .Trace ("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!");_dfd ,_efaa :=_efee .parseString ();return _dfd ,false ,_efaa ;}else if _cfa [0]=='<'&&_cfa [1]!='<'{_bb .Log .Trace ("\u002d\u003e\u0048\u0065\u0078\u0020\u0053\u0074\u0072\u0069\u006e\u0067\u0021");_fceb ,_aaeg :=_efee .parseHexString ();return _fceb ,false ,_aaeg ;}else if _cfa [0]=='['{_bb .Log .Trace ("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021");_bfdd ,_gffd :=_efee .parseArray ();return _bfdd ,false ,_gffd ;}else if _bg .IsFloatDigit (_cfa [0])||(_cfa [0]=='-'&&_bg .IsFloatDigit (_cfa [1])){_bb .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_efdb ,_dcea :=_efee .parseNumber ();return _efdb ,false ,_dcea ;}else if _cfa [0]=='<'&&_cfa [1]=='<'{_cbb ,_aafa :=_efee .parseDict ();return _cbb ,false ,_aafa ;}else {_bb .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_cfa ,_ =_efee ._ddd .Peek (5);_cgdg :=string (_cfa );_bb .Log .Trace ("\u0063\u006f\u006e\u0074\u0020\u0050\u0065\u0065\u006b\u0020\u0073\u0074r\u003a\u0020\u0025\u0073",_cgdg );if (len (_cgdg )> 3)&&(_cgdg [:4]=="\u006e\u0075\u006c\u006c"){_geged ,_adg :=_efee .parseNull ();return &_geged ,false ,_adg ;}else if (len (_cgdg )> 4)&&(_cgdg [:5]=="\u0066\u0061\u006cs\u0065"){_caa ,_aeg :=_efee .parseBool ();return &_caa ,false ,_aeg ;}else if (len (_cgdg )> 3)&&(_cgdg [:4]=="\u0074\u0072\u0075\u0065"){_cgb ,_ead :=_efee .parseBool ();return &_cgb ,false ,_ead ;};_daec ,_cff :=_efee .parseOperand ();if _cff !=nil {return _daec ,false ,_cff ;};if len (_daec .String ())< 1{return _daec ,false ,ErrInvalidOperand ;};return _daec ,true ,nil ;};};};func _dcdea (_bgde []int64 )[]_bg .PdfObject {var _aadg []_bg .PdfObject ;for _ ,_cebc :=range _bgde {_aadg =append (_aadg ,_bg .MakeInteger (_cebc ));};return _aadg ;};

// ContentStreamOperation represents an operation in PDF contentstream which consists of
// an operand and parameters.
type ContentStreamOperation struct{Params []_bg .PdfObject ;Operand string ;};const (HandlerConditionEnumOperand HandlerConditionEnum =iota ;HandlerConditionEnumAllOperands ;);

// Add_quotes appends `"` operand to the content stream:
// Move to next line and show a string, using `aw` and `ac` as word
// and character spacing respectively.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_eaae *ContentCreator )Add_quotes (textstr _bg .PdfObjectString ,aw ,ac float64 )*ContentCreator {_beg :=ContentStreamOperation {};_beg .Operand ="\u0022";_beg .Params =_cfde ([]float64 {aw ,ac });_beg .Params =append (_beg .Params ,_ebgb ([]_bg .PdfObjectString {textstr })...);_eaae ._af =append (_eaae ._af ,&_beg );return _eaae ;};func _bdd (_gaa *ContentStreamInlineImage )(*_bg .DCTEncoder ,error ){_gaf :=_bg .NewDCTEncoder ();_bbf :=_ga .NewReader (_gaa ._fgeg );_cbga ,_faaf :=_ee .DecodeConfig (_bbf );if _faaf !=nil {_bb .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_faaf );return nil ,_faaf ;};switch _cbga .ColorModel {case _ab .RGBAModel :_gaf .BitsPerComponent =8;_gaf .ColorComponents =3;case _ab .RGBA64Model :_gaf .BitsPerComponent =16;_gaf .ColorComponents =3;case _ab .GrayModel :_gaf .BitsPerComponent =8;_gaf .ColorComponents =1;case _ab .Gray16Model :_gaf .BitsPerComponent =16;_gaf .ColorComponents =1;case _ab .CMYKModel :_gaf .BitsPerComponent =8;_gaf .ColorComponents =4;case _ab .YCbCrModel :_gaf .BitsPerComponent =8;_gaf .ColorComponents =3;default:return nil ,_aa .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006d\u006f\u0064\u0065\u006c");};_gaf .Width =_cbga .Width ;_gaf .Height =_cbga .Height ;_bb .Log .Trace ("\u0044\u0043T\u0020\u0045\u006ec\u006f\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076",_gaf );return _gaf ,nil ;};

// Add_TD appends 'TD' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_ggff *ContentCreator )Add_TD (tx ,ty float64 )*ContentCreator {_feb :=ContentStreamOperation {};_feb .Operand ="\u0054\u0044";_feb .Params =_cfde ([]float64 {tx ,ty });_ggff ._af =append (_ggff ._af ,&_feb );return _ggff ;};

// Add_Tc appends 'Tc' operand to the content stream:
// Set character spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_dad *ContentCreator )Add_Tc (charSpace float64 )*ContentCreator {_cbg :=ContentStreamOperation {};_cbg .Operand ="\u0054\u0063";_cbg .Params =_cfde ([]float64 {charSpace });_dad ._af =append (_dad ._af ,&_cbg );return _dad ;};

// String returns `ops.Bytes()` as a string.
func (_fd *ContentStreamOperations )String ()string {return string (_fd .Bytes ())};

// Add_J adds 'J' operand to the content stream: Set the line cap style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_dbb *ContentCreator )Add_J (lineCapStyle string )*ContentCreator {_ded :=ContentStreamOperation {};_ded .Operand ="\u004a";_ded .Params =_fbbf ([]_bg .PdfObjectName {_bg .PdfObjectName (lineCapStyle )});_dbb ._af =append (_dbb ._af ,&_ded );return _dbb ;};

// ExtractText parses and extracts all text data in content streams and returns as a string.
// Does not take into account Encoding table, the output is simply the character codes.
//
// Deprecated: More advanced text extraction is offered in package extractor with character encoding support.
func (_eg *ContentStreamParser )ExtractText ()(string ,error ){_dag ,_bcc :=_eg .Parse ();if _bcc !=nil {return "",_bcc ;};_dc :=false ;_cd ,_abc :=float64 (-1),float64 (-1);_bbg :="";for _ ,_eee :=range *_dag {if _eee .Operand =="\u0042\u0054"{_dc =true ;}else if _eee .Operand =="\u0045\u0054"{_dc =false ;};if _eee .Operand =="\u0054\u0064"||_eee .Operand =="\u0054\u0044"||_eee .Operand =="\u0054\u002a"{_bbg +="\u000a";};if _eee .Operand =="\u0054\u006d"{if len (_eee .Params )!=6{continue ;};_fe ,_bca :=_eee .Params [4].(*_bg .PdfObjectFloat );if !_bca {_ae ,_bcgg :=_eee .Params [4].(*_bg .PdfObjectInteger );if !_bcgg {continue ;};_fe =_bg .MakeFloat (float64 (*_ae ));};_bef ,_bca :=_eee .Params [5].(*_bg .PdfObjectFloat );if !_bca {_ad ,_bbe :=_eee .Params [5].(*_bg .PdfObjectInteger );if !_bbe {continue ;};_bef =_bg .MakeFloat (float64 (*_ad ));};if _abc ==-1{_abc =float64 (*_bef );}else if _abc > float64 (*_bef ){_bbg +="\u000a";_cd =float64 (*_fe );_abc =float64 (*_bef );continue ;};if _cd ==-1{_cd =float64 (*_fe );}else if _cd < float64 (*_fe ){_bbg +="\u0009";_cd =float64 (*_fe );};};if _dc &&_eee .Operand =="\u0054\u004a"{if len (_eee .Params )< 1{continue ;};_ece ,_bba :=_eee .Params [0].(*_bg .PdfObjectArray );if !_bba {return "",_b .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0070\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0020\u0074y\u0070\u0065\u002c\u0020\u006e\u006f\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_eee .Params [0]);};for _ ,_fg :=range _ece .Elements (){switch _eef :=_fg .(type ){case *_bg .PdfObjectString :_bbg +=_eef .Str ();case *_bg .PdfObjectFloat :if *_eef < -100{_bbg +="\u0020";};case *_bg .PdfObjectInteger :if *_eef < -100{_bbg +="\u0020";};};};}else if _dc &&_eee .Operand =="\u0054\u006a"{if len (_eee .Params )< 1{continue ;};_adc ,_ddf :=_eee .Params [0].(*_bg .PdfObjectString );if !_ddf {return "",_b .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0074\u0079p\u0065\u002c\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067 \u0028\u0025\u0054\u0029",_eee .Params [0]);};_bbg +=_adc .Str ();};};return _bbg ,nil ;};

// Add_RG appends 'RG' operand to the content stream:
// Set the stroking colorspace to DeviceRGB and sets the r,g,b colors (0-1 each).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fba *ContentCreator )Add_RG (r ,g ,b float64 )*ContentCreator {_bce :=ContentStreamOperation {};_bce .Operand ="\u0052\u0047";_bce .Params =_cfde ([]float64 {r ,g ,b });_fba ._af =append (_fba ._af ,&_bce );return _fba ;};

// Add_Tj appends 'Tj' operand to the content stream:
// Show a text string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_eaa *ContentCreator )Add_Tj (textstr _bg .PdfObjectString )*ContentCreator {_afg :=ContentStreamOperation {};_afg .Operand ="\u0054\u006a";_afg .Params =_ebgb ([]_bg .PdfObjectString {textstr });_eaa ._af =append (_eaa ._af ,&_afg );return _eaa ;};

// Wrap ensures that the contentstream is wrapped within a balanced q ... Q expression.
func (_ade *ContentCreator )Wrap (){_ade ._af .WrapIfNeeded ()};func _ebgb (_aabf []_bg .PdfObjectString )[]_bg .PdfObject {var _bbdb []_bg .PdfObject ;for _ ,_gca :=range _aabf {_bbdb =append (_bbdb ,_bg .MakeString (_gca .Str ()));};return _bbdb ;};

// WriteString outputs the object as it is to be written to file.
func (_eegf *ContentStreamInlineImage )WriteString ()string {var _eba _ga .Buffer ;_faeg :="";if _eegf .BitsPerComponent !=nil {_faeg +="\u002f\u0042\u0050C\u0020"+_eegf .BitsPerComponent .WriteString ()+"\u000a";};if _eegf .ColorSpace !=nil {_faeg +="\u002f\u0043\u0053\u0020"+_eegf .ColorSpace .WriteString ()+"\u000a";};if _eegf .Decode !=nil {_faeg +="\u002f\u0044\u0020"+_eegf .Decode .WriteString ()+"\u000a";};if _eegf .DecodeParms !=nil {_faeg +="\u002f\u0044\u0050\u0020"+_eegf .DecodeParms .WriteString ()+"\u000a";};if _eegf .Filter !=nil {_faeg +="\u002f\u0046\u0020"+_eegf .Filter .WriteString ()+"\u000a";};if _eegf .Height !=nil {_faeg +="\u002f\u0048\u0020"+_eegf .Height .WriteString ()+"\u000a";};if _eegf .ImageMask !=nil {_faeg +="\u002f\u0049\u004d\u0020"+_eegf .ImageMask .WriteString ()+"\u000a";};if _eegf .Intent !=nil {_faeg +="\u002f\u0049\u006e\u0074\u0065\u006e\u0074\u0020"+_eegf .Intent .WriteString ()+"\u000a";};if _eegf .Interpolate !=nil {_faeg +="\u002f\u0049\u0020"+_eegf .Interpolate .WriteString ()+"\u000a";};if _eegf .Width !=nil {_faeg +="\u002f\u0057\u0020"+_eegf .Width .WriteString ()+"\u000a";};_eba .WriteString (_faeg );_eba .WriteString ("\u0049\u0044\u0020");_eba .Write (_eegf ._fgeg );_eba .WriteString ("\u000a\u0045\u0049\u000a");return _eba .String ();};func _bcbe (_gabc _db .PdfColorspace )bool {_ ,_bac :=_gabc .(*_db .PdfColorspaceSpecialPattern );return _bac ;};func (_bdc *ContentStreamProcessor )handleCommand_scn (_bcec *ContentStreamOperation ,_feddg *_db .PdfPageResources )error {_dfcf :=_bdc ._ddfb .ColorspaceNonStroking ;if !_bcbe (_dfcf ){if len (_bcec .Params )!=_dfcf .GetNumComponents (){_bb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_bb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bcec .Params ),_dfcf );return _aa .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_geeg ,_fbb :=_dfcf .ColorFromPdfObjects (_bcec .Params );if _fbb !=nil {_bb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c \u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0063o\u006co\u0072\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0043\u0053\u0020\u0069\u0073\u0020\u0025\u002b\u0076\u0029",_bcec .Params ,_dfcf );return _fbb ;};_bdc ._ddfb .ColorNonStroking =_geeg ;return nil ;};

// Bytes converts a set of content stream operations to a content stream byte presentation,
// i.e. the kind that can be stored as a PDF stream or string format.
func (_cbd *ContentStreamOperations )Bytes ()[]byte {var _bc _ga .Buffer ;for _ ,_bcg :=range *_cbd {if _bcg ==nil {continue ;};if _bcg .Operand =="\u0042\u0049"{_bc .WriteString (_bcg .Operand +"\u000a");_bc .WriteString (_bcg .Params [0].WriteString ());}else {for _ ,_bec :=range _bcg .Params {_bc .WriteString (_bec .WriteString ());_bc .WriteString ("\u0020");};_bc .WriteString (_bcg .Operand +"\u000a");};};return _bc .Bytes ();};

// Add_i adds 'i' operand to the content stream: Set the flatness tolerance in the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_abe *ContentCreator )Add_i (flatness float64 )*ContentCreator {_dgdg :=ContentStreamOperation {};_dgdg .Operand ="\u0069";_dgdg .Params =_cfde ([]float64 {flatness });_abe ._af =append (_abe ._af ,&_dgdg );return _abe ;};

// NewContentStreamParser creates a new instance of the content stream parser from an input content
// stream string.
func NewContentStreamParser (contentStr string )*ContentStreamParser {_cagf :=ContentStreamParser {};_aeb :=_ga .NewBufferString (contentStr +"\u000a");_cagf ._ddd =_d .NewReader (_aeb );return &_cagf ;};

// Add_c adds 'c' operand to the content stream: Append a Bezier curve to the current path from
// the current point to (x3,y3) with (x1,x1) and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_dda *ContentCreator )Add_c (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_deg :=ContentStreamOperation {};_deg .Operand ="\u0063";_deg .Params =_cfde ([]float64 {x1 ,y1 ,x2 ,y2 ,x3 ,y3 });_dda ._af =append (_dda ._af ,&_deg );return _dda ;};

// AddHandler adds a new ContentStreamProcessor `handler` of type `condition` for `operand`.
func (_bgae *ContentStreamProcessor )AddHandler (condition HandlerConditionEnum ,operand string ,handler HandlerFunc ){_cbab :=handlerEntry {};_cbab .Condition =condition ;_cbab .Operand =operand ;_cbab .Handler =handler ;_bgae ._dbcg =append (_bgae ._dbcg ,_cbab );};

// ContentStreamParser represents a content stream parser for parsing content streams in PDFs.
type ContentStreamParser struct{_ddd *_d .Reader };

// Add_scn appends 'scn' operand to the content stream:
// Same as SC but for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_eeef *ContentCreator )Add_scn (c ...float64 )*ContentCreator {_bgc :=ContentStreamOperation {};_bgc .Operand ="\u0073\u0063\u006e";_bgc .Params =_cfde (c );_eeef ._af =append (_eeef ._af ,&_bgc );return _eeef ;};func (_fag *ContentStreamProcessor )getColorspace (_bdea string ,_cge *_db .PdfPageResources )(_db .PdfColorspace ,error ){switch _bdea {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return _db .NewPdfColorspaceDeviceGray (),nil ;case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return _db .NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return _db .NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _db .NewPdfColorspaceSpecialPattern (),nil ;};_gbd ,_agaab :=_cge .GetColorspaceByName (_bg .PdfObjectName (_bdea ));if _agaab {return _gbd ,nil ;};switch _bdea {case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _db .NewPdfColorspaceCalGray (),nil ;case "\u0043\u0061\u006c\u0052\u0047\u0042":return _db .NewPdfColorspaceCalRGB (),nil ;case "\u004c\u0061\u0062":return _db .NewPdfColorspaceLab (),nil ;};_bb .Log .Debug ("\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063e\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0065\u0064\u003a\u0020\u0025\u0073",_bdea );return nil ,_b .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065:\u0020\u0025\u0073",_bdea );};

// Add_y appends 'y' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with (x1, y1) and (x3,y3) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_fad *ContentCreator )Add_y (x1 ,y1 ,x3 ,y3 float64 )*ContentCreator {_bccg :=ContentStreamOperation {};_bccg .Operand ="\u0079";_bccg .Params =_cfde ([]float64 {x1 ,y1 ,x3 ,y3 });_fad ._af =append (_fad ._af ,&_bccg );return _fad ;};

// Add_w adds 'w' operand to the content stream, which sets the line width.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_dbf *ContentCreator )Add_w (lineWidth float64 )*ContentCreator {_eb :=ContentStreamOperation {};_eb .Operand ="\u0077";_eb .Params =_cfde ([]float64 {lineWidth });_dbf ._af =append (_dbf ._af ,&_eb );return _dbf ;};func (_cdad *ContentStreamProcessor )handleCommand_G (_fddd *ContentStreamOperation ,_abab *_db .PdfPageResources )error {_feed :=_db .NewPdfColorspaceDeviceGray ();if len (_fddd .Params )!=_feed .GetNumComponents (){_bb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_bb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fddd .Params ),_feed );return _aa .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_dbfg ,_bfae :=_feed .ColorFromPdfObjects (_fddd .Params );if _bfae !=nil {return _bfae ;};_cdad ._ddfb .ColorspaceStroking =_feed ;_cdad ._ddfb .ColorStroking =_dbfg ;return nil ;};

// GraphicStateStack represents a stack of GraphicsState.
type GraphicStateStack []GraphicsState ;

// ContentStreamProcessor defines a data structure and methods for processing a content stream, keeping track of the
// current graphics state, and allowing external handlers to define their own functions as a part of the processing,
// for example rendering or extracting certain information.
type ContentStreamProcessor struct{_ebg GraphicStateStack ;_bae []*ContentStreamOperation ;_ddfb GraphicsState ;_dbcg []handlerEntry ;_dfc int ;};func (_cgfg *ContentStreamProcessor )handleCommand_RG (_dfbg *ContentStreamOperation ,_dgbgc *_db .PdfPageResources )error {_ffeb :=_db .NewPdfColorspaceDeviceRGB ();if len (_dfbg .Params )!=_ffeb .GetNumComponents (){_bb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020R\u0047");_bb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_dfbg .Params ),_ffeb );return _aa .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_gbbg ,_aaef :=_ffeb .ColorFromPdfObjects (_dfbg .Params );if _aaef !=nil {return _aaef ;};_cgfg ._ddfb .ColorspaceStroking =_ffeb ;_cgfg ._ddfb .ColorStroking =_gbbg ;return nil ;};func (_gege *ContentStreamParser )parseBool ()(_bg .PdfObjectBool ,error ){_ffe ,_adcg :=_gege ._ddd .Peek (4);if _adcg !=nil {return _bg .PdfObjectBool (false ),_adcg ;};if (len (_ffe )>=4)&&(string (_ffe [:4])=="\u0074\u0072\u0075\u0065"){_gege ._ddd .Discard (4);return _bg .PdfObjectBool (true ),nil ;};_ffe ,_adcg =_gege ._ddd .Peek (5);if _adcg !=nil {return _bg .PdfObjectBool (false ),_adcg ;};if (len (_ffe )>=5)&&(string (_ffe [:5])=="\u0066\u0061\u006cs\u0065"){_gege ._ddd .Discard (5);return _bg .PdfObjectBool (false ),nil ;};return _bg .PdfObjectBool (false ),_aa .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};

// SetNonStrokingColor sets the non-stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_gf *ContentCreator )SetNonStrokingColor (color _db .PdfColor )*ContentCreator {switch _gcb :=color .(type ){case *_db .PdfColorDeviceGray :_gf .Add_g (_gcb .Val ());case *_db .PdfColorDeviceRGB :_gf .Add_rg (_gcb .R (),_gcb .G (),_gcb .B ());case *_db .PdfColorDeviceCMYK :_gf .Add_k (_gcb .C (),_gcb .M (),_gcb .Y (),_gcb .K ());default:_bb .Log .Debug ("\u0053\u0065\u0074N\u006f\u006e\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006f\u006c\u006f\u0072\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020c\u006f\u006c\u006f\u0072\u003a\u0020\u0025\u0054",_gcb );};return _gf ;};

// ContentCreator is a builder for PDF content streams.
type ContentCreator struct{_af ContentStreamOperations };

// Add_SCN appends 'SCN' operand to the content stream:
// Same as SC but supports more colorspaces.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bbab *ContentCreator )Add_SCN (c ...float64 )*ContentCreator {_dae :=ContentStreamOperation {};_dae .Operand ="\u0053\u0043\u004e";_dae .Params =_cfde (c );_bbab ._af =append (_bbab ._af ,&_dae );return _bbab ;};

// Add_M adds 'M' operand to the content stream: Set the miter limit (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_dg *ContentCreator )Add_M (miterlimit float64 )*ContentCreator {_dgd :=ContentStreamOperation {};_dgd .Operand ="\u004d";_dgd .Params =_cfde ([]float64 {miterlimit });_dg ._af =append (_dg ._af ,&_dgd );return _dg ;};func (_aeab *ContentStreamParser )skipComments ()error {if _ ,_cadf :=_aeab .skipSpaces ();_cadf !=nil {return _cadf ;};_bde :=true ;for {_gegb ,_ceaa :=_aeab ._ddd .Peek (1);if _ceaa !=nil {_bb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_ceaa .Error ());return _ceaa ;};if _bde &&_gegb [0]!='%'{return nil ;};_bde =false ;if (_gegb [0]!='\r')&&(_gegb [0]!='\n'){_aeab ._ddd .ReadByte ();}else {break ;};};return _aeab .skipComments ();};

// Add_g appends 'g' operand to the content stream:
// Same as G but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_geg *ContentCreator )Add_g (gray float64 )*ContentCreator {_ecg :=ContentStreamOperation {};_ecg .Operand ="\u0067";_ecg .Params =_cfde ([]float64 {gray });_geg ._af =append (_geg ._af ,&_ecg );return _geg ;};func (_cfb *ContentStreamProcessor )handleCommand_cs (_egaf *ContentStreamOperation ,_ddadc *_db .PdfPageResources )error {if len (_egaf .Params )< 1{_bb .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _aa .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_egaf .Params )> 1{_bb .Log .Debug ("\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _aa .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_egggf ,_fegf :=_egaf .Params [0].(*_bg .PdfObjectName );if !_fegf {_bb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0053\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _aa .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_abbf ,_eeeg :=_cfb .getColorspace (string (*_egggf ),_ddadc );if _eeeg !=nil {return _eeeg ;};_cfb ._ddfb .ColorspaceNonStroking =_abbf ;_ecgf ,_eeeg :=_cfb .getInitialColor (_abbf );if _eeeg !=nil {return _eeeg ;};_cfb ._ddfb .ColorNonStroking =_ecgf ;return nil ;};func (_bcgd *ContentStreamParser )parseDict ()(*_bg .PdfObjectDictionary ,error ){_bb .Log .Trace ("\u0052\u0065\u0061\u0064i\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074 \u0073t\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0021");_cdec :=_bg .MakeDict ();_agf ,_ :=_bcgd ._ddd .ReadByte ();if _agf !='<'{return nil ,_aa .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};_agf ,_ =_bcgd ._ddd .ReadByte ();if _agf !='<'{return nil ,_aa .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};for {_bcgd .skipSpaces ();_effb ,_fgf :=_bcgd ._ddd .Peek (2);if _fgf !=nil {return nil ,_fgf ;};_bb .Log .Trace ("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021",string (_effb ),string (_effb ));if (_effb [0]=='>')&&(_effb [1]=='>'){_bb .Log .Trace ("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");_bcgd ._ddd .ReadByte ();_bcgd ._ddd .ReadByte ();break ;};_bb .Log .Trace ("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021");_gcdb ,_fgf :=_bcgd .parseName ();_bb .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_gcdb );if _fgf !=nil {_bb .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073",_fgf );return nil ,_fgf ;};if len (_gcdb )> 4&&_gcdb [len (_gcdb )-4:]=="\u006e\u0075\u006c\u006c"{_fgcd :=_gcdb [0:len (_gcdb )-4];_bb .Log .Trace ("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029",_gcdb );_bb .Log .Trace ("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c",_fgcd );_bcgd .skipSpaces ();_ega ,_ :=_bcgd ._ddd .Peek (1);if _ega [0]=='/'{_cdec .Set (_fgcd ,_bg .MakeNull ());continue ;};};_bcgd .skipSpaces ();_cdc ,_ ,_fgf :=_bcgd .parseObject ();if _fgf !=nil {return nil ,_fgf ;};_cdec .Set (_gcdb ,_cdc );_bb .Log .Trace ("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073",_gcdb ,_cdc .String ());};return _cdec ,nil ;};

// Add_Tf appends 'Tf' operand to the content stream:
// Set font and font size specified by font resource `fontName` and `fontSize`.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_aca *ContentCreator )Add_Tf (fontName _bg .PdfObjectName ,fontSize float64 )*ContentCreator {_bceg :=ContentStreamOperation {};_bceg .Operand ="\u0054\u0066";_bceg .Params =_fbbf ([]_bg .PdfObjectName {fontName });_bceg .Params =append (_bceg .Params ,_cfde ([]float64 {fontSize })...);_aca ._af =append (_aca ._af ,&_bceg );return _aca ;};

// Add_Tr appends 'Tr' operand to the content stream:
// Set text rendering mode.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_eff *ContentCreator )Add_Tr (render int64 )*ContentCreator {_cgf :=ContentStreamOperation {};_cgf .Operand ="\u0054\u0072";_cgf .Params =_dcdea ([]int64 {render });_eff ._af =append (_eff ._af ,&_cgf );return _eff ;};

// Add_v appends 'v' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with the current point and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_gc *ContentCreator )Add_v (x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_dcga :=ContentStreamOperation {};_dcga .Operand ="\u0076";_dcga .Params =_cfde ([]float64 {x2 ,y2 ,x3 ,y3 });_gc ._af =append (_gc ._af ,&_dcga );return _gc ;};func _aggc (_bage _bg .PdfObject )(_db .PdfColorspace ,error ){_ccb ,_gfea :=_bage .(*_bg .PdfObjectArray );if !_gfea {_bb .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0049\u006ev\u0061\u006c\u0069d\u0020\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020cs\u0020\u006e\u006ft\u0020\u0069n\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025#\u0076\u0029",_bage );return nil ,_aa .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if _ccb .Len ()!=4{_bb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061r\u0072\u0061\u0079\u002c\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0034\u0020\u0028\u0025\u0064\u0029",_ccb .Len ());return nil ,_aa .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_cbag ,_gfea :=_ccb .Get (0).(*_bg .PdfObjectName );if !_gfea {_bb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072s\u0074 \u0065\u006c\u0065\u006de\u006e\u0074 \u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0023\u0076\u0029",*_ccb );return nil ,_aa .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_cbag !="\u0049"&&*_cbag !="\u0049n\u0064\u0065\u0078\u0065\u0064"{_bb .Log .Debug ("\u0045\u0072r\u006f\u0072\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0049\u0020\u0028\u0067\u006f\u0074\u003a\u0020\u0025\u0076\u0029",*_cbag );return nil ,_aa .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_cbag ,_gfea =_ccb .Get (1).(*_bg .PdfObjectName );if !_gfea {_bb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072a\u0079\u003a\u0020\u0025\u0023v\u0029",*_ccb );return nil ,_aa .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_cbag !="\u0047"&&*_cbag !="\u0052\u0047\u0042"&&*_cbag !="\u0043\u004d\u0059\u004b"&&*_cbag !="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"&&*_cbag !="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"&&*_cbag !="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{_bb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0047\u002f\u0052\u0047\u0042\u002f\u0043\u004d\u0059\u004b\u0020\u0028g\u006f\u0074\u003a\u0020\u0025v\u0029",*_cbag );return nil ,_aa .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_ceg :="";switch *_cbag {case "\u0047","\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_ceg ="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";case "\u0052\u0047\u0042","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_ceg ="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";case "\u0043\u004d\u0059\u004b","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":_ceg ="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";};_gaffc :=_bg .MakeArray (_bg .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"),_bg .MakeName (_ceg ),_ccb .Get (2),_ccb .Get (3));return _db .NewPdfColorspaceFromPdfObject (_gaffc );};func (_cffa *ContentStreamProcessor )handleCommand_cm (_daa *ContentStreamOperation ,_cdae *_db .PdfPageResources )error {if len (_daa .Params )!=6{_bb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0063\u006d\u003a\u0020\u0025\u0064",len (_daa .Params ));return _aa .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_bcaa ,_dgdd :=_bg .GetNumbersAsFloat (_daa .Params );if _dgdd !=nil {return _dgdd ;};_ccc :=_ac .NewMatrix (_bcaa [0],_bcaa [1],_bcaa [2],_bcaa [3],_bcaa [4],_bcaa [5]);_cffa ._ddfb .CTM .Concat (_ccc );return nil ;};func (_ebbg *ContentStreamInlineImage )toImageBase (_eea *_db .PdfPageResources )(*_gb .ImageBase ,error ){if _ebbg ._eac !=nil {return _ebbg ._eac ,nil ;};_cdbf :=_gb .ImageBase {};if _ebbg .Height ==nil {return nil ,_aa .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_geee ,_adcd :=_ebbg .Height .(*_bg .PdfObjectInteger );if !_adcd {return nil ,_aa .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_cdbf .Height =int (*_geee );if _ebbg .Width ==nil {return nil ,_aa .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_aff ,_adcd :=_ebbg .Width .(*_bg .PdfObjectInteger );if !_adcd {return nil ,_aa .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064\u0074\u0068");};_cdbf .Width =int (*_aff );_cce ,_efa :=_ebbg .IsMask ();if _efa !=nil {return nil ,_efa ;};if _cce {_cdbf .BitsPerComponent =1;_cdbf .ColorComponents =1;}else {if _ebbg .BitsPerComponent ==nil {_bb .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0042\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u0038");_cdbf .BitsPerComponent =8;}else {_gab ,_bafc :=_ebbg .BitsPerComponent .(*_bg .PdfObjectInteger );if !_bafc {_bb .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0062\u0069\u0074\u0073 p\u0065\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u0076al\u0075\u0065,\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_ebbg .BitsPerComponent );return nil ,_aa .New ("\u0042\u0050\u0043\u0020\u0054\u0079\u0070\u0065\u0020e\u0072\u0072\u006f\u0072");};_cdbf .BitsPerComponent =int (*_gab );};if _ebbg .ColorSpace !=nil {_dca ,_gdd :=_ebbg .GetColorSpace (_eea );if _gdd !=nil {return nil ,_gdd ;};_cdbf .ColorComponents =_dca .GetNumComponents ();}else {_bb .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075m\u0069\u006eg\u0020\u0031\u0020\u0063o\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074");_cdbf .ColorComponents =1;};};if _eca ,_bag :=_bg .GetArray (_ebbg .Decode );_bag {_cdbf .Decode ,_efa =_eca .ToFloat64Array ();if _efa !=nil {return nil ,_efa ;};};_ebbg ._eac =&_cdbf ;return _ebbg ._eac ,nil ;};

// Transform returns coordinates x, y transformed by the CTM.
func (_bffg *GraphicsState )Transform (x ,y float64 )(float64 ,float64 ){return _bffg .CTM .Transform (x ,y );};func (_bdb *ContentStreamParser )parseNull ()(_bg .PdfObjectNull ,error ){_ ,_bda :=_bdb ._ddd .Discard (4);return _bg .PdfObjectNull {},_bda ;};func (_efbd *ContentStreamProcessor )getInitialColor (_acc _db .PdfColorspace )(_db .PdfColor ,error ){switch _gfge :=_acc .(type ){case *_db .PdfColorspaceDeviceGray :return _db .NewPdfColorDeviceGray (0.0),nil ;case *_db .PdfColorspaceDeviceRGB :return _db .NewPdfColorDeviceRGB (0.0,0.0,0.0),nil ;case *_db .PdfColorspaceDeviceCMYK :return _db .NewPdfColorDeviceCMYK (0.0,0.0,0.0,1.0),nil ;case *_db .PdfColorspaceCalGray :return _db .NewPdfColorCalGray (0.0),nil ;case *_db .PdfColorspaceCalRGB :return _db .NewPdfColorCalRGB (0.0,0.0,0.0),nil ;case *_db .PdfColorspaceLab :_baac :=0.0;_agba :=0.0;_gde :=0.0;if _gfge .Range [0]> 0{_baac =_gfge .Range [0];};if _gfge .Range [2]> 0{_agba =_gfge .Range [2];};return _db .NewPdfColorLab (_baac ,_agba ,_gde ),nil ;case *_db .PdfColorspaceICCBased :if _gfge .Alternate ==nil {_bb .Log .Trace ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020-\u0020\u0061\u0074\u0074\u0065\u006d\u0070\u0074\u0069\u006e\u0067\u0020\u0066\u0061\u006c\u006c\u0020\u0062a\u0063\u006b\u0020\u0028\u004e\u0020\u003d\u0020\u0025\u0064\u0029",_gfge .N );if _gfge .N ==1{_bb .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079");return _efbd .getInitialColor (_db .NewPdfColorspaceDeviceGray ());}else if _gfge .N ==3{_bb .Log .Trace ("\u0046a\u006c\u006c\u0069\u006eg\u0020\u0062\u0061\u0063\u006b \u0074o\u0020D\u0065\u0076\u0069\u0063\u0065\u0052\u0047B");return _efbd .getInitialColor (_db .NewPdfColorspaceDeviceRGB ());}else if _gfge .N ==4{_bb .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065C\u004d\u0059\u004b");return _efbd .getInitialColor (_db .NewPdfColorspaceDeviceCMYK ());}else {return nil ,_aa .New ("a\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0049C\u0043");};};return _efbd .getInitialColor (_gfge .Alternate );case *_db .PdfColorspaceSpecialIndexed :if _gfge .Base ==nil {return nil ,_aa .New ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0062\u0061\u0073e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069f\u0069\u0065\u0064");};return _efbd .getInitialColor (_gfge .Base );case *_db .PdfColorspaceSpecialSeparation :if _gfge .AlternateSpace ==nil {return nil ,_aa .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _efbd .getInitialColor (_gfge .AlternateSpace );case *_db .PdfColorspaceDeviceN :if _gfge .AlternateSpace ==nil {return nil ,_aa .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");};return _efbd .getInitialColor (_gfge .AlternateSpace );case *_db .PdfColorspaceSpecialPattern :return nil ,nil ;};_bb .Log .Debug ("Un\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0066\u006f\u0072\u0020\u0075\u006e\u006b\u006e\u006fw\u006e \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065:\u0020\u0025T",_acc );return nil ,_aa .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065");};

// GraphicsState is a basic graphics state implementation for PDF processing.
// Initially only implementing and tracking a portion of the information specified. Easy to add more.
type GraphicsState struct{ColorspaceStroking _db .PdfColorspace ;ColorspaceNonStroking _db .PdfColorspace ;ColorStroking _db .PdfColor ;ColorNonStroking _db .PdfColor ;CTM _ac .Matrix ;};

// Add_gs adds 'gs' operand to the content stream: Set the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ceb *ContentCreator )Add_gs (dictName _bg .PdfObjectName )*ContentCreator {_feg :=ContentStreamOperation {};_feg .Operand ="\u0067\u0073";_feg .Params =_fbbf ([]_bg .PdfObjectName {dictName });_ceb ._af =append (_ceb ._af ,&_feg );return _ceb ;};func _cde (_dfec *ContentStreamInlineImage )(*_bg .MultiEncoder ,error ){_gaaa :=_bg .NewMultiEncoder ();var _bga *_bg .PdfObjectDictionary ;var _cbdg []_bg .PdfObject ;if _dadc :=_dfec .DecodeParms ;_dadc !=nil {_gdf ,_ebb :=_dadc .(*_bg .PdfObjectDictionary );if _ebb {_bga =_gdf ;};_agaa ,_bcea :=_dadc .(*_bg .PdfObjectArray );if _bcea {for _ ,_eged :=range _agaa .Elements (){if _ebf ,_caefa :=_eged .(*_bg .PdfObjectDictionary );_caefa {_cbdg =append (_cbdg ,_ebf );}else {_cbdg =append (_cbdg ,nil );};};};};_fefd :=_dfec .Filter ;if _fefd ==nil {return nil ,_b .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_eaf ,_fee :=_fefd .(*_bg .PdfObjectArray );if !_fee {return nil ,_b .Errorf ("m\u0075\u006c\u0074\u0069\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0063\u0061\u006e\u0020\u006f\u006el\u0079\u0020\u0062\u0065\u0020\u006d\u0061\u0064\u0065\u0020fr\u006f\u006d\u0020a\u0072r\u0061\u0079");};for _cac ,_ecf :=range _eaf .Elements (){_ecfd ,_bgfa :=_ecf .(*_bg .PdfObjectName );if !_bgfa {return nil ,_b .Errorf ("\u006d\u0075l\u0074\u0069\u0020\u0066i\u006c\u0074e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061 \u006e\u0061\u006d\u0065");};var _dgbg _bg .PdfObject ;if _bga !=nil {_dgbg =_bga ;}else {if len (_cbdg )> 0{if _cac >=len (_cbdg ){return nil ,_b .Errorf ("\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020d\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u0020a\u0072\u0072\u0061\u0079");};_dgbg =_cbdg [_cac ];};};var _fae *_bg .PdfObjectDictionary ;if _dfbb ,_add :=_dgbg .(*_bg .PdfObjectDictionary );_add {_fae =_dfbb ;};if *_ecfd ==_bg .StreamEncodingFilterNameFlate ||*_ecfd =="\u0046\u006c"{_fadf ,_ddgc :=_beb (_dfec ,_fae );if _ddgc !=nil {return nil ,_ddgc ;};_gaaa .AddEncoder (_fadf );}else if *_ecfd ==_bg .StreamEncodingFilterNameLZW {_aeaa ,_dagd :=_cebd (_dfec ,_fae );if _dagd !=nil {return nil ,_dagd ;};_gaaa .AddEncoder (_aeaa );}else if *_ecfd ==_bg .StreamEncodingFilterNameASCIIHex {_dcc :=_bg .NewASCIIHexEncoder ();_gaaa .AddEncoder (_dcc );}else if *_ecfd ==_bg .StreamEncodingFilterNameASCII85 ||*_ecfd =="\u0041\u0038\u0035"{_cadd :=_bg .NewASCII85Encoder ();_gaaa .AddEncoder (_cadd );}else {_bb .Log .Error ("U\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u0069l\u0074\u0065\u0072\u0020\u0025\u0073",*_ecfd );return nil ,_b .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u0066\u0069\u006c\u0074er \u0069n \u006d\u0075\u006c\u0074\u0069\u0020\u0066il\u0074\u0065\u0072\u0020\u0061\u0072\u0072a\u0079");};};return _gaaa ,nil ;};

// NewContentStreamProcessor returns a new ContentStreamProcessor for operations `ops`.
func NewContentStreamProcessor (ops []*ContentStreamOperation )*ContentStreamProcessor {_dgge :=ContentStreamProcessor {};_dgge ._ebg =GraphicStateStack {};_aab :=GraphicsState {};_dgge ._ddfb =_aab ;_dgge ._dbcg =[]handlerEntry {};_dgge ._dfc =0;_dgge ._bae =ops ;return &_dgge ;};func (_afad *ContentStreamProcessor )handleCommand_CS (_gfa *ContentStreamOperation ,_dgbgb *_db .PdfPageResources )error {if len (_gfa .Params )< 1{_bb .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");return _aa .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_gfa .Params )> 1{_bb .Log .Debug ("\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");return _aa .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_fab ,_gedf :=_gfa .Params [0].(*_bg .PdfObjectName );if !_gedf {_bb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020c\u0073\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");return _aa .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_fbfg ,_gfac :=_afad .getColorspace (string (*_fab ),_dgbgb );if _gfac !=nil {return _gfac ;};_afad ._ddfb .ColorspaceStroking =_fbfg ;_dgag ,_gfac :=_afad .getInitialColor (_fbfg );if _gfac !=nil {return _gfac ;};_afad ._ddfb .ColorStroking =_dgag ;return nil ;};

// Push pushes `gs` on the `gsStack`.
func (_bcd *GraphicStateStack )Push (gs GraphicsState ){*_bcd =append (*_bcd ,gs )};func (_ecda *ContentStreamParser )parseName ()(_bg .PdfObjectName ,error ){_ace :="";_fcc :=false ;for {_fcfg ,_bdde :=_ecda ._ddd .Peek (1);if _bdde ==_e .EOF {break ;};if _bdde !=nil {return _bg .PdfObjectName (_ace ),_bdde ;};if !_fcc {if _fcfg [0]=='/'{_fcc =true ;_ecda ._ddd .ReadByte ();}else {_bb .Log .Error ("N\u0061\u006d\u0065\u0020\u0073\u0074a\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069\u0074h\u0020\u0025\u0073 \u0028%\u0020\u0078\u0029",_fcfg ,_fcfg );return _bg .PdfObjectName (_ace ),_b .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_fcfg [0]);};}else {if _bg .IsWhiteSpace (_fcfg [0]){break ;}else if (_fcfg [0]=='/')||(_fcfg [0]=='[')||(_fcfg [0]=='(')||(_fcfg [0]==']')||(_fcfg [0]=='<')||(_fcfg [0]=='>'){break ;}else if _fcfg [0]=='#'{_abd ,_efag :=_ecda ._ddd .Peek (3);if _efag !=nil {return _bg .PdfObjectName (_ace ),_efag ;};_ecda ._ddd .Discard (3);_cbgag ,_efag :=_g .DecodeString (string (_abd [1:3]));if _efag !=nil {return _bg .PdfObjectName (_ace ),_efag ;};_ace +=string (_cbgag );}else {_bfd ,_ :=_ecda ._ddd .ReadByte ();_ace +=string (_bfd );};};};return _bg .PdfObjectName (_ace ),nil ;};

// Operations returns the list of operations.
func (_dce *ContentCreator )Operations ()*ContentStreamOperations {return &_dce ._af };

// Bytes converts the content stream operations to a content stream byte presentation, i.e. the kind that can be
// stored as a PDF stream or string format.
func (_ba *ContentCreator )Bytes ()[]byte {return _ba ._af .Bytes ()};

// Add_EMC appends 'EMC' operand to the content stream:
// Ends a marked-content sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_cebe *ContentCreator )Add_EMC ()*ContentCreator {_eeed :=ContentStreamOperation {};_eeed .Operand ="\u0045\u004d\u0043";_cebe ._af =append (_cebe ._af ,&_eeed );return _cebe ;};var _cfg =map[string ]struct{}{"\u0062":struct{}{},"\u0042":struct{}{},"\u0062\u002a":struct{}{},"\u0042\u002a":struct{}{},"\u0042\u0044\u0043":struct{}{},"\u0042\u0049":struct{}{},"\u0042\u004d\u0043":struct{}{},"\u0042\u0054":struct{}{},"\u0042\u0058":struct{}{},"\u0063":struct{}{},"\u0063\u006d":struct{}{},"\u0043\u0053":struct{}{},"\u0063\u0073":struct{}{},"\u0064":struct{}{},"\u0064\u0030":struct{}{},"\u0064\u0031":struct{}{},"\u0044\u006f":struct{}{},"\u0044\u0050":struct{}{},"\u0045\u0049":struct{}{},"\u0045\u004d\u0043":struct{}{},"\u0045\u0054":struct{}{},"\u0045\u0058":struct{}{},"\u0066":struct{}{},"\u0046":struct{}{},"\u0066\u002a":struct{}{},"\u0047":struct{}{},"\u0067":struct{}{},"\u0067\u0073":struct{}{},"\u0068":struct{}{},"\u0069":struct{}{},"\u0049\u0044":struct{}{},"\u006a":struct{}{},"\u004a":struct{}{},"\u004b":struct{}{},"\u006b":struct{}{},"\u006c":struct{}{},"\u006d":struct{}{},"\u004d":struct{}{},"\u004d\u0050":struct{}{},"\u006e":struct{}{},"\u0071":struct{}{},"\u0051":struct{}{},"\u0072\u0065":struct{}{},"\u0052\u0047":struct{}{},"\u0072\u0067":struct{}{},"\u0072\u0069":struct{}{},"\u0073":struct{}{},"\u0053":struct{}{},"\u0053\u0043":struct{}{},"\u0073\u0063":struct{}{},"\u0053\u0043\u004e":struct{}{},"\u0073\u0063\u006e":struct{}{},"\u0073\u0068":struct{}{},"\u0054\u002a":struct{}{},"\u0054\u0063":struct{}{},"\u0054\u0064":struct{}{},"\u0054\u0044":struct{}{},"\u0054\u0066":struct{}{},"\u0054\u006a":struct{}{},"\u0054\u004a":struct{}{},"\u0054\u004c":struct{}{},"\u0054\u006d":struct{}{},"\u0054\u0072":struct{}{},"\u0054\u0073":struct{}{},"\u0054\u0077":struct{}{},"\u0054\u007a":struct{}{},"\u0076":struct{}{},"\u0077":struct{}{},"\u0057":struct{}{},"\u0057\u002a":struct{}{},"\u0079":struct{}{},"\u0027":struct{}{},"\u0022":struct{}{}};

// Add_W appends 'W' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (nonzero winding rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_dba *ContentCreator )Add_W ()*ContentCreator {_dga :=ContentStreamOperation {};_dga .Operand ="\u0057";_dba ._af =append (_dba ._af ,&_dga );return _dba ;};

// Translate applies a simple x-y translation to the transformation matrix.
func (_bad *ContentCreator )Translate (tx ,ty float64 )*ContentCreator {return _bad .Add_cm (1,0,0,1,tx ,ty );};

// GetColorSpace returns the colorspace of the inline image.
func (_dfbbc *ContentStreamInlineImage )GetColorSpace (resources *_db .PdfPageResources )(_db .PdfColorspace ,error ){if _dfbbc .ColorSpace ==nil {_bb .Log .Debug ("\u0049\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076i\u006e\u0067\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u002c\u0020\u0061\u0073\u0073\u0075\u006di\u006e\u0067\u0020\u0047\u0072a\u0079");return _db .NewPdfColorspaceDeviceGray (),nil ;};if _gfbg ,_aac :=_dfbbc .ColorSpace .(*_bg .PdfObjectArray );_aac {return _aggc (_gfbg );};_cee ,_bgg :=_dfbbc .ColorSpace .(*_bg .PdfObjectName );if !_bgg {_bb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u003b\u0025\u002bv\u0029",_dfbbc .ColorSpace ,_dfbbc .ColorSpace );return nil ,_aa .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_cee =="\u0047"||*_cee =="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"{return _db .NewPdfColorspaceDeviceGray (),nil ;}else if *_cee =="\u0052\u0047\u0042"||*_cee =="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"{return _db .NewPdfColorspaceDeviceRGB (),nil ;}else if *_cee =="\u0043\u004d\u0059\u004b"||*_cee =="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{return _db .NewPdfColorspaceDeviceCMYK (),nil ;}else if *_cee =="\u0049"||*_cee =="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_aa .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0049\u006e\u0064e\u0078 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");}else {if resources .ColorSpace ==nil {_bb .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_cee );return nil ,_aa .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};_fce ,_eaaa :=resources .GetColorspaceByName (*_cee );if !_eaaa {_bb .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_cee );return nil ,_aa .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};return _fce ,nil ;};};func (_efbe *ContentStreamInlineImage )String ()string {_bcee :=_b .Sprintf ("I\u006el\u0069\u006e\u0065\u0049\u006d\u0061\u0067\u0065(\u006c\u0065\u006e\u003d%d\u0029\u000a",len (_efbe ._fgeg ));if _efbe .BitsPerComponent !=nil {_bcee +="\u002d\u0020\u0042\u0050\u0043\u0020"+_efbe .BitsPerComponent .WriteString ()+"\u000a";};if _efbe .ColorSpace !=nil {_bcee +="\u002d\u0020\u0043S\u0020"+_efbe .ColorSpace .WriteString ()+"\u000a";};if _efbe .Decode !=nil {_bcee +="\u002d\u0020\u0044\u0020"+_efbe .Decode .WriteString ()+"\u000a";};if _efbe .DecodeParms !=nil {_bcee +="\u002d\u0020\u0044P\u0020"+_efbe .DecodeParms .WriteString ()+"\u000a";};if _efbe .Filter !=nil {_bcee +="\u002d\u0020\u0046\u0020"+_efbe .Filter .WriteString ()+"\u000a";};if _efbe .Height !=nil {_bcee +="\u002d\u0020\u0048\u0020"+_efbe .Height .WriteString ()+"\u000a";};if _efbe .ImageMask !=nil {_bcee +="\u002d\u0020\u0049M\u0020"+_efbe .ImageMask .WriteString ()+"\u000a";};if _efbe .Intent !=nil {_bcee +="\u002d \u0049\u006e\u0074\u0065\u006e\u0074 "+_efbe .Intent .WriteString ()+"\u000a";};if _efbe .Interpolate !=nil {_bcee +="\u002d\u0020\u0049\u0020"+_efbe .Interpolate .WriteString ()+"\u000a";};if _efbe .Width !=nil {_bcee +="\u002d\u0020\u0057\u0020"+_efbe .Width .WriteString ()+"\u000a";};return _bcee ;};func (_bff *ContentStreamParser )parseString ()(*_bg .PdfObjectString ,error ){_bff ._ddd .ReadByte ();var _cbda []byte ;_ccaf :=1;for {_bddb ,_ecac :=_bff ._ddd .Peek (1);if _ecac !=nil {return _bg .MakeString (string (_cbda )),_ecac ;};if _bddb [0]=='\\'{_bff ._ddd .ReadByte ();_cbdb ,_dcdb :=_bff ._ddd .ReadByte ();if _dcdb !=nil {return _bg .MakeString (string (_cbda )),_dcdb ;};if _bg .IsOctalDigit (_cbdb ){_ggde ,_dcb :=_bff ._ddd .Peek (2);if _dcb !=nil {return _bg .MakeString (string (_cbda )),_dcb ;};var _gcddd []byte ;_gcddd =append (_gcddd ,_cbdb );for _ ,_baad :=range _ggde {if _bg .IsOctalDigit (_baad ){_gcddd =append (_gcddd ,_baad );}else {break ;};};_bff ._ddd .Discard (len (_gcddd )-1);_bb .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_gcddd );_ccg ,_dcb :=_c .ParseUint (string (_gcddd ),8,32);if _dcb !=nil {return _bg .MakeString (string (_cbda )),_dcb ;};_cbda =append (_cbda ,byte (_ccg ));continue ;};switch _cbdb {case 'n':_cbda =append (_cbda ,'\n');case 'r':_cbda =append (_cbda ,'\r');case 't':_cbda =append (_cbda ,'\t');case 'b':_cbda =append (_cbda ,'\b');case 'f':_cbda =append (_cbda ,'\f');case '(':_cbda =append (_cbda ,'(');case ')':_cbda =append (_cbda ,')');case '\\':_cbda =append (_cbda ,'\\');};continue ;}else if _bddb [0]=='('{_ccaf ++;}else if _bddb [0]==')'{_ccaf --;if _ccaf ==0{_bff ._ddd .ReadByte ();break ;};};_bdee ,_ :=_bff ._ddd .ReadByte ();_cbda =append (_cbda ,_bdee );};return _bg .MakeString (string (_cbda )),nil ;};func _ddag (_daf *ContentStreamInlineImage )(_bg .StreamEncoder ,error ){if _daf .Filter ==nil {return _bg .NewRawEncoder (),nil ;};_gfcf ,_bdf :=_daf .Filter .(*_bg .PdfObjectName );if !_bdf {_cdb ,_fbe :=_daf .Filter .(*_bg .PdfObjectArray );if !_fbe {return nil ,_b .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0072 \u0041\u0072\u0072\u0061\u0079\u0020\u006fb\u006a\u0065\u0063\u0074");};if _cdb .Len ()==0{return _bg .NewRawEncoder (),nil ;};if _cdb .Len ()!=1{_gec ,_cag :=_cde (_daf );if _cag !=nil {_bb .Log .Error ("\u0046\u0061\u0069\u006c\u0065\u0064 \u0063\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u006d\u0075\u006c\u0074i\u0020\u0065\u006e\u0063\u006f\u0064\u0065r\u003a\u0020\u0025\u0076",_cag );return nil ,_cag ;};_bb .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063:\u0020\u0025\u0073\u000a",_gec );return _gec ,nil ;};_edaa :=_cdb .Get (0);_gfcf ,_fbe =_edaa .(*_bg .PdfObjectName );if !_fbe {return nil ,_b .Errorf ("\u0066\u0069l\u0074\u0065\u0072\u0020a\u0072\u0072a\u0079\u0020\u006d\u0065\u006d\u0062\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006fb\u006a\u0065\u0063\u0074");};};switch *_gfcf {case "\u0041\u0048\u0078","\u0041\u0053\u0043\u0049\u0049\u0048\u0065\u0078\u0044e\u0063\u006f\u0064\u0065":return _bg .NewASCIIHexEncoder (),nil ;case "\u0041\u0038\u0035","\u0041\u0053\u0043\u0049\u0049\u0038\u0035\u0044\u0065\u0063\u006f\u0064\u0065":return _bg .NewASCII85Encoder (),nil ;case "\u0044\u0043\u0054","\u0044C\u0054\u0044\u0065\u0063\u006f\u0064e":return _bdd (_daf );case "\u0046\u006c","F\u006c\u0061\u0074\u0065\u0044\u0065\u0063\u006f\u0064\u0065":return _beb (_daf ,nil );case "\u004c\u005a\u0057","\u004cZ\u0057\u0044\u0065\u0063\u006f\u0064e":return _cebd (_daf ,nil );case "\u0043\u0043\u0046","\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065":return _bg .NewCCITTFaxEncoder (),nil ;case "\u0052\u004c","\u0052u\u006eL\u0065\u006e\u0067\u0074\u0068\u0044\u0065\u0063\u006f\u0064\u0065":return _bg .NewRunLengthEncoder (),nil ;default:_bb .Log .Debug ("\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0069\u006d\u0061\u0067\u0065\u0020\u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u003a\u0020\u0025\u0073",*_gfcf );return nil ,_aa .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006el\u0069n\u0065 \u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};};func (_caf *ContentStreamProcessor )handleCommand_rg (_fcb *ContentStreamOperation ,_fdeg *_db .PdfPageResources )error {_ecbb :=_db .NewPdfColorspaceDeviceRGB ();if len (_fcb .Params )!=_ecbb .GetNumComponents (){_bb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_bb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fcb .Params ),_ecbb );return _aa .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_eegd ,_dead :=_ecbb .ColorFromPdfObjects (_fcb .Params );if _dead !=nil {return _dead ;};_caf ._ddfb .ColorspaceNonStroking =_ecbb ;_caf ._ddfb .ColorNonStroking =_eegd ;return nil ;};

// Add_G appends 'G' operand to the content stream:
// Set the stroking colorspace to DeviceGray and sets the gray level (0-1).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bed *ContentCreator )Add_G (gray float64 )*ContentCreator {_fbf :=ContentStreamOperation {};_fbf .Operand ="\u0047";_fbf .Params =_cfde ([]float64 {gray });_bed ._af =append (_bed ._af ,&_fbf );return _bed ;};

// Add_SC appends 'SC' operand to the content stream:
// Set color for stroking operations.  Input: c1, ..., cn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_efd *ContentCreator )Add_SC (c ...float64 )*ContentCreator {_dea :=ContentStreamOperation {};_dea .Operand ="\u0053\u0043";_dea .Params =_cfde (c );_efd ._af =append (_efd ._af ,&_dea );return _efd ;};func (_adfe *ContentStreamProcessor )handleCommand_SCN (_afga *ContentStreamOperation ,_dfcd *_db .PdfPageResources )error {_gddg :=_adfe ._ddfb .ColorspaceStroking ;if !_bcbe (_gddg ){if len (_afga .Params )!=_gddg .GetNumComponents (){_bb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_bb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_afga .Params ),_gddg );return _aa .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};};_fbc ,_fcdc :=_gddg .ColorFromPdfObjects (_afga .Params );if _fcdc !=nil {return _fcdc ;};_adfe ._ddfb .ColorStroking =_fbc ;return nil ;};

// Add_f_starred appends 'f*' operand to the content stream.
// f*: Fill the path using the even-odd rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_eed *ContentCreator )Add_f_starred ()*ContentCreator {_bf :=ContentStreamOperation {};_bf .Operand ="\u0066\u002a";_eed ._af =append (_eed ._af ,&_bf );return _eed ;};

// Add_Tz appends 'Tz' operand to the content stream:
// Set horizontal scaling.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_dfe *ContentCreator )Add_Tz (scale float64 )*ContentCreator {_dgb :=ContentStreamOperation {};_dgb .Operand ="\u0054\u007a";_dgb .Params =_cfde ([]float64 {scale });_dfe ._af =append (_dfe ._af ,&_dgb );return _dfe ;};func (_gdab *ContentStreamProcessor )handleCommand_k (_ebd *ContentStreamOperation ,_dgcg *_db .PdfPageResources )error {_gdfe :=_db .NewPdfColorspaceDeviceCMYK ();if len (_ebd .Params )!=_gdfe .GetNumComponents (){_bb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");_bb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_ebd .Params ),_gdfe );return _aa .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_acag ,_bbad :=_gdfe .ColorFromPdfObjects (_ebd .Params );if _bbad !=nil {return _bbad ;};_gdab ._ddfb .ColorspaceNonStroking =_gdfe ;_gdab ._ddfb .ColorNonStroking =_acag ;return nil ;};func (_dbac *ContentStreamParser )parseNumber ()(_bg .PdfObject ,error ){return _bg .ParseNumber (_dbac ._ddd );};

// Add_sh appends 'sh' operand to the content stream:
// Paints the shape and colour shading described by a shading dictionary specified by `name`,
// subject to the current clipping path
//
// See section 8.7.4 "Shading Patterns" and Table 77 (p. 190 PDF32000_2008).
func (_egc *ContentCreator )Add_sh (name _bg .PdfObjectName )*ContentCreator {_eecf :=ContentStreamOperation {};_eecf .Operand ="\u0073\u0068";_eecf .Params =_fbbf ([]_bg .PdfObjectName {name });_egc ._af =append (_egc ._af ,&_eecf );return _egc ;};

// Add_S appends 'S' operand to the content stream: Stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_gd *ContentCreator )Add_S ()*ContentCreator {_cae :=ContentStreamOperation {};_cae .Operand ="\u0053";_gd ._af =append (_gd ._af ,&_cae );return _gd ;};

// WrapIfNeeded wraps the entire contents within q ... Q.  If unbalanced, then adds extra Qs at the end.
// Only does if needed. Ensures that when adding new content, one start with all states
// in the default condition.
func (_fc *ContentStreamOperations )WrapIfNeeded ()*ContentStreamOperations {if len (*_fc )==0{return _fc ;};if _fc .isWrapped (){return _fc ;};*_fc =append ([]*ContentStreamOperation {{Operand :"\u0071"}},*_fc ...);_dd :=0;for _ ,_da :=range *_fc {if _da .Operand =="\u0071"{_dd ++;}else if _da .Operand =="\u0051"{_dd --;};};for _dd > 0{*_fc =append (*_fc ,&ContentStreamOperation {Operand :"\u0051"});_dd --;};return _fc ;};

// Add_d adds 'd' operand to the content stream: Set the line dash pattern.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ggf *ContentCreator )Add_d (dashArray []int64 ,dashPhase int64 )*ContentCreator {_dfb :=ContentStreamOperation {};_dfb .Operand ="\u0064";_dfb .Params =[]_bg .PdfObject {};_dfb .Params =append (_dfb .Params ,_bg .MakeArrayFromIntegers64 (dashArray ));_dfb .Params =append (_dfb .Params ,_bg .MakeInteger (dashPhase ));_ggf ._af =append (_ggf ._af ,&_dfb );return _ggf ;};

// NewInlineImageFromImage makes a new content stream inline image object from an image.
func NewInlineImageFromImage (img _db .Image ,encoder _bg .StreamEncoder )(*ContentStreamInlineImage ,error ){if encoder ==nil {encoder =_bg .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_gee :=ContentStreamInlineImage {};if img .ColorComponents ==1{_gee .ColorSpace =_bg .MakeName ("\u0047");}else if img .ColorComponents ==3{_gee .ColorSpace =_bg .MakeName ("\u0052\u0047\u0042");}else if img .ColorComponents ==4{_gee .ColorSpace =_bg .MakeName ("\u0043\u004d\u0059\u004b");}else {_bb .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006db\u0065\u0072\u0020o\u0066\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006dpo\u006e\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",img .ColorComponents );return nil ,_aa .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020c\u006fl\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073");};_gee .BitsPerComponent =_bg .MakeInteger (img .BitsPerComponent );_gee .Width =_bg .MakeInteger (img .Width );_gee .Height =_bg .MakeInteger (img .Height );_fgd ,_deee :=encoder .EncodeBytes (img .Data );if _deee !=nil {return nil ,_deee ;};_gee ._fgeg =_fgd ;_aade :=encoder .GetFilterName ();if _aade !=_bg .StreamEncodingFilterNameRaw {_gee .Filter =_bg .MakeName (_aade );};return &_gee ,nil ;};

// Add_re appends 're' operand to the content stream:
// Append a rectangle to the current path as a complete subpath, with lower left corner (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ffg *ContentCreator )Add_re (x ,y ,width ,height float64 )*ContentCreator {_cef :=ContentStreamOperation {};_cef .Operand ="\u0072\u0065";_cef .Params =_cfde ([]float64 {x ,y ,width ,height });_ffg ._af =append (_ffg ._af ,&_cef );return _ffg ;};

// Add_k appends 'k' operand to the content stream:
// Same as K but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_efdd *ContentCreator )Add_k (c ,m ,y ,k float64 )*ContentCreator {_baf :=ContentStreamOperation {};_baf .Operand ="\u006b";_baf .Params =_cfde ([]float64 {c ,m ,y ,k });_efdd ._af =append (_efdd ._af ,&_baf );return _efdd ;};func _beb (_gga *ContentStreamInlineImage ,_dbbd *_bg .PdfObjectDictionary )(*_bg .FlateEncoder ,error ){_fcfe :=_bg .NewFlateEncoder ();if _gga ._eac !=nil {_fcfe .SetImage (_gga ._eac );};if _dbbd ==nil {_gfcd :=_gga .DecodeParms ;if _gfcd !=nil {_egg ,_aba :=_bg .GetDict (_gfcd );if !_aba {_bb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_gfcd );return nil ,_b .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_dbbd =_egg ;};};if _dbbd ==nil {return _fcfe ,nil ;};_bb .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_dbbd .String ());_befd :=_dbbd .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _befd ==nil {_bb .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0050\u0072\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0066\u0072\u006f\u006d\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073 \u002d\u0020\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020\u0077\u0069t\u0068\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u00281\u0029");}else {_aagf ,_dcd :=_befd .(*_bg .PdfObjectInteger );if !_dcd {_bb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_befd );return nil ,_b .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_fcfe .Predictor =int (*_aagf );};_befd =_dbbd .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _befd !=nil {_eag ,_agaf :=_befd .(*_bg .PdfObjectInteger );if !_agaf {_bb .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_b .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_fcfe .BitsPerComponent =int (*_eag );};if _fcfe .Predictor > 1{_fcfe .Columns =1;_befd =_dbbd .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _befd !=nil {_cefb ,_bbd :=_befd .(*_bg .PdfObjectInteger );if !_bbd {return nil ,_b .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_fcfe .Columns =int (*_cefb );};_fcfe .Colors =1;_efe :=_dbbd .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _efe !=nil {_caef ,_dgc :=_efe .(*_bg .PdfObjectInteger );if !_dgc {return nil ,_b .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_fcfe .Colors =int (*_caef );};};return _fcfe ,nil ;};func _cebd (_gfec *ContentStreamInlineImage ,_gbgg *_bg .PdfObjectDictionary )(*_bg .LZWEncoder ,error ){_bebg :=_bg .NewLZWEncoder ();if _gbgg ==nil {if _gfec .DecodeParms !=nil {_ddg ,_fcg :=_bg .GetDict (_gfec .DecodeParms );if !_fcg {_bb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_gfec .DecodeParms );return nil ,_b .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_gbgg =_ddg ;};};if _gbgg ==nil {return _bebg ,nil ;};_deda :=_gbgg .Get ("E\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");if _deda !=nil {_ffbg ,_ced :=_deda .(*_bg .PdfObjectInteger );if !_ced {_bb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a \u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u006e\u0075\u006d\u0065\u0072i\u0063 \u0028\u0025\u0054\u0029",_deda );return nil ,_b .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");};if *_ffbg !=0&&*_ffbg !=1{return nil ,_b .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075e\u0020\u0028\u006e\u006f\u0074 \u0030\u0020o\u0072\u0020\u0031\u0029");};_bebg .EarlyChange =int (*_ffbg );}else {_bebg .EarlyChange =1;};_deda =_gbgg .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _deda !=nil {_aage ,_bcb :=_deda .(*_bg .PdfObjectInteger );if !_bcb {_bb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_deda );return nil ,_b .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_bebg .Predictor =int (*_aage );};_deda =_gbgg .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");if _deda !=nil {_cea ,_fgb :=_deda .(*_bg .PdfObjectInteger );if !_fgb {_bb .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");return nil ,_b .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_bebg .BitsPerComponent =int (*_cea );};if _bebg .Predictor > 1{_bebg .Columns =1;_deda =_gbgg .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");if _deda !=nil {_ggg ,_dbc :=_deda .(*_bg .PdfObjectInteger );if !_dbc {return nil ,_b .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_bebg .Columns =int (*_ggg );};_bebg .Colors =1;_deda =_gbgg .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _deda !=nil {_dded ,_cda :=_deda .(*_bg .PdfObjectInteger );if !_cda {return nil ,_b .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");};_bebg .Colors =int (*_dded );};};_bb .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_gbgg .String ());return _bebg ,nil ;};func (_bgd *ContentStreamProcessor )handleCommand_g (_dcde *ContentStreamOperation ,_gage *_db .PdfPageResources )error {_ddfg :=_db .NewPdfColorspaceDeviceGray ();if len (_dcde .Params )!=_ddfg .GetNumComponents (){_bb .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020p\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0067");_bb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_dcde .Params ),_ddfg );return _aa .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_cdde ,_eefg :=_ddfg .ColorFromPdfObjects (_dcde .Params );if _eefg !=nil {_bb .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0043o\u006d\u006d\u0061\u006e\u0064\u005f\u0067\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061r\u0061\u006d\u0073\u002e\u0020c\u0073\u003d\u0025\u0054\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_ddfg ,_dcde ,_eefg );return _eefg ;};_bgd ._ddfb .ColorspaceNonStroking =_ddfg ;_bgd ._ddfb .ColorNonStroking =_cdde ;return nil ;};type handlerEntry struct{Condition HandlerConditionEnum ;Operand string ;Handler HandlerFunc ;};

// RotateDeg applies a rotation to the transformation matrix.
func (_eeb *ContentCreator )RotateDeg (angle float64 )*ContentCreator {_gg :=_df .Cos (angle *_df .Pi /180.0);_bgb :=_df .Sin (angle *_df .Pi /180.0);_bbec :=-_df .Sin (angle *_df .Pi /180.0);_eda :=_df .Cos (angle *_df .Pi /180.0);return _eeb .Add_cm (_gg ,_bgb ,_bbec ,_eda ,0,0);};

// Operand returns true if `hce` is equivalent to HandlerConditionEnumOperand.
func (_gda HandlerConditionEnum )Operand ()bool {return _gda ==HandlerConditionEnumOperand };

// Parse parses all commands in content stream, returning a list of operation data.
func (_fbd *ContentStreamParser )Parse ()(*ContentStreamOperations ,error ){_dgg :=ContentStreamOperations {};for {_gfcg :=ContentStreamOperation {};for {_ddad ,_eceg ,_acd :=_fbd .parseObject ();if _acd !=nil {if _acd ==_e .EOF {return &_dgg ,nil ;};return &_dgg ,_acd ;};if _eceg {_gfcg .Operand ,_ =_bg .GetStringVal (_ddad );_dgg =append (_dgg ,&_gfcg );break ;}else {_gfcg .Params =append (_gfcg .Params ,_ddad );};};if _gfcg .Operand =="\u0042\u0049"{_adeg ,_dced :=_fbd .ParseInlineImage ();if _dced !=nil {return &_dgg ,_dced ;};_gfcg .Params =append (_gfcg .Params ,_adeg );};};};

// Add_Ts appends 'Ts' operand to the content stream:
// Set text rise.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_faa *ContentCreator )Add_Ts (rise float64 )*ContentCreator {_efb :=ContentStreamOperation {};_efb .Operand ="\u0054\u0073";_efb .Params =_cfde ([]float64 {rise });_faa ._af =append (_faa ._af ,&_efb );return _faa ;};

// Add_h appends 'h' operand to the content stream:
// Close the current subpath by adding a line between the current position and the starting position.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_dde *ContentCreator )Add_h ()*ContentCreator {_cba :=ContentStreamOperation {};_cba .Operand ="\u0068";_dde ._af =append (_dde ._af ,&_cba );return _dde ;};

// ContentStreamOperations is a slice of ContentStreamOperations.
type ContentStreamOperations []*ContentStreamOperation ;

// Add_l adds 'l' operand to the content stream:
// Append a straight line segment from the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_cgd *ContentCreator )Add_l (x ,y float64 )*ContentCreator {_ag :=ContentStreamOperation {};_ag .Operand ="\u006c";_ag .Params =_cfde ([]float64 {x ,y });_cgd ._af =append (_cgd ._af ,&_ag );return _cgd ;};

// Add_q adds 'q' operand to the content stream: Pushes the current graphics state on the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ce *ContentCreator )Add_q ()*ContentCreator {_fdc :=ContentStreamOperation {};_fdc .Operand ="\u0071";_ce ._af =append (_ce ._af ,&_fdc );return _ce ;};

// Add_s appends 's' operand to the content stream: Close and stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_ddee *ContentCreator )Add_s ()*ContentCreator {_bbef :=ContentStreamOperation {};_bbef .Operand ="\u0073";_ddee ._af =append (_ddee ._af ,&_bbef );return _ddee ;};var (ErrInvalidOperand =_aa .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064"););