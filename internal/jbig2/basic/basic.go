//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _e "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func (_a IntsMap )Get (key uint64 )(int ,bool ){_ef ,_eb :=_a [key ];if !_eb {return 0,false ;};if len (_ef )==0{return 0,false ;};return _ef [0],true ;};type Stack struct{Data []interface{};Aux *Stack ;};func (_efc *IntSlice )Add (v int )error {if _efc ==nil {return _e .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};*_efc =append (*_efc ,v );return nil ;};func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};func (_ed IntsMap )Delete (key uint64 ){delete (_ed ,key )};type IntSlice []int ;func (_fbg *Stack )Push (v interface{}){_fbg .Data =append (_fbg .Data ,v )};func (_fe *NumSlice )AddInt (v int ){*_fe =append (*_fe ,float32 (v ))};type NumSlice []float32 ;func (_ff IntSlice )Size ()int {return len (_ff )};type IntsMap map[uint64 ][]int ;func (_d IntSlice )Get (index int )(int ,error ){if index > len (_d )-1{return 0,_e .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );};return _d [index ],nil ;};func (_dg *NumSlice )Add (v float32 ){*_dg =append (*_dg ,v )};func (_eg NumSlice )GetIntSlice ()[]int {_eaa :=make ([]int ,len (_eg ));for _g ,_agd :=range _eg {_eaa [_g ]=int (_agd );};return _eaa ;};func Abs (v int )int {if v > 0{return v ;};return -v ;};func (_fd *Stack )Len ()int {return len (_fd .Data )};func NewIntSlice (i int )*IntSlice {_ae :=IntSlice (make ([]int ,i ));return &_ae };func (_efcb *Stack )Pop ()(_gg interface{},_dab bool ){_gg ,_dab =_efcb .peek ();if !_dab {return nil ,_dab ;};_efcb .Data =_efcb .Data [:_efcb .top ()];return _gg ,true ;};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;};func (_c IntsMap )Add (key uint64 ,value int ){_c [key ]=append (_c [key ],value )};func (_cg IntsMap )GetSlice (key uint64 )([]int ,bool ){_f ,_bd :=_cg [key ];if !_bd {return nil ,false ;};return _f ,true ;};func (_bf *Stack )peek ()(interface{},bool ){_ba :=_bf .top ();if _ba ==-1{return nil ,false ;};return _bf .Data [_ba ],true ;};func Max (x ,y int )int {if x > y {return x ;};return y ;};func (_ca *Stack )Peek ()(_ee interface{},_fa bool ){return _ca .peek ()};func Min (x ,y int )int {if x < y {return x ;};return y ;};func (_agf *Stack )top ()int {return len (_agf .Data )-1};func NewNumSlice (i int )*NumSlice {_ac :=NumSlice (make ([]float32 ,i ));return &_ac };func (_da NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_da )-1{return 0,_e .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _da [i ],nil ;};func (_ag NumSlice )GetInt (i int )(int ,error ){const _cf ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_ag )-1{return 0,_e .Errorf (_cf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_fb :=_ag [i ];return int (_fb +Sign (_fb )*0.5),nil ;};func (_fc *IntSlice )Copy ()*IntSlice {_ea :=IntSlice (make ([]int ,len (*_fc )));copy (_ea ,*_fc );return &_ea ;};