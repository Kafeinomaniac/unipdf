//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_af "github.com/unidoc/unipdf/v3/internal/bitwise";_c "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_cc "github.com/unidoc/unipdf/v3/internal/jbig2/document";_ca "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_a "image";);func (_bee *Decoder )DecodePageImage (pageNumber int )(_a .Image ,error ){const _ad ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";_g ,_e :=_bee .decodePageImage (pageNumber );if _e !=nil {return nil ,_ca .Wrap (_e ,_ad ,"");};return _g ,nil ;};func (_fe *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _fe .decodePage (pageNumber )};type Decoder struct{_fa _af .StreamReader ;_b *_cc .Document ;_fc int ;_be Parameters ;};func Decode (input []byte ,parameters Parameters ,globals *_cc .Globals )(*Decoder ,error ){_cb :=_af .NewReader (input );_ed ,_ec :=_cc .DecodeDocument (_cb ,globals );if _ec !=nil {return nil ,_ec ;};return &Decoder {_fa :_cb ,_b :_ed ,_be :parameters },nil ;};func (_gb *Decoder )PageNumber ()(int ,error ){const _fb ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _gb ._b ==nil {return 0,_ca .Error (_fb ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");};return int (_gb ._b .NumberOfPages ),nil ;};type Parameters struct{UnpaddedData bool ;Color _c .Color ;};func (_cd *Decoder )DecodeNextPage ()([]byte ,error ){_cd ._fc ++;_fec :=_cd ._fc ;return _cd .decodePage (_fec );};func (_cf *Decoder )decodePage (_ce int )([]byte ,error ){const _ee ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _ce < 0{return nil ,_ca .Errorf (_ee ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_ce );};if _ce > int (_cf ._b .NumberOfPages ){return nil ,_ca .Errorf (_ee ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_ce );};_gf ,_gd :=_cf ._b .GetPage (_ce );if _gd !=nil {return nil ,_ca .Wrap (_gd ,_ee ,"");};_cca ,_gd :=_gf .GetBitmap ();if _gd !=nil {return nil ,_ca .Wrap (_gd ,_ee ,"");};_cca .InverseData ();if !_cf ._be .UnpaddedData {return _cca .Data ,nil ;};return _cca .GetUnpaddedData ();};func (_cda *Decoder )decodePageImage (_aa int )(_a .Image ,error ){const _d ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";if _aa < 0{return nil ,_ca .Errorf (_d ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_aa );};if _aa > int (_cda ._b .NumberOfPages ){return nil ,_ca .Errorf (_d ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_aa );};_fd ,_ceb :=_cda ._b .GetPage (_aa );if _ceb !=nil {return nil ,_ca .Wrap (_ceb ,_d ,"");};_bg ,_ceb :=_fd .GetBitmap ();if _ceb !=nil {return nil ,_ca .Wrap (_ceb ,_d ,"");};return _bg .ToImage (),nil ;};