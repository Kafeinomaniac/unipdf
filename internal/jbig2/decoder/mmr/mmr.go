//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mmr ;import (_e "errors";_a "fmt";_f "github.com/unidoc/unipdf/v3/common";_da "github.com/unidoc/unipdf/v3/internal/bitwise";_b "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_c "io";);const (_gdb mmrCode =iota ;_ba ;_gb ;_ag ;_ce ;_df ;_dfa ;_ffd ;_dd ;_cda ;_ad ;);type Decoder struct{_aab ,_ege int ;_fc *runData ;_ee []*code ;_fd []*code ;_cef []*code ;};func _ff (_bb [3]int )*code {return &code {_aa :_bb [0],_aae :_bb [1],_ef :_bb [2]}};func _ac (_g ,_gd int )int {if _g > _gd {return _gd ;};return _g ;};const (EOF =-3;_eb =-2;EOL =-1;_ae =8;_be =(1<<_ae )-1;_ab =5;_cfb =(1<<_ab )-1;);func (_gde *runData )uncompressGetCodeLittleEndian (_dgg []*code )(*code ,error ){_bge ,_acbc :=_gde .uncompressGetNextCodeLittleEndian ();if _acbc !=nil {_f .Log .Debug ("\u0055n\u0063\u006fm\u0070\u0072\u0065\u0073s\u0047\u0065\u0074N\u0065\u0078\u0074\u0043\u006f\u0064\u0065\u004c\u0069tt\u006c\u0065\u0045n\u0064\u0069a\u006e\u0020\u0066\u0061\u0069\u006ce\u0064\u003a \u0025\u0076",_acbc );return nil ,_acbc ;};_bge &=0xffffff;_agdd :=_bge >>(_cc -_ae );_aebb :=_dgg [_agdd ];if _aebb !=nil &&_aebb ._bf {_agdd =(_bge >>(_cc -_ae -_ab ))&_cfb ;_aebb =_aebb ._aaef [_agdd ];};return _aebb ,nil ;};func (_aeb *Decoder )UncompressMMR ()(_agd *_b .Bitmap ,_fg error ){_agd =_b .New (_aeb ._aab ,_aeb ._ege );_ea :=make ([]int ,_agd .Width +5);_fce :=make ([]int ,_agd .Width +5);_fce [0]=_agd .Width ;_eac :=1;var _bdb int ;for _bef :=0;_bef < _agd .Height ;_bef ++{_bdb ,_fg =_aeb .uncompress2d (_aeb ._fc ,_fce ,_eac ,_ea ,_agd .Width );if _fg !=nil {return nil ,_fg ;};if _bdb ==EOF {break ;};if _bdb > 0{_fg =_aeb .fillBitmap (_agd ,_bef ,_ea ,_bdb );if _fg !=nil {return nil ,_fg ;};};_fce ,_ea =_ea ,_fce ;_eac =_bdb ;};if _fg =_aeb .detectAndSkipEOL ();_fg !=nil {return nil ,_fg ;};_aeb ._fc .align ();return _agd ,nil ;};type code struct{_aa int ;_aae int ;_ef int ;_aaef []*code ;_bf bool ;};func (_bdc *Decoder )uncompress2d (_bdg *runData ,_gcc []int ,_gbg int ,_ggd []int ,_af int )(int ,error ){var (_cg int ;_fgc int ;_fea int ;_eed =true ;_db error ;_cff *code ;);_gcc [_gbg ]=_af ;_gcc [_gbg +1]=_af ;_gcc [_gbg +2]=_af +1;_gcc [_gbg +3]=_af +1;_bdbd :for _fea < _af {_cff ,_db =_bdg .uncompressGetCode (_bdc ._cef );if _db !=nil {return EOL ,nil ;};if _cff ==nil {_bdg ._ccg ++;break _bdbd ;};_bdg ._ccg +=_cff ._aa ;switch mmrCode (_cff ._ef ){case _gb :_fea =_gcc [_cg ];case _ag :_fea =_gcc [_cg ]+1;case _dfa :_fea =_gcc [_cg ]-1;case _ba :_bcg :=1;for _bcg > 0{var _cdc []*code ;if _eed {_cdc =_bdc ._ee ;}else {_cdc =_bdc ._fd ;};_cff ,_db =_bdg .uncompressGetCode (_cdc );if _db !=nil {return 0,_db ;};if _cff ==nil {break _bdbd ;};_bdg ._ccg +=_cff ._aa ;if _cff ._ef < 64{if _cff ._ef < 0{_ggd [_fgc ]=_fea ;_fgc ++;_cff =nil ;break _bdbd ;};_fea +=_cff ._ef ;_ggd [_fgc ]=_fea ;_fgc ++;break ;};_fea +=_cff ._ef ;};_de :=_fea ;_aec :=1;_ca :for _aec > 0{var _aac []*code ;if !_eed {_aac =_bdc ._ee ;}else {_aac =_bdc ._fd ;};_cff ,_db =_bdg .uncompressGetCode (_aac );if _db !=nil {return 0,_db ;};if _cff ==nil {break _bdbd ;};_bdg ._ccg +=_cff ._aa ;if _cff ._ef < 64{if _cff ._ef < 0{_ggd [_fgc ]=_fea ;_fgc ++;break _bdbd ;};_fea +=_cff ._ef ;if _fea < _af ||_fea !=_de {_ggd [_fgc ]=_fea ;_fgc ++;};break _ca ;};_fea +=_cff ._ef ;};for _fea < _af &&_gcc [_cg ]<=_fea {_cg +=2;};continue _bdbd ;case _gdb :_cg ++;_fea =_gcc [_cg ];_cg ++;continue _bdbd ;case _ce :_fea =_gcc [_cg ]+2;case _ffd :_fea =_gcc [_cg ]-2;case _df :_fea =_gcc [_cg ]+3;case _dd :_fea =_gcc [_cg ]-3;default:if _bdg ._ccg ==12&&_cff ._ef ==EOL {_bdg ._ccg =0;if _ ,_db =_bdc .uncompress1d (_bdg ,_gcc ,_af );_db !=nil {return 0,_db ;};_bdg ._ccg ++;if _ ,_db =_bdc .uncompress1d (_bdg ,_ggd ,_af );_db !=nil {return 0,_db ;};_dagf ,_cbb :=_bdc .uncompress1d (_bdg ,_gcc ,_af );if _cbb !=nil {return EOF ,_cbb ;};_bdg ._ccg ++;return _dagf ,nil ;};_fea =_af ;continue _bdbd ;};if _fea <=_af {_eed =!_eed ;_ggd [_fgc ]=_fea ;_fgc ++;if _cg > 0{_cg --;}else {_cg ++;};for _fea < _af &&_gcc [_cg ]<=_fea {_cg +=2;};};};if _ggd [_fgc ]!=_af {_ggd [_fgc ]=_af ;};if _cff ==nil {return EOL ,nil ;};return _fgc ,nil ;};func New (r _da .StreamReader ,width ,height int ,dataOffset ,dataLength int64 )(*Decoder ,error ){_dge :=&Decoder {_aab :width ,_ege :height };_ffc ,_bd :=_da .NewSubstreamReader (r ,uint64 (dataOffset ),uint64 (dataLength ));if _bd !=nil {return nil ,_bd ;};_dfc ,_bd :=_deg (_ffc );if _bd !=nil {return nil ,_bd ;};_dge ._fc =_dfc ;if _ddb :=_dge .initTables ();_ddb !=nil {return nil ,_ddb ;};return _dge ,nil ;};func (_dg *code )String ()string {return _a .Sprintf ("\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_dg ._aa ,_dg ._aae ,_dg ._ef );};const (_efa int =1024<<7;_ffe int =3;_cc uint =24;);type runData struct{_ebbg *_da .SubstreamReader ;_ccg int ;_egeg int ;_agfa int ;_bg []byte ;_acba int ;_eag int ;};func (_ggc *runData )align (){_ggc ._ccg =((_ggc ._ccg +7)>>3)<<3};func (_bae *runData )fillBuffer (_ga int )error {_bae ._acba =_ga ;_ ,_dgc :=_bae ._ebbg .Seek (int64 (_ga ),_c .SeekStart );if _dgc !=nil {if _dgc ==_c .EOF {_f .Log .Debug ("\u0053\u0065\u0061\u006b\u0020\u0045\u004f\u0046");_bae ._eag =-1;}else {return _dgc ;};};if _dgc ==nil {_bae ._eag ,_dgc =_bae ._ebbg .Read (_bae ._bg );if _dgc !=nil {if _dgc ==_c .EOF {_f .Log .Trace ("\u0052\u0065\u0061\u0064\u0020\u0045\u004f\u0046");_bae ._eag =-1;}else {return _dgc ;};};};if _bae ._eag > -1&&_bae ._eag < 3{for _bae ._eag < 3{_bdde ,_gcf :=_bae ._ebbg .ReadByte ();if _gcf !=nil {if _gcf ==_c .EOF {_bae ._bg [_bae ._eag ]=0;}else {return _gcf ;};}else {_bae ._bg [_bae ._eag ]=_bdde &0xFF;};_bae ._eag ++;};};_bae ._eag -=3;if _bae ._eag < 0{_bae ._bg =make ([]byte ,len (_bae ._bg ));_bae ._eag =len (_bae ._bg )-3;};return nil ;};func (_acb *Decoder )uncompress1d (_abf *runData ,_dgf []int ,_agac int )(int ,error ){var (_acd =true ;_fa int ;_adb *code ;_bffc int ;_aba error ;);_gg :for _fa < _agac {_ggf :for {if _acd {_adb ,_aba =_abf .uncompressGetCode (_acb ._ee );if _aba !=nil {return 0,_aba ;};}else {_adb ,_aba =_abf .uncompressGetCode (_acb ._fd );if _aba !=nil {return 0,_aba ;};};_abf ._ccg +=_adb ._aa ;if _adb ._ef < 0{break _gg ;};_fa +=_adb ._ef ;if _adb ._ef < 64{_acd =!_acd ;_dgf [_bffc ]=_fa ;_bffc ++;break _ggf ;};};};if _dgf [_bffc ]!=_agac {_dgf [_bffc ]=_agac ;};_bee :=EOL ;if _adb !=nil &&_adb ._ef !=EOL {_bee =_bffc ;};return _bee ,nil ;};func _cd (_cf ,_fe int )int {if _cf < _fe {return _fe ;};return _cf ;};func _deg (_dc *_da .SubstreamReader )(*runData ,error ){_ddg :=&runData {_ebbg :_dc ,_ccg :0,_egeg :1};_ffef :=_ac (_cd (_ffe ,int (_dc .Length ())),_efa );_ddg ._bg =make ([]byte ,_ffef );if _fae :=_ddg .fillBuffer (0);_fae !=nil {if _fae ==_c .EOF {_ddg ._bg =make ([]byte ,10);_f .Log .Debug ("F\u0069\u006c\u006c\u0042uf\u0066e\u0072\u0020\u0066\u0061\u0069l\u0065\u0064\u003a\u0020\u0025\u0076",_fae );}else {return nil ,_fae ;};};return _ddg ,nil ;};func (_dab *runData )uncompressGetNextCodeLittleEndian ()(int ,error ){_fed :=_dab ._ccg -_dab ._egeg ;if _fed < 0||_fed > 24{_afg :=(_dab ._ccg >>3)-_dab ._acba ;if _afg >=_dab ._eag {_afg +=_dab ._acba ;if _acbg :=_dab .fillBuffer (_afg );_acbg !=nil {return 0,_acbg ;};_afg -=_dab ._acba ;};_fcc :=(uint32 (_dab ._bg [_afg ]&0xFF)<<16)|(uint32 (_dab ._bg [_afg +1]&0xFF)<<8)|(uint32 (_dab ._bg [_afg +2]&0xFF));_bbf :=uint32 (_dab ._ccg &7);_fcc <<=_bbf ;_dab ._agfa =int (_fcc );}else {_eef :=_dab ._egeg &7;_fef :=7-_eef ;if _fed <=_fef {_dab ._agfa <<=uint (_fed );}else {_gcg :=(_dab ._egeg >>3)+3-_dab ._acba ;if _gcg >=_dab ._eag {_gcg +=_dab ._acba ;if _afa :=_dab .fillBuffer (_gcg );_afa !=nil {return 0,_afa ;};_gcg -=_dab ._acba ;};_eef =8-_eef ;for {_dab ._agfa <<=uint (_eef );_dab ._agfa |=int (uint (_dab ._bg [_gcg ])&0xFF);_fed -=_eef ;_gcg ++;_eef =8;if !(_fed >=8){break ;};};_dab ._agfa <<=uint (_fed );};};_dab ._egeg =_dab ._ccg ;return _dab ._agfa ,nil ;};func (_gfc *runData )uncompressGetCode (_aded []*code )(*code ,error ){return _gfc .uncompressGetCodeLittleEndian (_aded );};func (_gef *Decoder )initTables ()(_fcb error ){if _gef ._ee ==nil {_gef ._ee ,_fcb =_gef .createLittleEndianTable (_dfe );if _fcb !=nil {return ;};_gef ._fd ,_fcb =_gef .createLittleEndianTable (_egb );if _fcb !=nil {return ;};_gef ._cef ,_fcb =_gef .createLittleEndianTable (_eg );if _fcb !=nil {return ;};};return nil ;};func (_bff *Decoder )createLittleEndianTable (_eea [][3]int )([]*code ,error ){_dag :=make ([]*code ,_be +1);for _ade :=0;_ade < len (_eea );_ade ++{_aga :=_ff (_eea [_ade ]);if _aga ._aa <=_ae {_agf :=_ae -_aga ._aa ;_gc :=_aga ._aae <<uint (_agf );for _bc :=(1<<uint (_agf ))-1;_bc >=0;_bc --{_eec :=_gc |_bc ;_dag [_eec ]=_aga ;};}else {_cb :=_aga ._aae >>uint (_aga ._aa -_ae );if _dag [_cb ]==nil {var _efg =_ff ([3]int {});_efg ._aaef =make ([]*code ,_cfb +1);_dag [_cb ]=_efg ;};if _aga ._aa <=_ae +_ab {_dfce :=_ae +_ab -_aga ._aa ;_gf :=(_aga ._aae <<uint (_dfce ))&_cfb ;_dag [_cb ]._bf =true ;for _aaee :=(1<<uint (_dfce ))-1;_aaee >=0;_aaee --{_dag [_cb ]._aaef [_gf |_aaee ]=_aga ;};}else {return nil ,_e .New ("\u0043\u006f\u0064\u0065\u0020\u0074a\u0062\u006c\u0065\u0020\u006f\u0076\u0065\u0072\u0066\u006c\u006f\u0077\u0020i\u006e\u0020\u004d\u004d\u0052\u0044\u0065c\u006f\u0064\u0065\u0072");};};};return _dag ,nil ;};func (_bdd *Decoder )detectAndSkipEOL ()error {for {_cfe ,_ebb :=_bdd ._fc .uncompressGetCode (_bdd ._cef );if _ebb !=nil {return _ebb ;};if _cfe !=nil &&_cfe ._ef ==EOL {_bdd ._fc ._ccg +=_cfe ._aa ;}else {return nil ;};};};func (_add *Decoder )fillBitmap (_addb *_b .Bitmap ,_gdbc int ,_gff []int ,_fb int )error {var _cdd byte ;_gdbb :=0;_ge :=_addb .GetByteIndex (_gdbb ,_gdbc );for _abe :=0;_abe < _fb ;_abe ++{_baa :=byte (1);_gba :=_gff [_abe ];if (_abe &1)==0{_baa =0;};for _gdbb < _gba {_cdd =(_cdd <<1)|_baa ;_gdbb ++;if (_gdbb &7)==0{if _cfbf :=_addb .SetByte (_ge ,_cdd );_cfbf !=nil {return _cfbf ;};_ge ++;_cdd =0;};};};if (_gdbb &7)!=0{_cdd <<=uint (8-(_gdbb &7));if _baf :=_addb .SetByte (_ge ,_cdd );_baf !=nil {return _baf ;};};return nil ;};type mmrCode int ;var (_eg =[][3]int {{4,0x1,int (_gdb )},{3,0x1,int (_ba )},{1,0x1,int (_gb )},{3,0x3,int (_ag )},{6,0x3,int (_ce )},{7,0x3,int (_df )},{3,0x2,int (_dfa )},{6,0x2,int (_ffd )},{7,0x2,int (_dd )},{10,0xf,int (_cda )},{12,0xf,int (_ad )},{12,0x1,int (EOL )}};_dfe =[][3]int {{4,0x07,2},{4,0x08,3},{4,0x0B,4},{4,0x0C,5},{4,0x0E,6},{4,0x0F,7},{5,0x12,128},{5,0x13,8},{5,0x14,9},{5,0x1B,64},{5,0x07,10},{5,0x08,11},{6,0x17,192},{6,0x18,1664},{6,0x2A,16},{6,0x2B,17},{6,0x03,13},{6,0x34,14},{6,0x35,15},{6,0x07,1},{6,0x08,12},{7,0x13,26},{7,0x17,21},{7,0x18,28},{7,0x24,27},{7,0x27,18},{7,0x28,24},{7,0x2B,25},{7,0x03,22},{7,0x37,256},{7,0x04,23},{7,0x08,20},{7,0xC,19},{8,0x12,33},{8,0x13,34},{8,0x14,35},{8,0x15,36},{8,0x16,37},{8,0x17,38},{8,0x1A,31},{8,0x1B,32},{8,0x02,29},{8,0x24,53},{8,0x25,54},{8,0x28,39},{8,0x29,40},{8,0x2A,41},{8,0x2B,42},{8,0x2C,43},{8,0x2D,44},{8,0x03,30},{8,0x32,61},{8,0x33,62},{8,0x34,63},{8,0x35,0},{8,0x36,320},{8,0x37,384},{8,0x04,45},{8,0x4A,59},{8,0x4B,60},{8,0x5,46},{8,0x52,49},{8,0x53,50},{8,0x54,51},{8,0x55,52},{8,0x58,55},{8,0x59,56},{8,0x5A,57},{8,0x5B,58},{8,0x64,448},{8,0x65,512},{8,0x67,640},{8,0x68,576},{8,0x0A,47},{8,0x0B,48},{9,0x01,_eb },{9,0x98,1472},{9,0x99,1536},{9,0x9A,1600},{9,0x9B,1728},{9,0xCC,704},{9,0xCD,768},{9,0xD2,832},{9,0xD3,896},{9,0xD4,960},{9,0xD5,1024},{9,0xD6,1088},{9,0xD7,1152},{9,0xD8,1216},{9,0xD9,1280},{9,0xDA,1344},{9,0xDB,1408},{10,0x01,_eb },{11,0x01,_eb },{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560}};_egb =[][3]int {{2,0x02,3},{2,0x03,2},{3,0x02,1},{3,0x03,4},{4,0x02,6},{4,0x03,5},{5,0x03,7},{6,0x04,9},{6,0x05,8},{7,0x04,10},{7,0x05,11},{7,0x07,12},{8,0x04,13},{8,0x07,14},{9,0x01,_eb },{9,0x18,15},{10,0x01,_eb },{10,0x17,16},{10,0x18,17},{10,0x37,0},{10,0x08,18},{10,0x0F,64},{11,0x01,_eb },{11,0x17,24},{11,0x18,25},{11,0x28,23},{11,0x37,22},{11,0x67,19},{11,0x68,20},{11,0x6C,21},{11,0x08,1792},{11,0x0C,1856},{11,0x0D,1920},{12,0x00,EOF },{12,0x01,EOL },{12,0x12,1984},{12,0x13,2048},{12,0x14,2112},{12,0x15,2176},{12,0x16,2240},{12,0x17,2304},{12,0x1C,2368},{12,0x1D,2432},{12,0x1E,2496},{12,0x1F,2560},{12,0x24,52},{12,0x27,55},{12,0x28,56},{12,0x2B,59},{12,0x2C,60},{12,0x33,320},{12,0x34,384},{12,0x35,448},{12,0x37,53},{12,0x38,54},{12,0x52,50},{12,0x53,51},{12,0x54,44},{12,0x55,45},{12,0x56,46},{12,0x57,47},{12,0x58,57},{12,0x59,58},{12,0x5A,61},{12,0x5B,256},{12,0x64,48},{12,0x65,49},{12,0x66,62},{12,0x67,63},{12,0x68,30},{12,0x69,31},{12,0x6A,32},{12,0x6B,33},{12,0x6C,40},{12,0x6D,41},{12,0xC8,128},{12,0xC9,192},{12,0xCA,26},{12,0xCB,27},{12,0xCC,28},{12,0xCD,29},{12,0xD2,34},{12,0xD3,35},{12,0xD4,36},{12,0xD5,37},{12,0xD6,38},{12,0xD7,39},{12,0xDA,42},{12,0xDB,43},{13,0x4A,640},{13,0x4B,704},{13,0x4C,768},{13,0x4D,832},{13,0x52,1280},{13,0x53,1344},{13,0x54,1408},{13,0x55,1472},{13,0x5A,1536},{13,0x5B,1600},{13,0x64,1664},{13,0x65,1728},{13,0x6C,512},{13,0x6D,576},{13,0x72,896},{13,0x73,960},{13,0x74,1024},{13,0x75,1088},{13,0x76,1152},{13,0x77,1216}};);