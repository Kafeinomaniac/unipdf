//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_aa "errors";_d "fmt";_c "github.com/unidoc/unipdf/v3/internal/bitwise";_g "math";_b "strings";);type FixedSizeTable struct{_cb *InternalNode };func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_fgc ){return nil ,_aa .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_fgd :=_fgc [number -1];if _fgd ==nil {var _ada error ;_fgd ,_ada =_eefd (_eeb [number -1]);if _ada !=nil {return nil ,_ada ;};_fgc [number -1]=_fgd ;};return _fgd ,nil ;};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_c .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func (_ge *OutOfBandNode )String ()string {return _d .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_g .MaxInt64 ));};type Tabler interface{Decode (_ceb _c .StreamReader )(int64 ,error );InitTree (_cc []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func _eb (_afb *Code )*OutOfBandNode {return &OutOfBandNode {}};func _geb (_fa int32 )*InternalNode {return &InternalNode {_daca :_fa }};func _fg (_ebb *Code )*ValueNode {return &ValueNode {_ag :_ebb ._cbd ,_gga :_ebb ._afgb ,_cf :_ebb ._aff }};func (_agg *StandardTable )Decode (r _c .StreamReader )(int64 ,error ){return _agg ._fab .Decode (r )};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_cg :=&EncodedTable {_ad :&InternalNode {},BasicTabler :table };if _da :=_cg .parseTable ();_da !=nil {return nil ,_da ;};return _cg ,nil ;};func (_ca *FixedSizeTable )RootNode ()*InternalNode {return _ca ._cb };func _cfg (_eege ,_ggd int32 )int32 {if _eege > _ggd {return _eege ;};return _ggd ;};func (_bg *EncodedTable )InitTree (codeTable []*Code )error {_caa (codeTable );for _ ,_bc :=range codeTable {if _gcf :=_bg ._ad .append (_bc );_gcf !=nil {return _gcf ;};};return nil ;};func (_ec *StandardTable )InitTree (codeTable []*Code )error {_caa (codeTable );for _ ,_abe :=range codeTable {if _ged :=_ec ._fab .append (_abe );_ged !=nil {return _ged ;};};return nil ;};func (_ade *FixedSizeTable )InitTree (codeTable []*Code )error {_caa (codeTable );for _ ,_ee :=range codeTable {_aaa :=_ade ._cb .append (_ee );if _aaa !=nil {return _aaa ;};};return nil ;};func (_cba *StandardTable )RootNode ()*InternalNode {return _cba ._fab };var _ Node =&InternalNode {};func (_db *InternalNode )append (_bgg *Code )(_ebg error ){if _bgg ._gedc ==0{return nil ;};_gaa :=_bgg ._gedc -1-_db ._daca ;if _gaa < 0{return _aa .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");};_ed :=(_bgg ._fge >>uint (_gaa ))&0x1;if _gaa ==0{if _bgg ._cbd ==-1{if _ed ==1{if _db ._ab !=nil {return _d .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_bgg );};_db ._ab =_eb (_bgg );}else {if _db ._bbg !=nil {return _d .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_bgg );};_db ._bbg =_eb (_bgg );};}else {if _ed ==1{if _db ._ab !=nil {return _d .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_bgg );};_db ._ab =_fg (_bgg );}else {if _db ._bbg !=nil {return _d .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_bgg );};_db ._bbg =_fg (_bgg );};};}else {if _ed ==1{if _db ._ab ==nil {_db ._ab =_geb (_db ._daca +1);};if _ebg =_db ._ab .(*InternalNode ).append (_bgg );_ebg !=nil {return _ebg ;};}else {if _db ._bbg ==nil {_db ._bbg =_geb (_db ._daca +1);};if _ebg =_db ._bbg .(*InternalNode ).append (_bgg );_ebg !=nil {return _ebg ;};};};return nil ;};type Node interface{Decode (_ga _c .StreamReader )(int64 ,error );String ()string ;};func (_eee *ValueNode )String ()string {return _d .Sprintf ("\u0025\u0064\u002f%\u0064",_eee ._ag ,_eee ._gga );};var _fgc =make ([]Tabler ,len (_eeb ));func (_fd *InternalNode )String ()string {_ba :=&_b .Builder {};_ba .WriteString ("\u000a");_fd .pad (_ba );_ba .WriteString ("\u0030\u003a\u0020");_ba .WriteString (_fd ._bbg .String ()+"\u000a");_fd .pad (_ba );_ba .WriteString ("\u0031\u003a\u0020");_ba .WriteString (_fd ._ab .String ()+"\u000a");return _ba .String ();};var _eeb =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};func (_fb *Code )String ()string {var _cfc string ;if _fb ._fge !=-1{_cfc =_bd (_fb ._fge ,_fb ._gedc );}else {_cfc ="\u003f";};return _d .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_cfc ,_fb ._gedc ,_fb ._cbd ,_fb ._afgb );};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_gedc :prefixLength ,_cbd :rangeLength ,_afgb :rangeLow ,_aff :isLowerRange ,_fge :-1};};func (_dfb *FixedSizeTable )Decode (r _c .StreamReader )(int64 ,error ){return _dfb ._cb .Decode (r )};func (_bf *OutOfBandNode )Decode (r _c .StreamReader )(int64 ,error ){return int64 (_g .MaxInt64 ),nil };func (_caf *ValueNode )Decode (r _c .StreamReader )(int64 ,error ){_ac ,_dde :=r .ReadBits (byte (_caf ._ag ));if _dde !=nil {return 0,_dde ;};if _caf ._cf {_ac =-_ac ;};return int64 (_caf ._gga )+int64 (_ac ),nil ;};var _ Tabler =&EncodedTable {};type StandardTable struct{_fab *InternalNode };type ValueNode struct{_ag int32 ;_gga int32 ;_cf bool ;};func (_gbd *InternalNode )Decode (r _c .StreamReader )(int64 ,error ){_gag ,_afg :=r .ReadBit ();if _afg !=nil {return 0,_afg ;};if _gag ==0{return _gbd ._bbg .Decode (r );};return _gbd ._ab .Decode (r );};func (_gcc *StandardTable )String ()string {return _gcc ._fab .String ()+"\u000a"};type OutOfBandNode struct{};func (_bce *EncodedTable )parseTable ()error {var (_aad []*Code ;_adg ,_dac ,_cd int32 ;_de uint64 ;_gg error ;);_af :=_bce .StreamReader ();_dd :=_bce .HtLow ();for _dd < _bce .HtHigh (){_de ,_gg =_af .ReadBits (byte (_bce .HtPS ()));if _gg !=nil {return _gg ;};_adg =int32 (_de );_de ,_gg =_af .ReadBits (byte (_bce .HtRS ()));if _gg !=nil {return _gg ;};_dac =int32 (_de );_aad =append (_aad ,NewCode (_adg ,_dac ,_cd ,false ));_dd +=1<<uint (_dac );};_de ,_gg =_af .ReadBits (byte (_bce .HtPS ()));if _gg !=nil {return _gg ;};_adg =int32 (_de );_dac =32;_cd =_bce .HtLow ()-1;_aad =append (_aad ,NewCode (_adg ,_dac ,_cd ,true ));_de ,_gg =_af .ReadBits (byte (_bce .HtPS ()));if _gg !=nil {return _gg ;};_adg =int32 (_de );_dac =32;_cd =_bce .HtHigh ();_aad =append (_aad ,NewCode (_adg ,_dac ,_cd ,false ));if _bce .HtOOB ()==1{_de ,_gg =_af .ReadBits (byte (_bce .HtPS ()));if _gg !=nil {return _gg ;};_adg =int32 (_de );_aad =append (_aad ,NewCode (_adg ,-1,-1,false ));};if _gg =_bce .InitTree (_aad );_gg !=nil {return _gg ;};return nil ;};type EncodedTable struct{BasicTabler ;_ad *InternalNode ;};var _ Node =&OutOfBandNode {};func _bd (_gcd ,_fc int32 )string {var _cdeb int32 ;_gd :=make ([]rune ,_fc );for _eeg :=int32 (1);_eeg <=_fc ;_eeg ++{_cdeb =_gcd >>uint (_fc -_eeg )&1;if _cdeb !=0{_gd [_eeg -1]='1';}else {_gd [_eeg -1]='0';};};return string (_gd );};func (_bb *EncodedTable )String ()string {return _bb ._ad .String ()+"\u000a"};func _eefd (_cbaf [][]int32 )(*StandardTable ,error ){var _fag []*Code ;for _aea :=0;_aea < len (_cbaf );_aea ++{_dfc :=_cbaf [_aea ][0];_fde :=_cbaf [_aea ][1];_ce :=_cbaf [_aea ][2];var _adgc bool ;if len (_cbaf [_aea ])> 3{_adgc =true ;};_fag =append (_fag ,NewCode (_dfc ,_fde ,_ce ,_adgc ));};_adc :=&StandardTable {_fab :_geb (0)};if _dab :=_adc .InitTree (_fag );_dab !=nil {return nil ,_dab ;};return _adc ,nil ;};func (_gbc *InternalNode )pad (_bgc *_b .Builder ){for _aaad :=int32 (0);_aaad < _gbc ._daca ;_aaad ++{_bgc .WriteString ("\u0020\u0020\u0020");};};func (_ae *FixedSizeTable )String ()string {return _ae ._cb .String ()+"\u000a"};type Code struct{_gedc int32 ;_cbd int32 ;_afgb int32 ;_aff bool ;_fge int32 ;};var _ Node =&ValueNode {};func (_f *EncodedTable )RootNode ()*InternalNode {return _f ._ad };func (_gc *EncodedTable )Decode (r _c .StreamReader )(int64 ,error ){return _gc ._ad .Decode (r )};func _caa (_adf []*Code ){var _gae int32 ;for _ ,_eea :=range _adf {_gae =_cfg (_gae ,_eea ._gedc );};_cbg :=make ([]int32 ,_gae +1);for _ ,_baf :=range _adf {_cbg [_baf ._gedc ]++;};var _ace int32 ;_fe :=make ([]int32 ,len (_cbg )+1);_cbg [0]=0;for _dfcb :=int32 (1);_dfcb <=int32 (len (_cbg ));_dfcb ++{_fe [_dfcb ]=(_fe [_dfcb -1]+(_cbg [_dfcb -1]))<<1;_ace =_fe [_dfcb ];for _ ,_dea :=range _adf {if _dea ._gedc ==_dfcb {_dea ._fge =_ace ;_ace ++;};};};};type InternalNode struct{_daca int32 ;_bbg Node ;_ab Node ;};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_aadg :=&FixedSizeTable {_cb :&InternalNode {}};if _gb :=_aadg .InitTree (codeTable );_gb !=nil {return nil ,_gb ;};return _aadg ,nil ;};