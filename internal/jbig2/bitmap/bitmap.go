//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_ff "encoding/binary";_c "github.com/stretchr/testify/require";_fg "github.com/unidoc/unipdf/v3/common";_db "github.com/unidoc/unipdf/v3/internal/bitwise";_f "github.com/unidoc/unipdf/v3/internal/imageutil";_cc "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_d "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_ge "image";_b "math";_g "sort";_e "strings";_dc "testing";);func _fgdg (_eaff uint ,_fcgbd byte )byte {return _fcgbd >>_eaff <<_eaff };type byHeight Bitmaps ;func (_dbc *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _dbc .Copy (),nil ;};_gaf ,_caec :=_dbc .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _caec !=nil {return nil ,_d .Wrap (_caec ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _gaf ,nil ;};func _cdaf (_ebe ,_bbgf *Bitmap ,_ecbb ,_adgg ,_egbbe ,_fffd ,_badab ,_dafd ,_cab ,_abae int ,_eag CombinationOperator ,_gbeb int )error {var _gebf int ;_fbe :=func (){_gebf ++;_egbbe +=_bbgf .RowStride ;_fffd +=_ebe .RowStride ;_badab +=_ebe .RowStride };for _gebf =_ecbb ;_gebf < _adgg ;_fbe (){var _baec uint16 ;_edcb :=_egbbe ;for _bfa :=_fffd ;_bfa <=_badab ;_bfa ++{_agdg ,_ccgg :=_bbgf .GetByte (_edcb );if _ccgg !=nil {return _ccgg ;};_cacb ,_ccgg :=_ebe .GetByte (_bfa );if _ccgg !=nil {return _ccgg ;};_baec =(_baec |(uint16 (_cacb )&0xff))<<uint (_abae );_cacb =byte (_baec >>8);if _ccgg =_bbgf .SetByte (_edcb ,_gafc (_agdg ,_cacb ,_eag ));_ccgg !=nil {return _ccgg ;};_edcb ++;_baec <<=uint (_cab );if _bfa ==_badab {_cacb =byte (_baec >>(8-uint8 (_abae )));if _gbeb !=0{_cacb =_fgdg (uint (8+_dafd ),_cacb );};_agdg ,_ccgg =_bbgf .GetByte (_edcb );if _ccgg !=nil {return _ccgg ;};if _ccgg =_bbgf .SetByte (_edcb ,_gafc (_agdg ,_cacb ,_eag ));_ccgg !=nil {return _ccgg ;};};};};return nil ;};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_gaab float64 ,_afgaa error ){const _cecc ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";if bm1 ==nil ||bm2 ==nil {return 0,_d .Error (_cecc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_d .Error (_cecc ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if area1 <=0||area2 <=0{return 0,_d .Error (_cecc ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_egbc ,_bbed :=bm1 .Width ,bm1 .Height ;_bacec ,_cdcc :=bm2 .Width ,bm2 .Height ;_ggba :=_ecbg (_egbc -_bacec );if _ggba > maxDiffW {return 0,nil ;};_bfbc :=_ecbg (_bbed -_cdcc );if _bfbc > maxDiffH {return 0,nil ;};var _ecab ,_fbba int ;if delX >=0{_ecab =int (delX +0.5);}else {_ecab =int (delX -0.5);};if delY >=0{_fbba =int (delY +0.5);}else {_fbba =int (delY -0.5);};_ccge :=_gfge (_fbba ,0);_fegg :=_bcde (_cdcc +_fbba ,_bbed );_affe :=bm1 .RowStride *_ccge ;_bcad :=bm2 .RowStride *(_ccge -_fbba );_fedca :=_gfge (_ecab ,0);_bceg :=_bcde (_bacec +_ecab ,_egbc );_eage :=bm2 .RowStride ;var _gddc ,_dgcd int ;if _ecab >=8{_gddc =_ecab >>3;_affe +=_gddc ;_fedca -=_gddc <<3;_bceg -=_gddc <<3;_ecab &=7;}else if _ecab <=-8{_dgcd =-((_ecab +7)>>3);_bcad +=_dgcd ;_eage -=_dgcd ;_ecab +=_dgcd <<3;};if _fedca >=_bceg ||_ccge >=_fegg {return 0,nil ;};_dccg :=(_bceg +7)>>3;var (_fgff ,_fgfe ,_fbbd byte ;_gfac ,_deeee ,_fefca int ;);switch {case _ecab ==0:for _fefca =_ccge ;_fefca < _fegg ;_fefca ,_affe ,_bcad =_fefca +1,_affe +bm1 .RowStride ,_bcad +bm2 .RowStride {for _deeee =0;_deeee < _dccg ;_deeee ++{_fbbd =bm1 .Data [_affe +_deeee ]&bm2 .Data [_bcad +_deeee ];_gfac +=tab [_fbbd ];};};case _ecab > 0:if _eage < _dccg {for _fefca =_ccge ;_fefca < _fegg ;_fefca ,_affe ,_bcad =_fefca +1,_affe +bm1 .RowStride ,_bcad +bm2 .RowStride {_fgff ,_fgfe =bm1 .Data [_affe ],bm2 .Data [_bcad ]>>uint (_ecab );_fbbd =_fgff &_fgfe ;_gfac +=tab [_fbbd ];for _deeee =1;_deeee < _eage ;_deeee ++{_fgff ,_fgfe =bm1 .Data [_affe +_deeee ],(bm2 .Data [_bcad +_deeee ]>>uint (_ecab ))|(bm2 .Data [_bcad +_deeee -1]<<uint (8-_ecab ));_fbbd =_fgff &_fgfe ;_gfac +=tab [_fbbd ];};_fgff =bm1 .Data [_affe +_deeee ];_fgfe =bm2 .Data [_bcad +_deeee -1]<<uint (8-_ecab );_fbbd =_fgff &_fgfe ;_gfac +=tab [_fbbd ];};}else {for _fefca =_ccge ;_fefca < _fegg ;_fefca ,_affe ,_bcad =_fefca +1,_affe +bm1 .RowStride ,_bcad +bm2 .RowStride {_fgff ,_fgfe =bm1 .Data [_affe ],bm2 .Data [_bcad ]>>uint (_ecab );_fbbd =_fgff &_fgfe ;_gfac +=tab [_fbbd ];for _deeee =1;_deeee < _dccg ;_deeee ++{_fgff =bm1 .Data [_affe +_deeee ];_fgfe =(bm2 .Data [_bcad +_deeee ]>>uint (_ecab ))|(bm2 .Data [_bcad +_deeee -1]<<uint (8-_ecab ));_fbbd =_fgff &_fgfe ;_gfac +=tab [_fbbd ];};};};default:if _dccg < _eage {for _fefca =_ccge ;_fefca < _fegg ;_fefca ,_affe ,_bcad =_fefca +1,_affe +bm1 .RowStride ,_bcad +bm2 .RowStride {for _deeee =0;_deeee < _dccg ;_deeee ++{_fgff =bm1 .Data [_affe +_deeee ];_fgfe =bm2 .Data [_bcad +_deeee ]<<uint (-_ecab );_fgfe |=bm2 .Data [_bcad +_deeee +1]>>uint (8+_ecab );_fbbd =_fgff &_fgfe ;_gfac +=tab [_fbbd ];};};}else {for _fefca =_ccge ;_fefca < _fegg ;_fefca ,_affe ,_bcad =_fefca +1,_affe +bm1 .RowStride ,_bcad +bm2 .RowStride {for _deeee =0;_deeee < _dccg -1;_deeee ++{_fgff =bm1 .Data [_affe +_deeee ];_fgfe =bm2 .Data [_bcad +_deeee ]<<uint (-_ecab );_fgfe |=bm2 .Data [_bcad +_deeee +1]>>uint (8+_ecab );_fbbd =_fgff &_fgfe ;_gfac +=tab [_fbbd ];};_fgff =bm1 .Data [_affe +_deeee ];_fgfe =bm2 .Data [_bcad +_deeee ]<<uint (-_ecab );_fbbd =_fgff &_fgfe ;_gfac +=tab [_fbbd ];};};};_gaab =float64 (_gfac )*float64 (_gfac )/(float64 (area1 )*float64 (area2 ));return _gaab ,nil ;};func (_efaf *Boxes )makeSizeIndicator (_feca ,_ddce int ,_dcfb LocationFilter ,_cgeb SizeComparison )*_cc .NumSlice {_eddb :=&_cc .NumSlice {};var _aegc ,_feecf ,_ccec int ;for _ ,_bdd :=range *_efaf {_aegc =0;_feecf ,_ccec =_bdd .Dx (),_bdd .Dy ();switch _dcfb {case LocSelectWidth :if (_cgeb ==SizeSelectIfLT &&_feecf < _feca )||(_cgeb ==SizeSelectIfGT &&_feecf > _feca )||(_cgeb ==SizeSelectIfLTE &&_feecf <=_feca )||(_cgeb ==SizeSelectIfGTE &&_feecf >=_feca ){_aegc =1;};case LocSelectHeight :if (_cgeb ==SizeSelectIfLT &&_ccec < _ddce )||(_cgeb ==SizeSelectIfGT &&_ccec > _ddce )||(_cgeb ==SizeSelectIfLTE &&_ccec <=_ddce )||(_cgeb ==SizeSelectIfGTE &&_ccec >=_ddce ){_aegc =1;};case LocSelectIfEither :if (_cgeb ==SizeSelectIfLT &&(_ccec < _ddce ||_feecf < _feca ))||(_cgeb ==SizeSelectIfGT &&(_ccec > _ddce ||_feecf > _feca ))||(_cgeb ==SizeSelectIfLTE &&(_ccec <=_ddce ||_feecf <=_feca ))||(_cgeb ==SizeSelectIfGTE &&(_ccec >=_ddce ||_feecf >=_feca )){_aegc =1;};case LocSelectIfBoth :if (_cgeb ==SizeSelectIfLT &&(_ccec < _ddce &&_feecf < _feca ))||(_cgeb ==SizeSelectIfGT &&(_ccec > _ddce &&_feecf > _feca ))||(_cgeb ==SizeSelectIfLTE &&(_ccec <=_ddce &&_feecf <=_feca ))||(_cgeb ==SizeSelectIfGTE &&(_ccec >=_ddce &&_feecf >=_feca )){_aegc =1;};};_eddb .AddInt (_aegc );};return _eddb ;};func (_afdf *Bitmap )addPadBits ()(_bbbf error ){const _cgcb ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";_eddf :=_afdf .Width %8;if _eddf ==0{return nil ;};_ecae :=_afdf .Width /8;_cfdd :=_db .NewReader (_afdf .Data );_fbf :=make ([]byte ,_afdf .Height *_afdf .RowStride );_gef :=_db .NewWriterMSB (_fbf );_aagb :=make ([]byte ,_ecae );var (_aca int ;_geb uint64 ;);for _aca =0;_aca < _afdf .Height ;_aca ++{if _ ,_bbbf =_cfdd .Read (_aagb );_bbbf !=nil {return _d .Wrap (_bbbf ,_cgcb ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_bbbf =_gef .Write (_aagb );_bbbf !=nil {return _d .Wrap (_bbbf ,_cgcb ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");};if _geb ,_bbbf =_cfdd .ReadBits (byte (_eddf ));_bbbf !=nil {return _d .Wrap (_bbbf ,_cgcb ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _bbbf =_gef .WriteByte (byte (_geb )<<uint (8-_eddf ));_bbbf !=nil {return _d .Wrap (_bbbf ,_cgcb ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");};};_afdf .Data =_gef .Data ();return nil ;};func _faf ()(_dagf []byte ){_dagf =make ([]byte ,256);for _fdaf :=0;_fdaf < 256;_fdaf ++{_caee :=byte (_fdaf );_dagf [_caee ]=(_caee &0x01)|((_caee &0x04)>>1)|((_caee &0x10)>>2)|((_caee &0x40)>>3)|((_caee &0x02)<<3)|((_caee &0x08)<<2)|((_caee &0x20)<<1)|(_caee &0x80);};return _dagf ;};func (_bdf *ClassedPoints )Swap (i ,j int ){_bdf .IntSlice [i ],_bdf .IntSlice [j ]=_bdf .IntSlice [j ],_bdf .IntSlice [i ];};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _cbbd (d ,s ,sel )};func (_fedc *Bitmap )setTwoBytes (_ecdc int ,_afb uint16 )error {if _ecdc +1> len (_fedc .Data )-1{return _d .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_ecdc );};_fedc .Data [_ecdc ]=byte ((_afb &0xff00)>>8);_fedc .Data [_ecdc +1]=byte (_afb &0xff);return nil ;};func Rect (x ,y ,w ,h int )(*_ge .Rectangle ,error ){const _eba ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";if x < 0{w +=x ;x =0;if w <=0{return nil ,_d .Errorf (_eba ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_d .Error (_eba ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");};};_dfced :=_ge .Rect (x ,y ,x +w ,y +h );return &_dfced ,nil ;};func (_abf *Bitmap )addBorderGeneral (_eacb ,_aeg ,_aced ,_dccb int ,_bcb int )(*Bitmap ,error ){const _efdb ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _eacb < 0||_aeg < 0||_aced < 0||_dccb < 0{return nil ,_d .Error (_efdb ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");};_fce ,_aac :=_abf .Width ,_abf .Height ;_egfb :=_fce +_eacb +_aeg ;_gdgd :=_aac +_aced +_dccb ;_fcc :=New (_egfb ,_gdgd );_fcc .Color =_abf .Color ;_gecd :=PixClr ;if _bcb > 0{_gecd =PixSet ;};_edgc :=_fcc .RasterOperation (0,0,_eacb ,_gdgd ,_gecd ,nil ,0,0);if _edgc !=nil {return nil ,_d .Wrap (_edgc ,_efdb ,"\u006c\u0065\u0066\u0074");};_edgc =_fcc .RasterOperation (_egfb -_aeg ,0,_aeg ,_gdgd ,_gecd ,nil ,0,0);if _edgc !=nil {return nil ,_d .Wrap (_edgc ,_efdb ,"\u0072\u0069\u0067h\u0074");};_edgc =_fcc .RasterOperation (0,0,_egfb ,_aced ,_gecd ,nil ,0,0);if _edgc !=nil {return nil ,_d .Wrap (_edgc ,_efdb ,"\u0074\u006f\u0070");};_edgc =_fcc .RasterOperation (0,_gdgd -_dccb ,_egfb ,_dccb ,_gecd ,nil ,0,0);if _edgc !=nil {return nil ,_d .Wrap (_edgc ,_efdb ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_edgc =_fcc .RasterOperation (_eacb ,_aced ,_fce ,_aac ,PixSrc ,_abf ,0,0);if _edgc !=nil {return nil ,_d .Wrap (_edgc ,_efdb ,"\u0063\u006f\u0070\u0079");};return _fcc ,nil ;};func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _gafc (oldByte ,newByte ,op );};func (_dfd *Boxes )Add (box *_ge .Rectangle )error {if _dfd ==nil {return _d .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};*_dfd =append (*_dfd ,box );return nil ;};func _agdb (_fcfe ,_bbag *Bitmap ,_ebae *Selection )(*Bitmap ,error ){const _ccggb ="\u0065\u0072\u006fd\u0065";var (_ddcg error ;_eacd *Bitmap ;);_fcfe ,_ddcg =_eegf (_fcfe ,_bbag ,_ebae ,&_eacd );if _ddcg !=nil {return nil ,_d .Wrap (_ddcg ,_ccggb ,"");};if _ddcg =_fcfe .setAll ();_ddcg !=nil {return nil ,_d .Wrap (_ddcg ,_ccggb ,"");};var _ggfa SelectionValue ;for _cfdg :=0;_cfdg < _ebae .Height ;_cfdg ++{for _dbbab :=0;_dbbab < _ebae .Width ;_dbbab ++{_ggfa =_ebae .Data [_cfdg ][_dbbab ];if _ggfa ==SelHit {_ddcg =_bfaga (_fcfe ,_ebae .Cx -_dbbab ,_ebae .Cy -_cfdg ,_bbag .Width ,_bbag .Height ,PixSrcAndDst ,_eacd ,0,0);if _ddcg !=nil {return nil ,_d .Wrap (_ddcg ,_ccggb ,"");};};};};if MorphBC ==SymmetricMorphBC {return _fcfe ,nil ;};_dcec ,_abcf ,_cecg ,_eeed :=_ebae .findMaxTranslations ();if _dcec > 0{if _ddcg =_fcfe .RasterOperation (0,0,_dcec ,_bbag .Height ,PixClr ,nil ,0,0);_ddcg !=nil {return nil ,_d .Wrap (_ddcg ,_ccggb ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _cecg > 0{if _ddcg =_fcfe .RasterOperation (_bbag .Width -_cecg ,0,_cecg ,_bbag .Height ,PixClr ,nil ,0,0);_ddcg !=nil {return nil ,_d .Wrap (_ddcg ,_ccggb ,"\u0078\u006e\u0020\u003e\u0020\u0030");};};if _abcf > 0{if _ddcg =_fcfe .RasterOperation (0,0,_bbag .Width ,_abcf ,PixClr ,nil ,0,0);_ddcg !=nil {return nil ,_d .Wrap (_ddcg ,_ccggb ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _eeed > 0{if _ddcg =_fcfe .RasterOperation (0,_bbag .Height -_eeed ,_bbag .Width ,_eeed ,PixClr ,nil ,0,0);_ddcg !=nil {return nil ,_d .Wrap (_ddcg ,_ccggb ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _fcfe ,nil ;};func (_cebd *Bitmap )SetPadBits (value int ){_cebd .setPadBits (value )};func init (){for _gag :=0;_gag < 256;_gag ++{_dcba [_gag ]=uint8 (_gag &0x1)+(uint8 (_gag >>1)&0x1)+(uint8 (_gag >>2)&0x1)+(uint8 (_gag >>3)&0x1)+(uint8 (_gag >>4)&0x1)+(uint8 (_gag >>5)&0x1)+(uint8 (_gag >>6)&0x1)+(uint8 (_gag >>7)&0x1);};};func _dbbeg (_bfgg ,_bbeg *Bitmap ,_cdefb ,_adcde int )(_abgf error ){const _egbcg ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_bbdb ,_bade ,_dagg ,_aedb int ;_ccda ,_cgab ,_cbda ,_cabce ,_gcbd ,_fbbff ,_baea byte ;);for _bbdb =0;_bbdb < _cdefb ;_bbdb ++{_dagg =_bbdb *_bfgg .RowStride ;_aedb =_bbdb *_bbeg .RowStride ;for _bade =0;_bade < _adcde ;_bade ++{_ccda ,_abgf =_bfgg .GetByte (_dagg +_bade );if _abgf !=nil {return _d .Wrap (_abgf ,_egbcg ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");};_cgab ,_abgf =_bbeg .GetByte (_aedb +_bade );if _abgf !=nil {return _d .Wrap (_abgf ,_egbcg ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _bbdb > 0{_cbda ,_abgf =_bfgg .GetByte (_dagg -_bfgg .RowStride +_bade );if _abgf !=nil {return _d .Wrap (_abgf ,_egbcg ,"\u0069\u0020\u003e \u0030");};_ccda |=_cbda ;};if _bade > 0{_cabce ,_abgf =_bfgg .GetByte (_dagg +_bade -1);if _abgf !=nil {return _d .Wrap (_abgf ,_egbcg ,"\u006a\u0020\u003e \u0030");};_ccda |=_cabce <<7;};_ccda &=_cgab ;if _ccda ==0||(^_ccda )==0{if _abgf =_bfgg .SetByte (_dagg +_bade ,_ccda );_abgf !=nil {return _d .Wrap (_abgf ,_egbcg ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_baea =_ccda ;_ccda =(_ccda |(_ccda >>1)|(_ccda <<1))&_cgab ;if (_ccda ^_baea )==0{if _abgf =_bfgg .SetByte (_dagg +_bade ,_ccda );_abgf !=nil {return _d .Wrap (_abgf ,_egbcg ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _bbdb =_cdefb -1;_bbdb >=0;_bbdb --{_dagg =_bbdb *_bfgg .RowStride ;_aedb =_bbdb *_bbeg .RowStride ;for _bade =_adcde -1;_bade >=0;_bade --{if _ccda ,_abgf =_bfgg .GetByte (_dagg +_bade );_abgf !=nil {return _d .Wrap (_abgf ,_egbcg ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _cgab ,_abgf =_bbeg .GetByte (_aedb +_bade );_abgf !=nil {return _d .Wrap (_abgf ,_egbcg ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _bbdb < _cdefb -1{if _gcbd ,_abgf =_bfgg .GetByte (_dagg +_bfgg .RowStride +_bade );_abgf !=nil {return _d .Wrap (_abgf ,_egbcg ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");};_ccda |=_gcbd ;};if _bade < _adcde -1{if _fbbff ,_abgf =_bfgg .GetByte (_dagg +_bade +1);_abgf !=nil {return _d .Wrap (_abgf ,_egbcg ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_ccda |=_fbbff >>7;};_ccda &=_cgab ;if _ccda ==0||(^_ccda )==0{if _abgf =_bfgg .SetByte (_dagg +_bade ,_ccda );_abgf !=nil {return _d .Wrap (_abgf ,_egbcg ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");};continue ;};for {_baea =_ccda ;_ccda =(_ccda |(_ccda >>1)|(_ccda <<1))&_cgab ;if (_ccda ^_baea )==0{if _abgf =_bfgg .SetByte (_dagg +_bade ,_ccda );_abgf !=nil {return _d .Wrap (_abgf ,_egbcg ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");};break ;};};};};return nil ;};func (_dfce *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_eca bool ,_caga error ){const _bad ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";if tab8 ==nil {tab8 =_adff ();};_fgag :=_dfce .Width >>3;_cddg :=_dfce .Width &7;_ffba :=byte (0xff<<uint (8-_cddg ));var (_abcc ,_deee ,_ega ,_fafd int ;_fec byte ;);for _abcc =0;_abcc < _dfce .Height ;_abcc ++{_ega =_dfce .RowStride *_abcc ;for _deee =0;_deee < _fgag ;_deee ++{_fec ,_caga =_dfce .GetByte (_ega +_deee );if _caga !=nil {return false ,_d .Wrap (_caga ,_bad ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_fafd +=tab8 [_fec ];};if _cddg !=0{_fec ,_caga =_dfce .GetByte (_ega +_deee );if _caga !=nil {return false ,_d .Wrap (_caga ,_bad ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");};_fec &=_ffba ;_fafd +=tab8 [_fec ];};if _fafd > thresh {return true ,nil ;};};return _eca ,nil ;};func (_cede *byHeight )Less (i ,j int )bool {return _cede .Values [i ].Height < _cede .Values [j ].Height };func _bbae (_gdged ,_eeaa *Bitmap ,_aaegc ,_bdb int )(*Bitmap ,error ){const _cbdb ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _eeaa ==nil {return nil ,_d .Error (_cbdb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _aaegc < 1||_bdb < 1{return nil ,_d .Error (_cbdb ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");};if _aaegc ==1&&_bdb ==1{_eebge ,_babe :=_bda (_gdged ,_eeaa );if _babe !=nil {return nil ,_d .Wrap (_babe ,_cbdb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _eebge ,nil ;};if _aaegc ==1||_bdb ==1{_ddee :=SelCreateBrick (_bdb ,_aaegc ,_bdb /2,_aaegc /2,SelHit );_becd ,_cgaa :=_agdb (_gdged ,_eeaa ,_ddee );if _cgaa !=nil {return nil ,_d .Wrap (_cgaa ,_cbdb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _becd ,nil ;};_dadf :=SelCreateBrick (1,_aaegc ,0,_aaegc /2,SelHit );_daff :=SelCreateBrick (_bdb ,1,_bdb /2,0,SelHit );_gdfda ,_ffag :=_agdb (nil ,_eeaa ,_dadf );if _ffag !=nil {return nil ,_d .Wrap (_ffag ,_cbdb ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};_gdged ,_ffag =_agdb (_gdged ,_gdfda ,_daff );if _ffag !=nil {return nil ,_d .Wrap (_ffag ,_cbdb ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _gdged ,nil ;};func (_gfaea *ClassedPoints )YAtIndex (i int )float32 {return (*_gfaea .Points )[_gfaea .IntSlice [i ]].Y };func (_dfbd *byHeight )Swap (i ,j int ){_dfbd .Values [i ],_dfbd .Values [j ]=_dfbd .Values [j ],_dfbd .Values [i ];if _dfbd .Boxes !=nil {_dfbd .Boxes [i ],_dfbd .Boxes [j ]=_dfbd .Boxes [j ],_dfbd .Boxes [i ];};};func (_dcgee *ClassedPoints )Less (i ,j int )bool {return _dcgee ._decb (i ,j )};var (_efafg *Bitmap ;_fcdb *Bitmap ;);func _daf (_gaeg *Bitmap ,_bg int ,_ecb []byte )(_cdf *Bitmap ,_dcc error ){const _bgd ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";if _gaeg ==nil {return nil ,_d .Error (_bgd ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _bg < 1||_bg > 4{return nil ,_d .Error (_bgd ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");};if _gaeg .Height <=1{return nil ,_d .Errorf (_bgd ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_gaeg .Height );};_cdf =New (_gaeg .Width /2,_gaeg .Height /2);if _ecb ==nil {_ecb =_faf ();};_cbb :=_bcde (_gaeg .RowStride ,2*_cdf .RowStride );switch _bg {case 1:_dcc =_fcf (_gaeg ,_cdf ,_bg ,_ecb ,_cbb );case 2:_dcc =_bbbc (_gaeg ,_cdf ,_bg ,_ecb ,_cbb );case 3:_dcc =_fca (_gaeg ,_cdf ,_bg ,_ecb ,_cbb );case 4:_dcc =_aae (_gaeg ,_cdf ,_bg ,_ecb ,_cbb );};if _dcc !=nil {return nil ,_dcc ;};return _cdf ,nil ;};func (_ffgg Points )GetIntY (i int )(int ,error ){if i >=len (_ffgg ){return 0,_d .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return int (_ffgg [i ].Y ),nil ;};func (_cffa Points )GetGeometry (i int )(_eead ,_agff float32 ,_fadfd error ){if i > len (_cffa )-1{return 0,0,_d .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};_feff :=_cffa [i ];return _feff .X ,_feff .Y ,nil ;};func _dbeb (_feccd *Bitmap ,_fagdd int )(*Bitmap ,error ){const _cgdg ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";if _feccd ==nil {return nil ,_d .Error (_cgdg ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _fagdd <=0{return nil ,_d .Error (_cgdg ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");};if _fagdd ==1{_ebag ,_fcag :=_bda (nil ,_feccd );if _fcag !=nil {return nil ,_d .Wrap (_fcag ,_cgdg ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _ebag ,nil ;};_bgdfc ,_agac :=_ba (_feccd ,_fagdd ,_fagdd );if _agac !=nil {return nil ,_d .Wrap (_agac ,_cgdg ,"");};return _bgdfc ,nil ;};func (_bbdc *Points )AddPoint (x ,y float32 ){*_bbdc =append (*_bbdc ,Point {x ,y })};func _cdae (_fgfb ,_eed ,_fcbde *Bitmap )(*Bitmap ,error ){const _aef ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _eed ==nil {return nil ,_d .Error (_aef ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _fcbde ==nil {return nil ,_d .Error (_aef ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _fgfb ==_fcbde {return nil ,_d .Error (_aef ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_eed .SizesEqual (_fcbde ){_fg .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_aef );};var _dae error ;if _fgfb ,_dae =_bda (_fgfb ,_eed );_dae !=nil {return nil ,_d .Wrap (_dae ,_aef ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _dae =_fgfb .RasterOperation (0,0,_fgfb .Width ,_fgfb .Height ,PixSrcXorDst ,_fcbde ,0,0);_dae !=nil {return nil ,_d .Wrap (_dae ,_aef ,"");};return _fgfb ,nil ;};func _bfag (_eddbb ,_dfdb *Bitmap ,_dcgb ,_fdga ,_afcb uint ,_fbfb ,_gefa int ,_bgc bool ,_dcfac ,_adbf int )error {for _ebge :=_fbfb ;_ebge < _gefa ;_ebge ++{if _dcfac +1< len (_eddbb .Data ){_ccc :=_ebge +1==_gefa ;_cdfc ,_cdc :=_eddbb .GetByte (_dcfac );if _cdc !=nil {return _cdc ;};_dcfac ++;_cdfc <<=_dcgb ;_dddeb ,_cdc :=_eddbb .GetByte (_dcfac );if _cdc !=nil {return _cdc ;};_dddeb >>=_fdga ;_ceeb :=_cdfc |_dddeb ;if _ccc &&!_bgc {_ceeb =_fgdg (_afcb ,_ceeb );};_cdc =_dfdb .SetByte (_adbf ,_ceeb );if _cdc !=nil {return _cdc ;};_adbf ++;if _ccc &&_bgc {_ceag ,_cdaa :=_eddbb .GetByte (_dcfac );if _cdaa !=nil {return _cdaa ;};_ceag <<=_dcgb ;_ceeb =_fgdg (_afcb ,_ceag );if _cdaa =_dfdb .SetByte (_adbf ,_ceeb );_cdaa !=nil {return _cdaa ;};};continue ;};_cdb ,_fcfaf :=_eddbb .GetByte (_dcfac );if _fcfaf !=nil {_fg .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_dcfac ,_fcfaf );return _fcfaf ;};_cdb <<=_dcgb ;_dcfac ++;_fcfaf =_dfdb .SetByte (_adbf ,_cdb );if _fcfaf !=nil {return _fcfaf ;};_adbf ++;};return nil ;};func _gd (_bf ,_da *Bitmap )(_ed error ){const _be ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";_gdg :=_da .RowStride ;_dag :=_bf .RowStride ;var (_eg byte ;_gdge uint16 ;_cg ,_ea ,_ga ,_dd ,_bfd int ;);for _ga =0;_ga < _da .Height ;_ga ++{_cg =_ga *_gdg ;_ea =2*_ga *_dag ;for _dd =0;_dd < _gdg ;_dd ++{_eg =_da .Data [_cg +_dd ];_gdge =_aafb [_eg ];_bfd =_ea +_dd *2;if _bf .RowStride !=_da .RowStride *2&&(_dd +1)*2> _bf .RowStride {_ed =_bf .SetByte (_bfd ,byte (_gdge >>8));}else {_ed =_bf .setTwoBytes (_bfd ,_gdge );};if _ed !=nil {return _d .Wrap (_ed ,_be ,"");};};for _dd =0;_dd < _dag ;_dd ++{_bfd =_ea +_dag +_dd ;_eg =_bf .Data [_ea +_dd ];if _ed =_bf .SetByte (_bfd ,_eg );_ed !=nil {return _d .Wrapf (_ed ,_be ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_ea +_dd ,_ea +_dag +_dd );};};};return nil ;};func (_feffe *Bitmaps )GetBox (i int )(*_ge .Rectangle ,error ){const _adfb ="\u0047\u0065\u0074\u0042\u006f\u0078";if _feffe ==nil {return nil ,_d .Error (_adfb ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");};if i > len (_feffe .Boxes )-1{return nil ,_d .Errorf (_adfb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _feffe .Boxes [i ],nil ;};func (_ddef *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_bab *Boxes ,_gdca error ){const _adfd ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";if _ddef ==nil {return nil ,_d .Error (_adfd ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");};if connectivity !=4&&connectivity !=8{return nil ,_d .Error (_adfd ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");};if bms ==nil {if _bab ,_gdca =_ddef .connComponentsBB (connectivity );_gdca !=nil {return nil ,_d .Wrap (_gdca ,_adfd ,"");};}else {if _bab ,_gdca =_ddef .connComponentsBitmapsBB (bms ,connectivity );_gdca !=nil {return nil ,_d .Wrap (_gdca ,_adfd ,"");};};return _bab ,nil ;};func (_gcdb *Bitmap )setAll ()error {_bccd :=_bfaga (_gcdb ,0,0,_gcdb .Width ,_gcdb .Height ,PixSet ,nil ,0,0);if _bccd !=nil {return _d .Wrap (_bccd ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};func (_bbde *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_effc *Bitmaps ,_ccag *Boxes ,_acag error ){const _ggcc ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";if _bbde ==nil {return nil ,nil ,_d .Error (_ggcc ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_d .Error (_ggcc ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");};if _bbde .Zero (){_ccag =&Boxes {};_effc =&Bitmaps {};return _effc ,_ccag ,nil ;};switch components {case ComponentConn :_effc =&Bitmaps {};if _ccag ,_acag =_bbde .ConnComponents (_effc ,8);_acag !=nil {return nil ,nil ,_d .Wrap (_acag ,_ggcc ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentCharacters :_ggdc ,_cbbg :=MorphSequence (_bbde ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _cbbg !=nil {return nil ,nil ,_d .Wrap (_cbbg ,_ggcc ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};if _fg .Log .IsLogLevel (_fg .LogLevelTrace ){_fg .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_ggdc .String ());};_fffa :=&Bitmaps {};_ccag ,_cbbg =_ggdc .ConnComponents (_fffa ,8);if _cbbg !=nil {return nil ,nil ,_d .Wrap (_cbbg ,_ggcc ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};if _fg .Log .IsLogLevel (_fg .LogLevelTrace ){_fg .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_fffa .String ());};if _effc ,_cbbg =_fffa .ClipToBitmap (_bbde );_cbbg !=nil {return nil ,nil ,_d .Wrap (_cbbg ,_ggcc ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_gaaa :=1;var _gadc *Bitmap ;switch {case _bbde .XResolution <=200:_gadc =_bbde ;case _bbde .XResolution <=400:_gaaa =2;_gadc ,_acag =_agc (_bbde ,1,0,0,0);if _acag !=nil {return nil ,nil ,_d .Wrap (_acag ,_ggcc ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");};default:_gaaa =4;_gadc ,_acag =_agc (_bbde ,1,1,0,0);if _acag !=nil {return nil ,nil ,_d .Wrap (_acag ,_ggcc ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");};};_gebc ,_ ,_cddf :=_dbba (_gadc );if _cddf !=nil {return nil ,nil ,_d .Wrap (_cddf ,_ggcc ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_gfae ,_cddf :=_dbeb (_gebc ,_gaaa );if _cddf !=nil {return nil ,nil ,_d .Wrap (_cddf ,_ggcc ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_bbcd :=&Bitmaps {};if _ccag ,_cddf =_gfae .ConnComponents (_bbcd ,4);_cddf !=nil {return nil ,nil ,_d .Wrap (_cddf ,_ggcc ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");};if _effc ,_cddf =_bbcd .ClipToBitmap (_bbde );_cddf !=nil {return nil ,nil ,_d .Wrap (_cddf ,_ggcc ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_effc ,_acag =_effc .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _acag !=nil {return nil ,nil ,_d .Wrap (_acag ,_ggcc ,"");};_ccag ,_acag =_ccag .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _acag !=nil {return nil ,nil ,_d .Wrap (_acag ,_ggcc ,"");};return _effc ,_ccag ,nil ;};func TstWSymbol (t *_dc .T ,scale ...int )*Bitmap {_gfeb ,_bfaaf :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_c .NoError (t ,_bfaaf );return TstGetScaledSymbol (t ,_gfeb ,scale ...);};func (_efdcg *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _bcfbb ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";if _efdcg ==nil {return nil ,_d .Error (_bcfbb ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_efdcg .Values )-1{return nil ,_d .Errorf (_bcfbb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _efdcg .Values [i ],nil ;};const (_geedb shift =iota ;_dcdg ;);func (_efdd *Bitmap )setEightBytes (_cgaf int ,_dbdf uint64 )error {_bbaa :=_efdd .RowStride -(_cgaf %_efdd .RowStride );if _efdd .RowStride !=_efdd .Width >>3{_bbaa --;};if _bbaa >=8{return _efdd .setEightFullBytes (_cgaf ,_dbdf );};return _efdd .setEightPartlyBytes (_cgaf ,_bbaa ,_dbdf );};func _ce (_bc ,_fa *Bitmap )(_ec error ){const _ab ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_ad :=_fa .RowStride ;_ac :=_bc .RowStride ;_faa :=_fa .RowStride *4-_bc .RowStride ;var (_dbg ,_fgb byte ;_ca uint32 ;_dca ,_gg ,_dbd ,_abc ,_abg ,_gc ,_cb int ;);for _dbd =0;_dbd < _fa .Height ;_dbd ++{_dca =_dbd *_ad ;_gg =4*_dbd *_ac ;for _abc =0;_abc < _ad ;_abc ++{_dbg =_fa .Data [_dca +_abc ];_ca =_bgcc [_dbg ];_gc =_gg +_abc *4;if _faa !=0&&(_abc +1)*4> _bc .RowStride {for _abg =_faa ;_abg > 0;_abg --{_fgb =byte ((_ca >>uint (_abg *8))&0xff);_cb =_gc +(_faa -_abg );if _ec =_bc .SetByte (_cb ,_fgb );_ec !=nil {return _d .Wrapf (_ec ,_ab ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_abg );};};}else if _ec =_bc .setFourBytes (_gc ,_ca );_ec !=nil {return _d .Wrap (_ec ,_ab ,"");};if _ec =_bc .setFourBytes (_gg +_abc *4,_bgcc [_fa .Data [_dca +_abc ]]);_ec !=nil {return _d .Wrap (_ec ,_ab ,"");};};for _abg =1;_abg < 4;_abg ++{for _abc =0;_abc < _ac ;_abc ++{if _ec =_bc .SetByte (_gg +_abg *_ac +_abc ,_bc .Data [_gg +_abc ]);_ec !=nil {return _d .Wrapf (_ec ,_ab ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_abg ,_abc );};};};};return nil ;};func (_fabaa MorphProcess )getWidthHeight ()(_gacf ,_dbdd int ){return _fabaa .Arguments [0],_fabaa .Arguments [1];};func (_ffd *Bitmap )countPixels ()int {var (_eddg int ;_feg uint8 ;_gbdf byte ;_adb int ;);_gggaa :=_ffd .RowStride ;_eabf :=uint (_ffd .Width &0x07);if _eabf !=0{_feg =uint8 ((0xff<<(8-_eabf ))&0xff);_gggaa --;};for _fgg :=0;_fgg < _ffd .Height ;_fgg ++{for _adb =0;_adb < _gggaa ;_adb ++{_gbdf =_ffd .Data [_fgg *_ffd .RowStride +_adb ];_eddg +=int (_dcba [_gbdf ]);};if _eabf !=0{_eddg +=int (_dcba [_ffd .Data [_fgg *_ffd .RowStride +_adb ]&_feg ]);};};return _eddg ;};func New (width ,height int )*Bitmap {_dfc :=_efa (width ,height );_dfc .Data =make ([]byte ,height *_dfc .RowStride );return _dfc ;};var _aaaa =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};func (_bgg *Bitmap )GetByteIndex (x ,y int )int {return y *_bgg .RowStride +(x >>3)};func (_ffbd *Bitmap )thresholdPixelSum (_fccgd int )bool {var (_aabb int ;_cgbg uint8 ;_edgb byte ;_bccdg int ;);_gfdg :=_ffbd .RowStride ;_bdef :=uint (_ffbd .Width &0x07);if _bdef !=0{_cgbg =uint8 ((0xff<<(8-_bdef ))&0xff);_gfdg --;};for _eecd :=0;_eecd < _ffbd .Height ;_eecd ++{for _bccdg =0;_bccdg < _gfdg ;_bccdg ++{_edgb =_ffbd .Data [_eecd *_ffbd .RowStride +_bccdg ];_aabb +=int (_dcba [_edgb ]);};if _bdef !=0{_edgb =_ffbd .Data [_eecd *_ffbd .RowStride +_bccdg ]&_cgbg ;_aabb +=int (_dcba [_edgb ]);};if _aabb > _fccgd {return true ;};};return false ;};func TstRSymbol (t *_dc .T ,scale ...int )*Bitmap {_aefg ,_aegg :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});_c .NoError (t ,_aegg );return TstGetScaledSymbol (t ,_aefg ,scale ...);};func (_debe *Bitmaps )selectByIndexes (_cebf []int )(*Bitmaps ,error ){_faec :=&Bitmaps {};for _ ,_deae :=range _cebf {_face ,_fbade :=_debe .GetBitmap (_deae );if _fbade !=nil {return nil ,_d .Wrap (_fbade ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");};_faec .AddBitmap (_face );};return _faec ,nil ;};func _feac (_bcg ,_cfba ,_afga *Bitmap )(*Bitmap ,error ){const _gagg ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";if _cfba ==nil {return nil ,_d .Error (_gagg ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _afga ==nil {return nil ,_d .Error (_gagg ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _caed error ;switch {case _bcg ==_cfba :if _caed =_bcg .RasterOperation (0,0,_cfba .Width ,_cfba .Height ,PixNotSrcAndDst ,_afga ,0,0);_caed !=nil {return nil ,_d .Wrap (_caed ,_gagg ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _bcg ==_afga :if _caed =_bcg .RasterOperation (0,0,_cfba .Width ,_cfba .Height ,PixNotSrcAndDst ,_cfba ,0,0);_caed !=nil {return nil ,_d .Wrap (_caed ,_gagg ,"\u0064 \u003d\u003d\u0020\u0073\u0032");};default:_bcg ,_caed =_bda (_bcg ,_cfba );if _caed !=nil {return nil ,_d .Wrap (_caed ,_gagg ,"");};if _caed =_bcg .RasterOperation (0,0,_cfba .Width ,_cfba .Height ,PixNotSrcAndDst ,_afga ,0,0);_caed !=nil {return nil ,_d .Wrap (_caed ,_gagg ,"\u0064e\u0066\u0061\u0075\u006c\u0074");};};return _bcg ,nil ;};func (_aagf *Bitmaps )AddBox (box *_ge .Rectangle ){_aagf .Boxes =append (_aagf .Boxes ,box )};func TstASymbol (t *_dc .T )*Bitmap {t .Helper ();_eebfaf :=New (6,6);_c .NoError (t ,_eebfaf .SetPixel (1,0,1));_c .NoError (t ,_eebfaf .SetPixel (2,0,1));_c .NoError (t ,_eebfaf .SetPixel (3,0,1));_c .NoError (t ,_eebfaf .SetPixel (4,0,1));_c .NoError (t ,_eebfaf .SetPixel (5,1,1));_c .NoError (t ,_eebfaf .SetPixel (1,2,1));_c .NoError (t ,_eebfaf .SetPixel (2,2,1));_c .NoError (t ,_eebfaf .SetPixel (3,2,1));_c .NoError (t ,_eebfaf .SetPixel (4,2,1));_c .NoError (t ,_eebfaf .SetPixel (5,2,1));_c .NoError (t ,_eebfaf .SetPixel (0,3,1));_c .NoError (t ,_eebfaf .SetPixel (5,3,1));_c .NoError (t ,_eebfaf .SetPixel (0,4,1));_c .NoError (t ,_eebfaf .SetPixel (5,4,1));_c .NoError (t ,_eebfaf .SetPixel (1,5,1));_c .NoError (t ,_eebfaf .SetPixel (2,5,1));_c .NoError (t ,_eebfaf .SetPixel (3,5,1));_c .NoError (t ,_eebfaf .SetPixel (4,5,1));_c .NoError (t ,_eebfaf .SetPixel (5,5,1));return _eebfaf ;};func _cccf ()[]int {_ddec :=make ([]int ,256);_ddec [0]=0;_ddec [1]=7;var _fbabb int ;for _fbabb =2;_fbabb < 4;_fbabb ++{_ddec [_fbabb ]=_ddec [_fbabb -2]+6;};for _fbabb =4;_fbabb < 8;_fbabb ++{_ddec [_fbabb ]=_ddec [_fbabb -4]+5;};for _fbabb =8;_fbabb < 16;_fbabb ++{_ddec [_fbabb ]=_ddec [_fbabb -8]+4;};for _fbabb =16;_fbabb < 32;_fbabb ++{_ddec [_fbabb ]=_ddec [_fbabb -16]+3;};for _fbabb =32;_fbabb < 64;_fbabb ++{_ddec [_fbabb ]=_ddec [_fbabb -32]+2;};for _fbabb =64;_fbabb < 128;_fbabb ++{_ddec [_fbabb ]=_ddec [_fbabb -64]+1;};for _fbabb =128;_fbabb < 256;_fbabb ++{_ddec [_fbabb ]=_ddec [_fbabb -128];};return _ddec ;};func _fca (_eff ,_bac *Bitmap ,_cac int ,_fea []byte ,_gcd int )(_dfed error ){const _bag ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";var (_dcce ,_bbg ,_ddea ,_fee ,_afd ,_dcb ,_bga ,_cfb int ;_cag ,_aaff ,_ggf ,_bage uint32 ;_cacd ,_ecdg byte ;_fde uint16 ;);_ggga :=make ([]byte ,4);_gcc :=make ([]byte ,4);for _ddea =0;_ddea < _eff .Height -1;_ddea ,_fee =_ddea +2,_fee +1{_dcce =_ddea *_eff .RowStride ;_bbg =_fee *_bac .RowStride ;for _afd ,_dcb =0,0;_afd < _gcd ;_afd ,_dcb =_afd +4,_dcb +1{for _bga =0;_bga < 4;_bga ++{_cfb =_dcce +_afd +_bga ;if _cfb <=len (_eff .Data )-1&&_cfb < _dcce +_eff .RowStride {_ggga [_bga ]=_eff .Data [_cfb ];}else {_ggga [_bga ]=0x00;};_cfb =_dcce +_eff .RowStride +_afd +_bga ;if _cfb <=len (_eff .Data )-1&&_cfb < _dcce +(2*_eff .RowStride ){_gcc [_bga ]=_eff .Data [_cfb ];}else {_gcc [_bga ]=0x00;};};_cag =_ff .BigEndian .Uint32 (_ggga );_aaff =_ff .BigEndian .Uint32 (_gcc );_ggf =_cag &_aaff ;_ggf |=_ggf <<1;_bage =_cag |_aaff ;_bage &=_bage <<1;_aaff =_ggf &_bage ;_aaff &=0xaaaaaaaa;_cag =_aaff |(_aaff <<7);_cacd =byte (_cag >>24);_ecdg =byte ((_cag >>8)&0xff);_cfb =_bbg +_dcb ;if _cfb +1==len (_bac .Data )-1||_cfb +1>=_bbg +_bac .RowStride {if _dfed =_bac .SetByte (_cfb ,_fea [_cacd ]);_dfed !=nil {return _d .Wrapf (_dfed ,_bag ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_cfb );};}else {_fde =(uint16 (_fea [_cacd ])<<8)|uint16 (_fea [_ecdg ]);if _dfed =_bac .setTwoBytes (_cfb ,_fde );_dfed !=nil {return _d .Wrapf (_dfed ,_bag ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_cfb );};_dcb ++;};};};return nil ;};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_facd bool ,_bdcfc error ){const _eaef ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_affb ,_eddc :=p1 .Width ,p1 .Height ;_eebec ,_fadec :=p3 .Width ,p3 .Height ;if _cc .Abs (_affb -_eebec )> maxDiffW {return false ,nil ;};if _cc .Abs (_eddc -_fadec )> maxDiffH {return false ,nil ;};_eabd :=int (float32 (area1 )*(1.0-rank )+0.5);_fdca :=int (float32 (area3 )*(1.0-rank )+0.5);var _gbgc ,_ceebc int ;if delX >=0{_gbgc =int (delX +0.5);}else {_gbgc =int (delX -0.5);};if delY >=0{_ceebc =int (delY +0.5);}else {_ceebc =int (delY -0.5);};_geff :=p1 .CreateTemplate ();if _bdcfc =_geff .RasterOperation (0,0,_affb ,_eddc ,PixSrc ,p1 ,0,0);_bdcfc !=nil {return false ,_d .Wrap (_bdcfc ,_eaef ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _bdcfc =_geff .RasterOperation (_gbgc ,_ceebc ,_affb ,_eddc ,PixNotSrcAndDst ,p4 ,0,0);_bdcfc !=nil {return false ,_d .Wrap (_bdcfc ,_eaef ,"\u0074 \u0026\u0020\u0021\u0070\u0034");};_facd ,_bdcfc =_geff .ThresholdPixelSum (_eabd ,tab8 );if _bdcfc !=nil {return false ,_d .Wrap (_bdcfc ,_eaef ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");};if _facd {return false ,nil ;};if _bdcfc =_geff .RasterOperation (_gbgc ,_ceebc ,_eebec ,_fadec ,PixSrc ,p3 ,0,0);_bdcfc !=nil {return false ,_d .Wrap (_bdcfc ,_eaef ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _bdcfc =_geff .RasterOperation (0,0,_eebec ,_fadec ,PixNotSrcAndDst ,p2 ,0,0);_bdcfc !=nil {return false ,_d .Wrap (_bdcfc ,_eaef ,"\u0074 \u0026\u0020\u0021\u0070\u0032");};_facd ,_bdcfc =_geff .ThresholdPixelSum (_fdca ,tab8 );if _bdcfc !=nil {return false ,_d .Wrap (_bdcfc ,_eaef ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");};return !_facd ,nil ;};func _bafc (_gebb *_cc .Stack ,_afae ,_edeb ,_efed ,_adeba ,_bbef int ,_fdbb *_ge .Rectangle )(_cegef error ){const _afdc ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";if _gebb ==nil {return _d .Error (_afdc ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _fdbb ==nil {return _d .Error (_afdc ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");};_fdbb .Min .X =_cc .Min (_fdbb .Min .X ,_afae );_fdbb .Max .X =_cc .Max (_fdbb .Max .X ,_edeb );_fdbb .Min .Y =_cc .Min (_fdbb .Min .Y ,_efed );_fdbb .Max .Y =_cc .Max (_fdbb .Max .Y ,_efed );if !(_efed +_adeba >=0&&_efed +_adeba <=_bbef ){return nil ;};if _gebb .Aux ==nil {return _d .Error (_afdc ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _aead *fillSegment ;_gcfe ,_fcde :=_gebb .Aux .Pop ();if _fcde {if _aead ,_fcde =_gcfe .(*fillSegment );!_fcde {return _d .Error (_afdc ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_aead =&fillSegment {};};_aead ._dbef =_afae ;_aead ._ddac =_edeb ;_aead ._fbfbc =_efed ;_aead ._fbadd =_adeba ;_gebb .Push (_aead );return nil ;};func (_cdef *Bitmap )Copy ()*Bitmap {_ffbe :=make ([]byte ,len (_cdef .Data ));copy (_ffbe ,_cdef .Data );return &Bitmap {Width :_cdef .Width ,Height :_cdef .Height ,RowStride :_cdef .RowStride ,Data :_ffbe ,Color :_cdef .Color ,Text :_cdef .Text ,BitmapNumber :_cdef .BitmapNumber ,Special :_cdef .Special };};func _bcaae (_ffgb *Bitmap ,_dabc ...MorphProcess )(_ffdc *Bitmap ,_bgcb error ){const _eadfd ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";if _ffgb ==nil {return nil ,_d .Error (_eadfd ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if len (_dabc )==0{return nil ,_d .Error (_eadfd ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _bgcb =_afef (_dabc ...);_bgcb !=nil {return nil ,_d .Wrap (_bgcb ,_eadfd ,"");};var _dcfd ,_fbbc ,_bdgd int ;_ffdc =_ffgb .Copy ();for _ ,_dfff :=range _dabc {switch _dfff .Operation {case MopDilation :_dcfd ,_fbbc =_dfff .getWidthHeight ();_ffdc ,_bgcb =DilateBrick (nil ,_ffdc ,_dcfd ,_fbbc );if _bgcb !=nil {return nil ,_d .Wrap (_bgcb ,_eadfd ,"");};case MopErosion :_dcfd ,_fbbc =_dfff .getWidthHeight ();_ffdc ,_bgcb =_bbae (nil ,_ffdc ,_dcfd ,_fbbc );if _bgcb !=nil {return nil ,_d .Wrap (_bgcb ,_eadfd ,"");};case MopOpening :_dcfd ,_fbbc =_dfff .getWidthHeight ();_ffdc ,_bgcb =_aed (nil ,_ffdc ,_dcfd ,_fbbc );if _bgcb !=nil {return nil ,_d .Wrap (_bgcb ,_eadfd ,"");};case MopClosing :_dcfd ,_fbbc =_dfff .getWidthHeight ();_ffdc ,_bgcb =_adbdd (nil ,_ffdc ,_dcfd ,_fbbc );if _bgcb !=nil {return nil ,_d .Wrap (_bgcb ,_eadfd ,"");};case MopRankBinaryReduction :_ffdc ,_bgcb =_agc (_ffdc ,_dfff .Arguments ...);if _bgcb !=nil {return nil ,_d .Wrap (_bgcb ,_eadfd ,"");};case MopReplicativeBinaryExpansion :_ffdc ,_bgcb =_dbeb (_ffdc ,_dfff .Arguments [0]);if _bgcb !=nil {return nil ,_d .Wrap (_bgcb ,_eadfd ,"");};case MopAddBorder :_bdgd =_dfff .Arguments [0];_ffdc ,_bgcb =_ffdc .AddBorder (_bdgd ,0);if _bgcb !=nil {return nil ,_d .Wrap (_bgcb ,_eadfd ,"");};default:return nil ,_d .Error (_eadfd ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");};};if _bdgd > 0{_ffdc ,_bgcb =_ffdc .RemoveBorder (_bdgd );if _bgcb !=nil {return nil ,_d .Wrap (_bgcb ,_eadfd ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _ffdc ,nil ;};func (_dcee *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _aegcg ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";_fefcg ,_adbaa :=_dcee .selectByIndexes (idx );if _adbaa !=nil {return nil ,_d .Wrap (_adbaa ,_aegcg ,"");};return _fefcg ,nil ;};func _feda (_becdb ,_aeb *Bitmap ,_fagb *Selection )(*Bitmap ,error ){const _eabgf ="\u006f\u0070\u0065\u006e";var _fgfee error ;_becdb ,_fgfee =_ccdf (_becdb ,_aeb ,_fagb );if _fgfee !=nil {return nil ,_d .Wrap (_fgfee ,_eabgf ,"");};_dcfbg ,_fgfee :=_agdb (nil ,_aeb ,_fagb );if _fgfee !=nil {return nil ,_d .Wrap (_fgfee ,_eabgf ,"");};_ ,_fgfee =_cbbd (_becdb ,_dcfbg ,_fagb );if _fgfee !=nil {return nil ,_d .Wrap (_fgfee ,_eabgf ,"");};return _becdb ,nil ;};func _ef (_ceg ,_bd *Bitmap )(_fgd error ){const _fd ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";_de :=_bd .RowStride ;_cba :=_ceg .RowStride ;var _bb ,_beg ,_aa ,_acg ,_fc int ;for _aa =0;_aa < _bd .Height ;_aa ++{_bb =_aa *_de ;_beg =8*_aa *_cba ;for _acg =0;_acg < _de ;_acg ++{if _fgd =_ceg .setEightBytes (_beg +_acg *8,_cfc [_bd .Data [_bb +_acg ]]);_fgd !=nil {return _d .Wrap (_fgd ,_fd ,"");};};for _fc =1;_fc < 8;_fc ++{for _acg =0;_acg < _cba ;_acg ++{if _fgd =_ceg .SetByte (_beg +_fc *_cba +_acg ,_ceg .Data [_beg +_acg ]);_fgd !=nil {return _d .Wrap (_fgd ,_fd ,"");};};};};return nil ;};func (_acfa *BitmapsArray )AddBox (box *_ge .Rectangle ){_acfa .Boxes =append (_acfa .Boxes ,box )};func NewClassedPoints (points *Points ,classes _cc .IntSlice )(*ClassedPoints ,error ){const _fbg ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";if points ==nil {return nil ,_d .Error (_fbg ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");};if classes ==nil {return nil ,_d .Error (_fbg ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");};_eggf :=&ClassedPoints {Points :points ,IntSlice :classes };if _gaedc :=_eggf .validateIntSlice ();_gaedc !=nil {return nil ,_d .Wrap (_gaedc ,_fbg ,"");};return _eggf ,nil ;};func _ffbb (_fgfc ,_eadf *Bitmap ,_eebe ,_gcfdf ,_eddd ,_ggbc ,_dcfa int ,_dac CombinationOperator )error {var _gbe int ;_gfa :=func (){_gbe ++;_eddd +=_eadf .RowStride ;_ggbc +=_fgfc .RowStride ;_dcfa +=_fgfc .RowStride };for _gbe =_eebe ;_gbe < _gcfdf ;_gfa (){_cgbf :=_eddd ;for _edgdc :=_ggbc ;_edgdc <=_dcfa ;_edgdc ++{_ffbbe ,_caaf :=_eadf .GetByte (_cgbf );if _caaf !=nil {return _caaf ;};_fagf ,_caaf :=_fgfc .GetByte (_edgdc );if _caaf !=nil {return _caaf ;};if _caaf =_eadf .SetByte (_cgbf ,_gafc (_ffbbe ,_fagf ,_dac ));_caaf !=nil {return _caaf ;};_cgbf ++;};};return nil ;};func _efa (_abaf ,_adf int )*Bitmap {return &Bitmap {Width :_abaf ,Height :_adf ,RowStride :(_abaf +7)>>3};};func (_bdgb *Bitmap )setBit (_dcg int ){_bdgb .Data [(_dcg >>3)]|=0x80>>uint (_dcg &7)};type ClassedPoints struct{*Points ;_cc .IntSlice ;_decb func (_afgc ,_cbdg int )bool ;};func (_ecdf *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _effd ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_ecdf .Values )==0{return nil ,_d .Error (_effd ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_aaabf :=&BitmapsArray {};_ecdf .SortByHeight ();_dcfaa :=-1;_dfcc :=-1;for _dfca :=0;_dfca < len (_ecdf .Values );_dfca ++{_fafg :=_ecdf .Values [_dfca ].Height ;if _fafg > _dcfaa {_dcfaa =_fafg ;_dfcc ++;_aaabf .Values =append (_aaabf .Values ,&Bitmaps {});};_aaabf .Values [_dfcc ].AddBitmap (_ecdf .Values [_dfca ]);};return _aaabf ,nil ;};type LocationFilter int ;func (_dabcd Points )YSorter ()func (_gfff ,_bgdb int )bool {return func (_cgec ,_dgece int )bool {return _dabcd [_cgec ].Y < _dabcd [_dgece ].Y };};func (_cafa *Bitmap )inverseData (){if _eabg :=_cafa .RasterOperation (0,0,_cafa .Width ,_cafa .Height ,PixNotDst ,nil ,0,0);_eabg !=nil {_fg .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_eabg );};if _cafa .Color ==Chocolate {_cafa .Color =Vanilla ;}else {_cafa .Color =Chocolate ;};};func _edcd (_bfcb ,_gdcf ,_fdf byte )byte {return (_bfcb &^(_fdf ))|(_gdcf &_fdf )};type Points []Point ;func _ged ()(_ecd [256]uint32 ){for _ead :=0;_ead < 256;_ead ++{if _ead &0x01!=0{_ecd [_ead ]|=0xf;};if _ead &0x02!=0{_ecd [_ead ]|=0xf0;};if _ead &0x04!=0{_ecd [_ead ]|=0xf00;};if _ead &0x08!=0{_ecd [_ead ]|=0xf000;};if _ead &0x10!=0{_ecd [_ead ]|=0xf0000;};if _ead &0x20!=0{_ecd [_ead ]|=0xf00000;};if _ead &0x40!=0{_ecd [_ead ]|=0xf000000;};if _ead &0x80!=0{_ecd [_ead ]|=0xf0000000;};};return _ecd ;};var (_ddeae =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_gfag =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _dbgg (d ,s ,hSize ,vSize )};func (_agg *Bitmap )equivalent (_caf *Bitmap )bool {if _agg ==_caf {return true ;};if !_agg .SizesEqual (_caf ){return false ;};_egbb :=_ecdb (_agg ,_caf ,CmbOpXor );_dad :=_agg .countPixels ();_dge :=int (0.25*float32 (_dad ));if _egbb .thresholdPixelSum (_dge ){return false ;};var (_ddbg [9][9]int ;_bfcd [18][9]int ;_ddd [9][18]int ;_eaf int ;_bgae int ;);_ccff :=9;_gfda :=_agg .Height /_ccff ;_bbgd :=_agg .Width /_ccff ;_dgab ,_cgea :=_gfda /2,_bbgd /2;if _gfda < _bbgd {_dgab =_bbgd /2;_cgea =_gfda /2;};_ccg :=float64 (_dgab )*float64 (_cgea )*_b .Pi ;_fadb :=int (float64 (_gfda *_bbgd /2)*0.9);_eadg :=int (float64 (_bbgd *_gfda /2)*0.9);for _cbe :=0;_cbe < _ccff ;_cbe ++{_gdd :=_bbgd *_cbe +_eaf ;var _def int ;if _cbe ==_ccff -1{_eaf =0;_def =_agg .Width ;}else {_def =_gdd +_bbgd ;if ((_agg .Width -_eaf )%_ccff )> 0{_eaf ++;_def ++;};};for _fdb :=0;_fdb < _ccff ;_fdb ++{_fefg :=_gfda *_fdb +_bgae ;var _egc int ;if _fdb ==_ccff -1{_bgae =0;_egc =_agg .Height ;}else {_egc =_fefg +_gfda ;if (_agg .Height -_bgae )%_ccff > 0{_bgae ++;_egc ++;};};var _cebg ,_cegg ,_cbcb ,_ecad int ;_ebb :=(_gdd +_def )/2;_bggc :=(_fefg +_egc )/2;for _egd :=_gdd ;_egd < _def ;_egd ++{for _fecd :=_fefg ;_fecd < _egc ;_fecd ++{if _egbb .GetPixel (_egd ,_fecd ){if _egd < _ebb {_cebg ++;}else {_cegg ++;};if _fecd < _bggc {_ecad ++;}else {_cbcb ++;};};};};_ddbg [_cbe ][_fdb ]=_cebg +_cegg ;_bfcd [_cbe *2][_fdb ]=_cebg ;_bfcd [_cbe *2+1][_fdb ]=_cegg ;_ddd [_cbe ][_fdb *2]=_ecad ;_ddd [_cbe ][_fdb *2+1]=_cbcb ;};};for _eadgg :=0;_eadgg < _ccff *2-1;_eadgg ++{for _fbbf :=0;_fbbf < (_ccff -1);_fbbf ++{var _gdgee int ;for _bbee :=0;_bbee < 2;_bbee ++{for _cfg :=0;_cfg < 2;_cfg ++{_gdgee +=_bfcd [_eadgg +_bbee ][_fbbf +_cfg ];};};if _gdgee > _eadg {return false ;};};};for _ggfd :=0;_ggfd < (_ccff -1);_ggfd ++{for _fgdd :=0;_fgdd < ((_ccff *2)-1);_fgdd ++{var _ffde int ;for _ddc :=0;_ddc < 2;_ddc ++{for _cgbab :=0;_cgbab < 2;_cgbab ++{_ffde +=_ddd [_ggfd +_ddc ][_fgdd +_cgbab ];};};if _ffde > _fadb {return false ;};};};for _cff :=0;_cff < (_ccff -2);_cff ++{for _bdgg :=0;_bdgg < (_ccff -2);_bdgg ++{var _fdcg ,_dfcb int ;for _bgff :=0;_bgff < 3;_bgff ++{for _ecda :=0;_ecda < 3;_ecda ++{if _bgff ==_ecda {_fdcg +=_ddbg [_cff +_bgff ][_bdgg +_ecda ];};if (2-_bgff )==_ecda {_dfcb +=_ddbg [_cff +_bgff ][_bdgg +_ecda ];};};};if _fdcg > _eadg ||_dfcb > _eadg {return false ;};};};for _fege :=0;_fege < (_ccff -1);_fege ++{for _fac :=0;_fac < (_ccff -1);_fac ++{var _cea int ;for _bcfb :=0;_bcfb < 2;_bcfb ++{for _adce :=0;_adce < 2;_adce ++{_cea +=_ddbg [_fege +_bcfb ][_fac +_adce ];};};if float64 (_cea )> _ccg {return false ;};};};return true ;};func _aae (_gcf ,_gfbf *Bitmap ,_agcc int ,_bfbg []byte ,_ggc int )(_cde error ){const _fgad ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";var (_ace ,_bdc ,_abgg ,_fge ,_edaa ,_ffb ,_ceb ,_ded int ;_aag ,_gcfd uint32 ;_bgdf ,_cdd byte ;_bagb uint16 ;);_gffg :=make ([]byte ,4);_fef :=make ([]byte ,4);for _abgg =0;_abgg < _gcf .Height -1;_abgg ,_fge =_abgg +2,_fge +1{_ace =_abgg *_gcf .RowStride ;_bdc =_fge *_gfbf .RowStride ;for _edaa ,_ffb =0,0;_edaa < _ggc ;_edaa ,_ffb =_edaa +4,_ffb +1{for _ceb =0;_ceb < 4;_ceb ++{_ded =_ace +_edaa +_ceb ;if _ded <=len (_gcf .Data )-1&&_ded < _ace +_gcf .RowStride {_gffg [_ceb ]=_gcf .Data [_ded ];}else {_gffg [_ceb ]=0x00;};_ded =_ace +_gcf .RowStride +_edaa +_ceb ;if _ded <=len (_gcf .Data )-1&&_ded < _ace +(2*_gcf .RowStride ){_fef [_ceb ]=_gcf .Data [_ded ];}else {_fef [_ceb ]=0x00;};};_aag =_ff .BigEndian .Uint32 (_gffg );_gcfd =_ff .BigEndian .Uint32 (_fef );_gcfd &=_aag ;_gcfd &=_gcfd <<1;_gcfd &=0xaaaaaaaa;_aag =_gcfd |(_gcfd <<7);_bgdf =byte (_aag >>24);_cdd =byte ((_aag >>8)&0xff);_ded =_bdc +_ffb ;if _ded +1==len (_gfbf .Data )-1||_ded +1>=_bdc +_gfbf .RowStride {_gfbf .Data [_ded ]=_bfbg [_bgdf ];if _cde =_gfbf .SetByte (_ded ,_bfbg [_bgdf ]);_cde !=nil {return _d .Wrapf (_cde ,_fgad ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_ded );};}else {_bagb =(uint16 (_bfbg [_bgdf ])<<8)|uint16 (_bfbg [_cdd ]);if _cde =_gfbf .setTwoBytes (_ded ,_bagb );_cde !=nil {return _d .Wrapf (_cde ,_fgad ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ded );};_ffb ++;};};};return nil ;};func _ecbg (_cgce int )int {if _cgce < 0{return -_cgce ;};return _cgce ;};func (_agag *ClassedPoints )ySortFunction ()func (_eecfg int ,_gdfbd int )bool {return func (_bafd ,_adde int )bool {return _agag .YAtIndex (_bafd )< _agag .YAtIndex (_adde )};};func (_fbcfe *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_fadd *Bitmaps ,_effcf error ){const _cecf ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";if _fbcfe ==nil {return nil ,_d .Error (_cecf ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_d .Errorf (_cecf ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_d .Errorf (_cecf ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );};_cfbb ,_effcf :=_fbcfe .makeSizeIndicator (width ,height ,tp ,relation );if _effcf !=nil {return nil ,_d .Wrap (_effcf ,_cecf ,"");};_fadd ,_effcf =_fbcfe .selectByIndicator (_cfbb );if _effcf !=nil {return nil ,_d .Wrap (_effcf ,_cecf ,"");};return _fadd ,nil ;};func Extract (roi _ge .Rectangle ,src *Bitmap )(*Bitmap ,error ){_dcgd :=New (roi .Dx (),roi .Dy ());_fbab :=roi .Min .X &0x07;_caafc :=8-_fbab ;_deeg :=uint (8-_dcgd .Width &0x07);_faabf :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_aggd :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_eeda :=_dcgd .RowStride ==_aggd +1-_faabf ;var _fgfa int ;for _cgae :=roi .Min .Y ;_cgae < roi .Max .Y ;_cgae ++{_befc :=_faabf ;_cdgg :=_fgfa ;switch {case _faabf ==_aggd :_dbf ,_egeg :=src .GetByte (_befc );if _egeg !=nil {return nil ,_egeg ;};_dbf <<=uint (_fbab );_egeg =_dcgd .SetByte (_cdgg ,_fgdg (_deeg ,_dbf ));if _egeg !=nil {return nil ,_egeg ;};case _fbab ==0:for _aad :=_faabf ;_aad <=_aggd ;_aad ++{_fagfg ,_gege :=src .GetByte (_befc );if _gege !=nil {return nil ,_gege ;};_befc ++;if _aad ==_aggd &&_eeda {_fagfg =_fgdg (_deeg ,_fagfg );};_gege =_dcgd .SetByte (_cdgg ,_fagfg );if _gege !=nil {return nil ,_gege ;};_cdgg ++;};default:_dace :=_bfag (src ,_dcgd ,uint (_fbab ),uint (_caafc ),_deeg ,_faabf ,_aggd ,_eeda ,_befc ,_cdgg );if _dace !=nil {return nil ,_dace ;};};_faabf +=src .RowStride ;_aggd +=src .RowStride ;_fgfa +=_dcgd .RowStride ;};return _dcgd ,nil ;};func _ecdb (_ccgd ,_ceac *Bitmap ,_cgd CombinationOperator )*Bitmap {_cfef :=New (_ccgd .Width ,_ccgd .Height );for _gbef :=0;_gbef < len (_cfef .Data );_gbef ++{_cfef .Data [_gbef ]=_gafc (_ccgd .Data [_gbef ],_ceac .Data [_gbef ],_cgd );};return _cfef ;};func (_dbb *Bitmap )nextOnPixelLow (_bada ,_bae ,_gbce ,_aafc ,_dbcd int )(_gfe _ge .Point ,_bdgga bool ,_aagc error ){const _adbd ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";var (_gfba int ;_ccfg byte ;);_fag :=_dbcd *_gbce ;_egdf :=_fag +(_aafc /8);if _ccfg ,_aagc =_dbb .GetByte (_egdf );_aagc !=nil {return _gfe ,false ,_d .Wrap (_aagc ,_adbd ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");};if _ccfg !=0{_eebg :=_aafc -(_aafc %8)+7;for _gfba =_aafc ;_gfba <=_eebg &&_gfba < _bada ;_gfba ++{if _dbb .GetPixel (_gfba ,_dbcd ){_gfe .X =_gfba ;_gfe .Y =_dbcd ;return _gfe ,true ,nil ;};};};_dgdc :=(_aafc /8)+1;_gfba =8*_dgdc ;var _bacea int ;for _egdf =_fag +_dgdc ;_gfba < _bada ;_egdf ,_gfba =_egdf +1,_gfba +8{if _ccfg ,_aagc =_dbb .GetByte (_egdf );_aagc !=nil {return _gfe ,false ,_d .Wrap (_aagc ,_adbd ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _ccfg ==0{continue ;};for _bacea =0;_bacea < 8&&_gfba < _bada ;_bacea ,_gfba =_bacea +1,_gfba +1{if _dbb .GetPixel (_gfba ,_dbcd ){_gfe .X =_gfba ;_gfe .Y =_dbcd ;return _gfe ,true ,nil ;};};};for _fbad :=_dbcd +1;_fbad < _bae ;_fbad ++{_fag =_fbad *_gbce ;for _egdf ,_gfba =_fag ,0;_gfba < _bada ;_egdf ,_gfba =_egdf +1,_gfba +8{if _ccfg ,_aagc =_dbb .GetByte (_egdf );_aagc !=nil {return _gfe ,false ,_d .Wrap (_aagc ,_adbd ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _ccfg ==0{continue ;};for _bacea =0;_bacea < 8&&_gfba < _bada ;_bacea ,_gfba =_bacea +1,_gfba +1{if _dbb .GetPixel (_gfba ,_fbad ){_gfe .X =_gfba ;_gfe .Y =_fbad ;return _gfe ,true ,nil ;};};};};return _gfe ,false ,nil ;};func _ecdbb (_agee *Bitmap ,_aacca ,_gdcd ,_facg ,_feea int ,_cfga RasterOperator ,_bfdc *Bitmap ,_geba ,_dfefc int )error {var (_ddgd bool ;_badaa bool ;_gaaae byte ;_cfgc int ;_aaga int ;_fafa int ;_acbb int ;_bbbgeg bool ;_gfea int ;_bcdb int ;_daa int ;_eabe bool ;_eaee byte ;_bfga int ;_afffg int ;_bagcg int ;_abbf byte ;_cdda int ;_aacff int ;_adae uint ;_bbff uint ;_bdecc byte ;_cafg shift ;_cbedd bool ;_ggca bool ;_dafdd ,_effa int ;);if _geba &7!=0{_aacff =8-(_geba &7);};if _aacca &7!=0{_aaga =8-(_aacca &7);};if _aacff ==0&&_aaga ==0{_bdecc =_gfag [0];}else {if _aaga > _aacff {_adae =uint (_aaga -_aacff );}else {_adae =uint (8-(_aacff -_aaga ));};_bbff =8-_adae ;_bdecc =_gfag [_adae ];};if (_aacca &7)!=0{_ddgd =true ;_cfgc =8-(_aacca &7);_gaaae =_gfag [_cfgc ];_fafa =_agee .RowStride *_gdcd +(_aacca >>3);_acbb =_bfdc .RowStride *_dfefc +(_geba >>3);_cdda =8-(_geba &7);if _cfgc > _cdda {_cafg =_geedb ;if _facg >=_aacff {_cbedd =true ;};}else {_cafg =_dcdg ;};};if _facg < _cfgc {_badaa =true ;_gaaae &=_ddeae [8-_cfgc +_facg ];};if !_badaa {_gfea =(_facg -_cfgc )>>3;if _gfea !=0{_bbbgeg =true ;_bcdb =_agee .RowStride *_gdcd +((_aacca +_aaga )>>3);_daa =_bfdc .RowStride *_dfefc +((_geba +_aaga )>>3);};};_bfga =(_aacca +_facg )&7;if !(_badaa ||_bfga ==0){_eabe =true ;_eaee =_ddeae [_bfga ];_afffg =_agee .RowStride *_gdcd +((_aacca +_aaga )>>3)+_gfea ;_bagcg =_bfdc .RowStride *_dfefc +((_geba +_aaga )>>3)+_gfea ;if _bfga > int (_bbff ){_ggca =true ;};};switch _cfga {case PixSrc :if _ddgd {for _dafdd =0;_dafdd < _feea ;_dafdd ++{if _cafg ==_geedb {_abbf =_bfdc .Data [_acbb ]<<_adae ;if _cbedd {_abbf =_edcd (_abbf ,_bfdc .Data [_acbb +1]>>_bbff ,_bdecc );};}else {_abbf =_bfdc .Data [_acbb ]>>_bbff ;};_agee .Data [_fafa ]=_edcd (_agee .Data [_fafa ],_abbf ,_gaaae );_fafa +=_agee .RowStride ;_acbb +=_bfdc .RowStride ;};};if _bbbgeg {for _dafdd =0;_dafdd < _feea ;_dafdd ++{for _effa =0;_effa < _gfea ;_effa ++{_abbf =_edcd (_bfdc .Data [_daa +_effa ]<<_adae ,_bfdc .Data [_daa +_effa +1]>>_bbff ,_bdecc );_agee .Data [_bcdb +_effa ]=_abbf ;};_bcdb +=_agee .RowStride ;_daa +=_bfdc .RowStride ;};};if _eabe {for _dafdd =0;_dafdd < _feea ;_dafdd ++{_abbf =_bfdc .Data [_bagcg ]<<_adae ;if _ggca {_abbf =_edcd (_abbf ,_bfdc .Data [_bagcg +1]>>_bbff ,_bdecc );};_agee .Data [_afffg ]=_edcd (_agee .Data [_afffg ],_abbf ,_eaee );_afffg +=_agee .RowStride ;_bagcg +=_bfdc .RowStride ;};};case PixNotSrc :if _ddgd {for _dafdd =0;_dafdd < _feea ;_dafdd ++{if _cafg ==_geedb {_abbf =_bfdc .Data [_acbb ]<<_adae ;if _cbedd {_abbf =_edcd (_abbf ,_bfdc .Data [_acbb +1]>>_bbff ,_bdecc );};}else {_abbf =_bfdc .Data [_acbb ]>>_bbff ;};_agee .Data [_fafa ]=_edcd (_agee .Data [_fafa ],^_abbf ,_gaaae );_fafa +=_agee .RowStride ;_acbb +=_bfdc .RowStride ;};};if _bbbgeg {for _dafdd =0;_dafdd < _feea ;_dafdd ++{for _effa =0;_effa < _gfea ;_effa ++{_abbf =_edcd (_bfdc .Data [_daa +_effa ]<<_adae ,_bfdc .Data [_daa +_effa +1]>>_bbff ,_bdecc );_agee .Data [_bcdb +_effa ]=^_abbf ;};_bcdb +=_agee .RowStride ;_daa +=_bfdc .RowStride ;};};if _eabe {for _dafdd =0;_dafdd < _feea ;_dafdd ++{_abbf =_bfdc .Data [_bagcg ]<<_adae ;if _ggca {_abbf =_edcd (_abbf ,_bfdc .Data [_bagcg +1]>>_bbff ,_bdecc );};_agee .Data [_afffg ]=_edcd (_agee .Data [_afffg ],^_abbf ,_eaee );_afffg +=_agee .RowStride ;_bagcg +=_bfdc .RowStride ;};};case PixSrcOrDst :if _ddgd {for _dafdd =0;_dafdd < _feea ;_dafdd ++{if _cafg ==_geedb {_abbf =_bfdc .Data [_acbb ]<<_adae ;if _cbedd {_abbf =_edcd (_abbf ,_bfdc .Data [_acbb +1]>>_bbff ,_bdecc );};}else {_abbf =_bfdc .Data [_acbb ]>>_bbff ;};_agee .Data [_fafa ]=_edcd (_agee .Data [_fafa ],_abbf |_agee .Data [_fafa ],_gaaae );_fafa +=_agee .RowStride ;_acbb +=_bfdc .RowStride ;};};if _bbbgeg {for _dafdd =0;_dafdd < _feea ;_dafdd ++{for _effa =0;_effa < _gfea ;_effa ++{_abbf =_edcd (_bfdc .Data [_daa +_effa ]<<_adae ,_bfdc .Data [_daa +_effa +1]>>_bbff ,_bdecc );_agee .Data [_bcdb +_effa ]|=_abbf ;};_bcdb +=_agee .RowStride ;_daa +=_bfdc .RowStride ;};};if _eabe {for _dafdd =0;_dafdd < _feea ;_dafdd ++{_abbf =_bfdc .Data [_bagcg ]<<_adae ;if _ggca {_abbf =_edcd (_abbf ,_bfdc .Data [_bagcg +1]>>_bbff ,_bdecc );};_agee .Data [_afffg ]=_edcd (_agee .Data [_afffg ],_abbf |_agee .Data [_afffg ],_eaee );_afffg +=_agee .RowStride ;_bagcg +=_bfdc .RowStride ;};};case PixSrcAndDst :if _ddgd {for _dafdd =0;_dafdd < _feea ;_dafdd ++{if _cafg ==_geedb {_abbf =_bfdc .Data [_acbb ]<<_adae ;if _cbedd {_abbf =_edcd (_abbf ,_bfdc .Data [_acbb +1]>>_bbff ,_bdecc );};}else {_abbf =_bfdc .Data [_acbb ]>>_bbff ;};_agee .Data [_fafa ]=_edcd (_agee .Data [_fafa ],_abbf &_agee .Data [_fafa ],_gaaae );_fafa +=_agee .RowStride ;_acbb +=_bfdc .RowStride ;};};if _bbbgeg {for _dafdd =0;_dafdd < _feea ;_dafdd ++{for _effa =0;_effa < _gfea ;_effa ++{_abbf =_edcd (_bfdc .Data [_daa +_effa ]<<_adae ,_bfdc .Data [_daa +_effa +1]>>_bbff ,_bdecc );_agee .Data [_bcdb +_effa ]&=_abbf ;};_bcdb +=_agee .RowStride ;_daa +=_bfdc .RowStride ;};};if _eabe {for _dafdd =0;_dafdd < _feea ;_dafdd ++{_abbf =_bfdc .Data [_bagcg ]<<_adae ;if _ggca {_abbf =_edcd (_abbf ,_bfdc .Data [_bagcg +1]>>_bbff ,_bdecc );};_agee .Data [_afffg ]=_edcd (_agee .Data [_afffg ],_abbf &_agee .Data [_afffg ],_eaee );_afffg +=_agee .RowStride ;_bagcg +=_bfdc .RowStride ;};};case PixSrcXorDst :if _ddgd {for _dafdd =0;_dafdd < _feea ;_dafdd ++{if _cafg ==_geedb {_abbf =_bfdc .Data [_acbb ]<<_adae ;if _cbedd {_abbf =_edcd (_abbf ,_bfdc .Data [_acbb +1]>>_bbff ,_bdecc );};}else {_abbf =_bfdc .Data [_acbb ]>>_bbff ;};_agee .Data [_fafa ]=_edcd (_agee .Data [_fafa ],_abbf ^_agee .Data [_fafa ],_gaaae );_fafa +=_agee .RowStride ;_acbb +=_bfdc .RowStride ;};};if _bbbgeg {for _dafdd =0;_dafdd < _feea ;_dafdd ++{for _effa =0;_effa < _gfea ;_effa ++{_abbf =_edcd (_bfdc .Data [_daa +_effa ]<<_adae ,_bfdc .Data [_daa +_effa +1]>>_bbff ,_bdecc );_agee .Data [_bcdb +_effa ]^=_abbf ;};_bcdb +=_agee .RowStride ;_daa +=_bfdc .RowStride ;};};if _eabe {for _dafdd =0;_dafdd < _feea ;_dafdd ++{_abbf =_bfdc .Data [_bagcg ]<<_adae ;if _ggca {_abbf =_edcd (_abbf ,_bfdc .Data [_bagcg +1]>>_bbff ,_bdecc );};_agee .Data [_afffg ]=_edcd (_agee .Data [_afffg ],_abbf ^_agee .Data [_afffg ],_eaee );_afffg +=_agee .RowStride ;_bagcg +=_bfdc .RowStride ;};};case PixNotSrcOrDst :if _ddgd {for _dafdd =0;_dafdd < _feea ;_dafdd ++{if _cafg ==_geedb {_abbf =_bfdc .Data [_acbb ]<<_adae ;if _cbedd {_abbf =_edcd (_abbf ,_bfdc .Data [_acbb +1]>>_bbff ,_bdecc );};}else {_abbf =_bfdc .Data [_acbb ]>>_bbff ;};_agee .Data [_fafa ]=_edcd (_agee .Data [_fafa ],^_abbf |_agee .Data [_fafa ],_gaaae );_fafa +=_agee .RowStride ;_acbb +=_bfdc .RowStride ;};};if _bbbgeg {for _dafdd =0;_dafdd < _feea ;_dafdd ++{for _effa =0;_effa < _gfea ;_effa ++{_abbf =_edcd (_bfdc .Data [_daa +_effa ]<<_adae ,_bfdc .Data [_daa +_effa +1]>>_bbff ,_bdecc );_agee .Data [_bcdb +_effa ]|=^_abbf ;};_bcdb +=_agee .RowStride ;_daa +=_bfdc .RowStride ;};};if _eabe {for _dafdd =0;_dafdd < _feea ;_dafdd ++{_abbf =_bfdc .Data [_bagcg ]<<_adae ;if _ggca {_abbf =_edcd (_abbf ,_bfdc .Data [_bagcg +1]>>_bbff ,_bdecc );};_agee .Data [_afffg ]=_edcd (_agee .Data [_afffg ],^_abbf |_agee .Data [_afffg ],_eaee );_afffg +=_agee .RowStride ;_bagcg +=_bfdc .RowStride ;};};case PixNotSrcAndDst :if _ddgd {for _dafdd =0;_dafdd < _feea ;_dafdd ++{if _cafg ==_geedb {_abbf =_bfdc .Data [_acbb ]<<_adae ;if _cbedd {_abbf =_edcd (_abbf ,_bfdc .Data [_acbb +1]>>_bbff ,_bdecc );};}else {_abbf =_bfdc .Data [_acbb ]>>_bbff ;};_agee .Data [_fafa ]=_edcd (_agee .Data [_fafa ],^_abbf &_agee .Data [_fafa ],_gaaae );_fafa +=_agee .RowStride ;_acbb +=_bfdc .RowStride ;};};if _bbbgeg {for _dafdd =0;_dafdd < _feea ;_dafdd ++{for _effa =0;_effa < _gfea ;_effa ++{_abbf =_edcd (_bfdc .Data [_daa +_effa ]<<_adae ,_bfdc .Data [_daa +_effa +1]>>_bbff ,_bdecc );_agee .Data [_bcdb +_effa ]&=^_abbf ;};_bcdb +=_agee .RowStride ;_daa +=_bfdc .RowStride ;};};if _eabe {for _dafdd =0;_dafdd < _feea ;_dafdd ++{_abbf =_bfdc .Data [_bagcg ]<<_adae ;if _ggca {_abbf =_edcd (_abbf ,_bfdc .Data [_bagcg +1]>>_bbff ,_bdecc );};_agee .Data [_afffg ]=_edcd (_agee .Data [_afffg ],^_abbf &_agee .Data [_afffg ],_eaee );_afffg +=_agee .RowStride ;_bagcg +=_bfdc .RowStride ;};};case PixSrcOrNotDst :if _ddgd {for _dafdd =0;_dafdd < _feea ;_dafdd ++{if _cafg ==_geedb {_abbf =_bfdc .Data [_acbb ]<<_adae ;if _cbedd {_abbf =_edcd (_abbf ,_bfdc .Data [_acbb +1]>>_bbff ,_bdecc );};}else {_abbf =_bfdc .Data [_acbb ]>>_bbff ;};_agee .Data [_fafa ]=_edcd (_agee .Data [_fafa ],_abbf |^_agee .Data [_fafa ],_gaaae );_fafa +=_agee .RowStride ;_acbb +=_bfdc .RowStride ;};};if _bbbgeg {for _dafdd =0;_dafdd < _feea ;_dafdd ++{for _effa =0;_effa < _gfea ;_effa ++{_abbf =_edcd (_bfdc .Data [_daa +_effa ]<<_adae ,_bfdc .Data [_daa +_effa +1]>>_bbff ,_bdecc );_agee .Data [_bcdb +_effa ]=_abbf |^_agee .Data [_bcdb +_effa ];};_bcdb +=_agee .RowStride ;_daa +=_bfdc .RowStride ;};};if _eabe {for _dafdd =0;_dafdd < _feea ;_dafdd ++{_abbf =_bfdc .Data [_bagcg ]<<_adae ;if _ggca {_abbf =_edcd (_abbf ,_bfdc .Data [_bagcg +1]>>_bbff ,_bdecc );};_agee .Data [_afffg ]=_edcd (_agee .Data [_afffg ],_abbf |^_agee .Data [_afffg ],_eaee );_afffg +=_agee .RowStride ;_bagcg +=_bfdc .RowStride ;};};case PixSrcAndNotDst :if _ddgd {for _dafdd =0;_dafdd < _feea ;_dafdd ++{if _cafg ==_geedb {_abbf =_bfdc .Data [_acbb ]<<_adae ;if _cbedd {_abbf =_edcd (_abbf ,_bfdc .Data [_acbb +1]>>_bbff ,_bdecc );};}else {_abbf =_bfdc .Data [_acbb ]>>_bbff ;};_agee .Data [_fafa ]=_edcd (_agee .Data [_fafa ],_abbf &^_agee .Data [_fafa ],_gaaae );_fafa +=_agee .RowStride ;_acbb +=_bfdc .RowStride ;};};if _bbbgeg {for _dafdd =0;_dafdd < _feea ;_dafdd ++{for _effa =0;_effa < _gfea ;_effa ++{_abbf =_edcd (_bfdc .Data [_daa +_effa ]<<_adae ,_bfdc .Data [_daa +_effa +1]>>_bbff ,_bdecc );_agee .Data [_bcdb +_effa ]=_abbf &^_agee .Data [_bcdb +_effa ];};_bcdb +=_agee .RowStride ;_daa +=_bfdc .RowStride ;};};if _eabe {for _dafdd =0;_dafdd < _feea ;_dafdd ++{_abbf =_bfdc .Data [_bagcg ]<<_adae ;if _ggca {_abbf =_edcd (_abbf ,_bfdc .Data [_bagcg +1]>>_bbff ,_bdecc );};_agee .Data [_afffg ]=_edcd (_agee .Data [_afffg ],_abbf &^_agee .Data [_afffg ],_eaee );_afffg +=_agee .RowStride ;_bagcg +=_bfdc .RowStride ;};};case PixNotPixSrcOrDst :if _ddgd {for _dafdd =0;_dafdd < _feea ;_dafdd ++{if _cafg ==_geedb {_abbf =_bfdc .Data [_acbb ]<<_adae ;if _cbedd {_abbf =_edcd (_abbf ,_bfdc .Data [_acbb +1]>>_bbff ,_bdecc );};}else {_abbf =_bfdc .Data [_acbb ]>>_bbff ;};_agee .Data [_fafa ]=_edcd (_agee .Data [_fafa ],^(_abbf |_agee .Data [_fafa ]),_gaaae );_fafa +=_agee .RowStride ;_acbb +=_bfdc .RowStride ;};};if _bbbgeg {for _dafdd =0;_dafdd < _feea ;_dafdd ++{for _effa =0;_effa < _gfea ;_effa ++{_abbf =_edcd (_bfdc .Data [_daa +_effa ]<<_adae ,_bfdc .Data [_daa +_effa +1]>>_bbff ,_bdecc );_agee .Data [_bcdb +_effa ]=^(_abbf |_agee .Data [_bcdb +_effa ]);};_bcdb +=_agee .RowStride ;_daa +=_bfdc .RowStride ;};};if _eabe {for _dafdd =0;_dafdd < _feea ;_dafdd ++{_abbf =_bfdc .Data [_bagcg ]<<_adae ;if _ggca {_abbf =_edcd (_abbf ,_bfdc .Data [_bagcg +1]>>_bbff ,_bdecc );};_agee .Data [_afffg ]=_edcd (_agee .Data [_afffg ],^(_abbf |_agee .Data [_afffg ]),_eaee );_afffg +=_agee .RowStride ;_bagcg +=_bfdc .RowStride ;};};case PixNotPixSrcAndDst :if _ddgd {for _dafdd =0;_dafdd < _feea ;_dafdd ++{if _cafg ==_geedb {_abbf =_bfdc .Data [_acbb ]<<_adae ;if _cbedd {_abbf =_edcd (_abbf ,_bfdc .Data [_acbb +1]>>_bbff ,_bdecc );};}else {_abbf =_bfdc .Data [_acbb ]>>_bbff ;};_agee .Data [_fafa ]=_edcd (_agee .Data [_fafa ],^(_abbf &_agee .Data [_fafa ]),_gaaae );_fafa +=_agee .RowStride ;_acbb +=_bfdc .RowStride ;};};if _bbbgeg {for _dafdd =0;_dafdd < _feea ;_dafdd ++{for _effa =0;_effa < _gfea ;_effa ++{_abbf =_edcd (_bfdc .Data [_daa +_effa ]<<_adae ,_bfdc .Data [_daa +_effa +1]>>_bbff ,_bdecc );_agee .Data [_bcdb +_effa ]=^(_abbf &_agee .Data [_bcdb +_effa ]);};_bcdb +=_agee .RowStride ;_daa +=_bfdc .RowStride ;};};if _eabe {for _dafdd =0;_dafdd < _feea ;_dafdd ++{_abbf =_bfdc .Data [_bagcg ]<<_adae ;if _ggca {_abbf =_edcd (_abbf ,_bfdc .Data [_bagcg +1]>>_bbff ,_bdecc );};_agee .Data [_afffg ]=_edcd (_agee .Data [_afffg ],^(_abbf &_agee .Data [_afffg ]),_eaee );_afffg +=_agee .RowStride ;_bagcg +=_bfdc .RowStride ;};};case PixNotPixSrcXorDst :if _ddgd {for _dafdd =0;_dafdd < _feea ;_dafdd ++{if _cafg ==_geedb {_abbf =_bfdc .Data [_acbb ]<<_adae ;if _cbedd {_abbf =_edcd (_abbf ,_bfdc .Data [_acbb +1]>>_bbff ,_bdecc );};}else {_abbf =_bfdc .Data [_acbb ]>>_bbff ;};_agee .Data [_fafa ]=_edcd (_agee .Data [_fafa ],^(_abbf ^_agee .Data [_fafa ]),_gaaae );_fafa +=_agee .RowStride ;_acbb +=_bfdc .RowStride ;};};if _bbbgeg {for _dafdd =0;_dafdd < _feea ;_dafdd ++{for _effa =0;_effa < _gfea ;_effa ++{_abbf =_edcd (_bfdc .Data [_daa +_effa ]<<_adae ,_bfdc .Data [_daa +_effa +1]>>_bbff ,_bdecc );_agee .Data [_bcdb +_effa ]=^(_abbf ^_agee .Data [_bcdb +_effa ]);};_bcdb +=_agee .RowStride ;_daa +=_bfdc .RowStride ;};};if _eabe {for _dafdd =0;_dafdd < _feea ;_dafdd ++{_abbf =_bfdc .Data [_bagcg ]<<_adae ;if _ggca {_abbf =_edcd (_abbf ,_bfdc .Data [_bagcg +1]>>_bbff ,_bdecc );};_agee .Data [_afffg ]=_edcd (_agee .Data [_afffg ],^(_abbf ^_agee .Data [_afffg ]),_eaee );_afffg +=_agee .RowStride ;_bagcg +=_bfdc .RowStride ;};};default:_fg .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_cfga );return _d .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};func _adbdd (_fdab ,_cabc *Bitmap ,_befg ,_dcfag int )(*Bitmap ,error ){const _gaedg ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";if _cabc ==nil {return nil ,_d .Error (_gaedg ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _befg < 1||_dcfag < 1{return nil ,_d .Error (_gaedg ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _befg ==1&&_dcfag ==1{return _bda (_fdab ,_cabc );};if MorphBC ==SymmetricMorphBC {_dbab ,_ffbf :=_ffg (_fdab ,_cabc ,_befg ,_dcfag );if _ffbf !=nil {return nil ,_d .Wrap (_ffbf ,_gaedg ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");};return _dbab ,nil ;};_ccfb :=_gfge (_befg /2,_dcfag /2);_fddg :=8*((_ccfb +7)/8);_dbca ,_fgcg :=_cabc .AddBorder (_fddg ,0);if _fgcg !=nil {return nil ,_d .Wrapf (_fgcg ,_gaedg ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_fddg );};var _defg ,_acca *Bitmap ;if _befg ==1||_dcfag ==1{_cead :=SelCreateBrick (_dcfag ,_befg ,_dcfag /2,_befg /2,SelHit );_defg ,_fgcg =_aceb (nil ,_dbca ,_cead );if _fgcg !=nil {return nil ,_d .Wrap (_fgcg ,_gaedg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};}else {_fcd :=SelCreateBrick (1,_befg ,0,_befg /2,SelHit );_gffdc ,_edagf :=_cbbd (nil ,_dbca ,_fcd );if _edagf !=nil {return nil ,_d .Wrap (_edagf ,_gaedg ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");};_gefd :=SelCreateBrick (_dcfag ,1,_dcfag /2,0,SelHit );_defg ,_edagf =_cbbd (nil ,_gffdc ,_gefd );if _edagf !=nil {return nil ,_d .Wrap (_edagf ,_gaedg ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_edagf =_agdb (_gffdc ,_defg ,_fcd );_edagf !=nil {return nil ,_d .Wrap (_edagf ,_gaedg ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_edagf =_agdb (_defg ,_gffdc ,_gefd );_edagf !=nil {return nil ,_d .Wrap (_edagf ,_gaedg ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");};};if _acca ,_fgcg =_defg .RemoveBorder (_fddg );_fgcg !=nil {return nil ,_d .Wrap (_fgcg ,_gaedg ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _fdab ==nil {return _acca ,nil ;};if _ ,_fgcg =_bda (_fdab ,_acca );_fgcg !=nil {return nil ,_fgcg ;};return _fdab ,nil ;};var _abcdc =[5]int {1,2,3,0,4};func _aed (_cgda ,_fdag *Bitmap ,_bdgf ,_gaff int )(*Bitmap ,error ){const _aedc ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";if _fdag ==nil {return nil ,_d .Error (_aedc ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _bdgf < 1&&_gaff < 1{return nil ,_d .Error (_aedc ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");};if _bdgf ==1&&_gaff ==1{return _fdag .Copy (),nil ;};if _bdgf ==1||_gaff ==1{var _gebd error ;_bgb :=SelCreateBrick (_gaff ,_bdgf ,_gaff /2,_bdgf /2,SelHit );_cgda ,_gebd =_feda (_cgda ,_fdag ,_bgb );if _gebd !=nil {return nil ,_d .Wrap (_gebd ,_aedc ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _cgda ,nil ;};_cggf :=SelCreateBrick (1,_bdgf ,0,_bdgf /2,SelHit );_bcce :=SelCreateBrick (_gaff ,1,_gaff /2,0,SelHit );_bcbbc ,_dffb :=_agdb (nil ,_fdag ,_cggf );if _dffb !=nil {return nil ,_d .Wrap (_dffb ,_aedc ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};_cgda ,_dffb =_agdb (_cgda ,_bcbbc ,_bcce );if _dffb !=nil {return nil ,_d .Wrap (_dffb ,_aedc ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_dffb =_cbbd (_bcbbc ,_cgda ,_cggf );if _dffb !=nil {return nil ,_d .Wrap (_dffb ,_aedc ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};_ ,_dffb =_cbbd (_cgda ,_bcbbc ,_bcce );if _dffb !=nil {return nil ,_d .Wrap (_dffb ,_aedc ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _cgda ,nil ;};func (_abfb *Bitmaps )SortByHeight (){_eabfg :=(*byHeight )(_abfb );_g .Sort (_eabfg )};func _bbbc (_fba ,_gde *Bitmap ,_edc int ,_dfa []byte ,_ffeb int )(_dab error ){const _aba ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";var (_gdf ,_gec ,_dbdg ,_cae ,_gabg ,_cfd ,_fad ,_dfe int ;_gb ,_cge ,_ddb ,_bbf uint32 ;_dage ,_gdec byte ;_eda uint16 ;);_faab :=make ([]byte ,4);_bec :=make ([]byte ,4);for _dbdg =0;_dbdg < _fba .Height -1;_dbdg ,_cae =_dbdg +2,_cae +1{_gdf =_dbdg *_fba .RowStride ;_gec =_cae *_gde .RowStride ;for _gabg ,_cfd =0,0;_gabg < _ffeb ;_gabg ,_cfd =_gabg +4,_cfd +1{for _fad =0;_fad < 4;_fad ++{_dfe =_gdf +_gabg +_fad ;if _dfe <=len (_fba .Data )-1&&_dfe < _gdf +_fba .RowStride {_faab [_fad ]=_fba .Data [_dfe ];}else {_faab [_fad ]=0x00;};_dfe =_gdf +_fba .RowStride +_gabg +_fad ;if _dfe <=len (_fba .Data )-1&&_dfe < _gdf +(2*_fba .RowStride ){_bec [_fad ]=_fba .Data [_dfe ];}else {_bec [_fad ]=0x00;};};_gb =_ff .BigEndian .Uint32 (_faab );_cge =_ff .BigEndian .Uint32 (_bec );_ddb =_gb &_cge ;_ddb |=_ddb <<1;_bbf =_gb |_cge ;_bbf &=_bbf <<1;_cge =_ddb |_bbf ;_cge &=0xaaaaaaaa;_gb =_cge |(_cge <<7);_dage =byte (_gb >>24);_gdec =byte ((_gb >>8)&0xff);_dfe =_gec +_cfd ;if _dfe +1==len (_gde .Data )-1||_dfe +1>=_gec +_gde .RowStride {if _dab =_gde .SetByte (_dfe ,_dfa [_dage ]);_dab !=nil {return _d .Wrapf (_dab ,_aba ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dfe );};}else {_eda =(uint16 (_dfa [_dage ])<<8)|uint16 (_dfa [_gdec ]);if _dab =_gde .setTwoBytes (_dfe ,_eda );_dab !=nil {return _d .Wrapf (_dab ,_aba ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dfe );};_cfd ++;};};};return nil ;};func _ffbfc (_dbde *Bitmap ,_dedg *_cc .Stack ,_gcad ,_cgfa int )(_bgfa *_ge .Rectangle ,_ecfc error ){const _gafa ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _dbde ==nil {return nil ,_d .Error (_gafa ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _dedg ==nil {return nil ,_d .Error (_gafa ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_fefd ,_eaag :=_dbde .Width ,_dbde .Height ;_adad :=_fefd -1;_defd :=_eaag -1;if _gcad < 0||_gcad > _adad ||_cgfa < 0||_cgfa > _defd ||!_dbde .GetPixel (_gcad ,_cgfa ){return nil ,nil ;};var _fced *_ge .Rectangle ;_fced ,_ecfc =Rect (100000,100000,0,0);if _ecfc !=nil {return nil ,_d .Wrap (_ecfc ,_gafa ,"");};if _ecfc =_bafc (_dedg ,_gcad ,_gcad ,_cgfa ,1,_defd ,_fced );_ecfc !=nil {return nil ,_d .Wrap (_ecfc ,_gafa ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _ecfc =_bafc (_dedg ,_gcad ,_gcad ,_cgfa +1,-1,_defd ,_fced );_ecfc !=nil {return nil ,_d .Wrap (_ecfc ,_gafa ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_fced .Min .X ,_fced .Max .X =_gcad ,_gcad ;_fced .Min .Y ,_fced .Max .Y =_cgfa ,_cgfa ;var (_ddbgc *fillSegment ;_fefae int ;);for _dedg .Len ()> 0{if _ddbgc ,_ecfc =_gfbb (_dedg );_ecfc !=nil {return nil ,_d .Wrap (_ecfc ,_gafa ,"");};_cgfa =_ddbgc ._fbfbc ;for _gcad =_ddbgc ._dbef ;_gcad >=0&&_dbde .GetPixel (_gcad ,_cgfa );_gcad --{if _ecfc =_dbde .SetPixel (_gcad ,_cgfa ,0);_ecfc !=nil {return nil ,_d .Wrap (_ecfc ,_gafa ,"");};};if _gcad >=_ddbgc ._dbef {for _gcad ++;_gcad <=_ddbgc ._ddac &&_gcad <=_adad &&!_dbde .GetPixel (_gcad ,_cgfa );_gcad ++{};_fefae =_gcad ;if !(_gcad <=_ddbgc ._ddac &&_gcad <=_adad ){continue ;};}else {_fefae =_gcad +1;if _fefae < _ddbgc ._dbef -1{if _ecfc =_bafc (_dedg ,_fefae ,_ddbgc ._dbef -1,_ddbgc ._fbfbc ,-_ddbgc ._fbadd ,_defd ,_fced );_ecfc !=nil {return nil ,_d .Wrap (_ecfc ,_gafa ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");};};_gcad =_ddbgc ._dbef +1;};for {for ;_gcad <=_adad &&_dbde .GetPixel (_gcad ,_cgfa );_gcad ++{if _ecfc =_dbde .SetPixel (_gcad ,_cgfa ,0);_ecfc !=nil {return nil ,_d .Wrap (_ecfc ,_gafa ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _ecfc =_bafc (_dedg ,_fefae ,_gcad -1,_ddbgc ._fbfbc ,_ddbgc ._fbadd ,_defd ,_fced );_ecfc !=nil {return nil ,_d .Wrap (_ecfc ,_gafa ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _gcad > _ddbgc ._ddac +1{if _ecfc =_bafc (_dedg ,_ddbgc ._ddac +1,_gcad -1,_ddbgc ._fbfbc ,-_ddbgc ._fbadd ,_defd ,_fced );_ecfc !=nil {return nil ,_d .Wrap (_ecfc ,_gafa ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};for _gcad ++;_gcad <=_ddbgc ._ddac &&_gcad <=_adad &&!_dbde .GetPixel (_gcad ,_cgfa );_gcad ++{};_fefae =_gcad ;if !(_gcad <=_ddbgc ._ddac &&_gcad <=_adad ){break ;};};};_fced .Max .X ++;_fced .Max .Y ++;return _fced ,nil ;};type byWidth Bitmaps ;func (_afcbd *Bitmaps )HeightSorter ()func (_acgd ,_bfaa int )bool {return func (_fgbe ,_ccaa int )bool {_eagb :=_afcbd .Values [_fgbe ].Height < _afcbd .Values [_ccaa ].Height ;_fg .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_afcbd .Values [_fgbe ].Height ,_afcbd .Values [_ccaa ].Height ,_eagb );return _eagb ;};};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);func (_gfde *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _gggg ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_gfde .IntSlice .Size (){return 0,_d .Errorf (_gggg ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );};return int (_gfde .YAtIndex (i )),nil ;};func (_dgb *Bitmap )setEightPartlyBytes (_bceed ,_adgb int ,_ecdgf uint64 )(_dcf error ){var (_feag byte ;_fdbc int ;);const _abe ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";for _fdaaf :=1;_fdaaf <=_adgb ;_fdaaf ++{_fdbc =64-_fdaaf *8;_feag =byte (_ecdgf >>uint (_fdbc )&0xff);_fg .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_feag ,_bceed ,_bceed +_fdaaf -1,_adgb ,_fdbc );if _dcf =_dgb .SetByte (_bceed +_fdaaf -1,_feag );_dcf !=nil {return _d .Wrap (_dcf ,_abe ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_dfb :=_dgb .RowStride *8-_dgb .Width ;if _dfb ==0{return nil ;};_fdbc -=8;_feag =byte (_ecdgf >>uint (_fdbc )&0xff)<<uint (_dfb );if _dcf =_dgb .SetByte (_bceed +_adgb ,_feag );_dcf !=nil {return _d .Wrap (_dcf ,_abe ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func TstTSymbol (t *_dc .T ,scale ...int )*Bitmap {_daba ,_fddb :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_c .NoError (t ,_fddb );return TstGetScaledSymbol (t ,_daba ,scale ...);};func TstWordBitmapWithSpaces (t *_dc .T ,scale ...int )*Bitmap {_bgbbc :=1;if len (scale )> 0{_bgbbc =scale [0];};_gfaef :=3;_ccfc :=9+7+15+2*_gfaef +2*_gfaef ;_egbbc :=5+_gfaef +5+2*_gfaef ;_fbdd :=New (_ccfc *_bgbbc ,_egbbc *_bgbbc );_bfaf :=&Bitmaps {};var _ddcef *int ;_gfaef *=_bgbbc ;_ecdde :=_gfaef ;_ddcef =&_ecdde ;_eagcd :=_gfaef ;_abgcb :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_bfaf ,_abgcb ,_ddcef ,_eagcd ,1*_bgbbc );_abgcb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bfaf ,_abgcb ,_ddcef ,_eagcd ,_gfaef );_abgcb =TstISymbol (t ,scale ...);TstAddSymbol (t ,_bfaf ,_abgcb ,_ddcef ,_eagcd ,1*_bgbbc );_abgcb =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_bfaf ,_abgcb ,_ddcef ,_eagcd ,_gfaef );_abgcb =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bfaf ,_abgcb ,_ddcef ,_eagcd ,1*_bgbbc );_abgcb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bfaf ,_abgcb ,_ddcef ,_eagcd ,1*_bgbbc );_abgcb =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_bfaf ,_abgcb ,_ddcef ,_eagcd ,0);*_ddcef =_gfaef ;_eagcd =5*_bgbbc +_gfaef ;_abgcb =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bfaf ,_abgcb ,_ddcef ,_eagcd ,1*_bgbbc );_abgcb =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bfaf ,_abgcb ,_ddcef ,_eagcd ,_gfaef );_abgcb =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bfaf ,_abgcb ,_ddcef ,_eagcd ,1*_bgbbc );_abgcb =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bfaf ,_abgcb ,_ddcef ,_eagcd ,1*_bgbbc );_abgcb =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_bfaf ,_abgcb ,_ddcef ,_eagcd ,1*_bgbbc );_abgcb =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bfaf ,_abgcb ,_ddcef ,_eagcd ,1*_bgbbc );_abgcb =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bfaf ,_abgcb ,_ddcef ,_eagcd ,0);TstWriteSymbols (t ,_bfaf ,_fbdd );return _fbdd ;};func _bcf (_bba *Bitmap ,_egb *Bitmap ,_aaf int )(_bbe error ){const _daga ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _aaf {case 2:_bbe =_gd (_bba ,_egb );case 4:_bbe =_ce (_bba ,_egb );case 8:_bbe =_ef (_bba ,_egb );default:return _d .Error (_daga ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");};if _bbe !=nil {_bbe =_d .Wrap (_bbe ,_daga ,"");};return _bbe ;};func (_gdfd *Bitmap )GetChocolateData ()[]byte {if _gdfd .Color ==Vanilla {_gdfd .inverseData ();};return _gdfd .Data ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _fefa ,_fbc int ;_cbd :=src .RowStride -1;if x < 0{_fbc =-x ;x =0;}else if x +src .Width > dst .Width {_cbd -=src .Width +x -dst .Width ;};if y < 0{_fefa =-y ;y =0;_fbc +=src .RowStride ;_cbd +=src .RowStride ;}else if y +src .Height > dst .Height {_fefa =src .Height +y -dst .Height ;};var (_ddde int ;_ccgf error ;);_geg :=x &0x07;_edgg :=8-_geg ;_gfc :=src .Width &0x07;_cacdc :=_edgg -_gfc ;_bdae :=_edgg &0x07!=0;_bcgb :=src .Width <=((_cbd -_fbc )<<3)+_edgg ;_efbb :=dst .GetByteIndex (x ,y );_cecd :=_fefa +dst .Height ;if src .Height > _cecd {_ddde =_cecd ;}else {_ddde =src .Height ;};switch {case !_bdae :_ccgf =_ffbb (src ,dst ,_fefa ,_ddde ,_efbb ,_fbc ,_cbd ,op );case _bcgb :_ccgf =_efcg (src ,dst ,_fefa ,_ddde ,_efbb ,_fbc ,_cbd ,_cacdc ,_geg ,_edgg ,op );default:_ccgf =_cdaf (src ,dst ,_fefa ,_ddde ,_efbb ,_fbc ,_cbd ,_cacdc ,_geg ,_edgg ,op ,_gfc );};return _ccgf ;};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func TstESymbol (t *_dc .T ,scale ...int )*Bitmap {_ddcd ,_cdgf :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_c .NoError (t ,_cdgf );return TstGetScaledSymbol (t ,_ddcd ,scale ...);};var MorphBC BoundaryCondition ;func MakePixelSumTab8 ()[]int {return _adff ()};func (_gfaec *BitmapsArray )AddBitmaps (bm *Bitmaps ){_gfaec .Values =append (_gfaec .Values ,bm )};func _aceb (_dbcde ,_dbbde *Bitmap ,_gdgc *Selection )(*Bitmap ,error ){const _afgd ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";var _eecf error ;if _dbcde ,_eecf =_ccdf (_dbcde ,_dbbde ,_gdgc );_eecf !=nil {return nil ,_eecf ;};_fgca ,_eecf :=_cbbd (nil ,_dbbde ,_gdgc );if _eecf !=nil {return nil ,_d .Wrap (_eecf ,_afgd ,"");};if _ ,_eecf =_agdb (_dbcde ,_fgca ,_gdgc );_eecf !=nil {return nil ,_d .Wrap (_eecf ,_afgd ,"");};return _dbcde ,nil ;};func (_cee *Bitmap )resizeImageData (_bef *Bitmap )error {if _bef ==nil {return _d .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _cee .SizesEqual (_bef ){return nil ;};_cee .Data =make ([]byte ,len (_bef .Data ));_cee .Width =_bef .Width ;_cee .Height =_bef .Height ;_cee .RowStride =_bef .RowStride ;return nil ;};func (_efc *Bitmap )And (s *Bitmap )(_egbf *Bitmap ,_gdc error ){const _acb ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _efc ==nil {return nil ,_d .Error (_acb ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");};if s ==nil {return nil ,_d .Error (_acb ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_efc .SizesEqual (s ){_fg .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_acb );};if _egbf ,_gdc =_bda (_egbf ,_efc );_gdc !=nil {return nil ,_d .Wrap (_gdc ,_acb ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _gdc =_egbf .RasterOperation (0,0,_egbf .Width ,_egbf .Height ,PixSrcAndDst ,s ,0,0);_gdc !=nil {return nil ,_d .Wrap (_gdc ,_acb ,"");};return _egbf ,nil ;};type MorphOperation int ;func (_efafc *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _bfaga (_efafc ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func _gfge (_ddbe ,_ccbb int )int {if _ddbe > _ccbb {return _ddbe ;};return _ccbb ;};func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _faef ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_gdea :=_efa (width ,height );_gdea .Data =data ;if len (data )< height *_gdea .RowStride {return nil ,_d .Errorf (_faef ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_gdea .RowStride );};return _gdea ,nil ;};func (_ffa *Bitmap )SetByte (index int ,v byte )error {if index > len (_ffa .Data )-1||index < 0{return _d .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );};_ffa .Data [index ]=v ;return nil ;};const (SelDontCare SelectionValue =iota ;SelHit ;SelMiss ;);func _fgcd (_bfeb *Bitmap ,_cccb *Bitmap ,_eacgd int )(_bbgcf error ){const _dbbed ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";_ebebc :=_bcde (_bfeb .Height ,_cccb .Height );_bgaa :=_bcde (_bfeb .RowStride ,_cccb .RowStride );switch _eacgd {case 4:_bbgcf =_dbbeg (_bfeb ,_cccb ,_ebebc ,_bgaa );case 8:_bbgcf =_dfeg (_bfeb ,_cccb ,_ebebc ,_bgaa );default:return _d .Errorf (_dbbed ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_eacgd );};if _bbgcf !=nil {return _d .Wrap (_bbgcf ,_dbbed ,"");};return nil ;};func _deb (_bbbge *Bitmap ,_eeae ,_fgdc ,_fdbd ,_dcdb int ,_cafb RasterOperator ,_edde *Bitmap ,_ecfb ,_ggbb int )error {var (_fbea byte ;_cdff int ;_cbcbg int ;_beee ,_efabf int ;_fgdb ,_afbc int ;);_dbeg :=_fdbd >>3;_fbga :=_fdbd &7;if _fbga > 0{_fbea =_ddeae [_fbga ];};_cdff =_edde .RowStride *_ggbb +(_ecfb >>3);_cbcbg =_bbbge .RowStride *_fgdc +(_eeae >>3);switch _cafb {case PixSrc :for _fgdb =0;_fgdb < _dcdb ;_fgdb ++{_beee =_cdff +_fgdb *_edde .RowStride ;_efabf =_cbcbg +_fgdb *_bbbge .RowStride ;for _afbc =0;_afbc < _dbeg ;_afbc ++{_bbbge .Data [_efabf ]=_edde .Data [_beee ];_efabf ++;_beee ++;};if _fbga > 0{_bbbge .Data [_efabf ]=_edcd (_bbbge .Data [_efabf ],_edde .Data [_beee ],_fbea );};};case PixNotSrc :for _fgdb =0;_fgdb < _dcdb ;_fgdb ++{_beee =_cdff +_fgdb *_edde .RowStride ;_efabf =_cbcbg +_fgdb *_bbbge .RowStride ;for _afbc =0;_afbc < _dbeg ;_afbc ++{_bbbge .Data [_efabf ]=^(_edde .Data [_beee ]);_efabf ++;_beee ++;};if _fbga > 0{_bbbge .Data [_efabf ]=_edcd (_bbbge .Data [_efabf ],^_edde .Data [_beee ],_fbea );};};case PixSrcOrDst :for _fgdb =0;_fgdb < _dcdb ;_fgdb ++{_beee =_cdff +_fgdb *_edde .RowStride ;_efabf =_cbcbg +_fgdb *_bbbge .RowStride ;for _afbc =0;_afbc < _dbeg ;_afbc ++{_bbbge .Data [_efabf ]|=_edde .Data [_beee ];_efabf ++;_beee ++;};if _fbga > 0{_bbbge .Data [_efabf ]=_edcd (_bbbge .Data [_efabf ],_edde .Data [_beee ]|_bbbge .Data [_efabf ],_fbea );};};case PixSrcAndDst :for _fgdb =0;_fgdb < _dcdb ;_fgdb ++{_beee =_cdff +_fgdb *_edde .RowStride ;_efabf =_cbcbg +_fgdb *_bbbge .RowStride ;for _afbc =0;_afbc < _dbeg ;_afbc ++{_bbbge .Data [_efabf ]&=_edde .Data [_beee ];_efabf ++;_beee ++;};if _fbga > 0{_bbbge .Data [_efabf ]=_edcd (_bbbge .Data [_efabf ],_edde .Data [_beee ]&_bbbge .Data [_efabf ],_fbea );};};case PixSrcXorDst :for _fgdb =0;_fgdb < _dcdb ;_fgdb ++{_beee =_cdff +_fgdb *_edde .RowStride ;_efabf =_cbcbg +_fgdb *_bbbge .RowStride ;for _afbc =0;_afbc < _dbeg ;_afbc ++{_bbbge .Data [_efabf ]^=_edde .Data [_beee ];_efabf ++;_beee ++;};if _fbga > 0{_bbbge .Data [_efabf ]=_edcd (_bbbge .Data [_efabf ],_edde .Data [_beee ]^_bbbge .Data [_efabf ],_fbea );};};case PixNotSrcOrDst :for _fgdb =0;_fgdb < _dcdb ;_fgdb ++{_beee =_cdff +_fgdb *_edde .RowStride ;_efabf =_cbcbg +_fgdb *_bbbge .RowStride ;for _afbc =0;_afbc < _dbeg ;_afbc ++{_bbbge .Data [_efabf ]|=^(_edde .Data [_beee ]);_efabf ++;_beee ++;};if _fbga > 0{_bbbge .Data [_efabf ]=_edcd (_bbbge .Data [_efabf ],^(_edde .Data [_beee ])|_bbbge .Data [_efabf ],_fbea );};};case PixNotSrcAndDst :for _fgdb =0;_fgdb < _dcdb ;_fgdb ++{_beee =_cdff +_fgdb *_edde .RowStride ;_efabf =_cbcbg +_fgdb *_bbbge .RowStride ;for _afbc =0;_afbc < _dbeg ;_afbc ++{_bbbge .Data [_efabf ]&=^(_edde .Data [_beee ]);_efabf ++;_beee ++;};if _fbga > 0{_bbbge .Data [_efabf ]=_edcd (_bbbge .Data [_efabf ],^(_edde .Data [_beee ])&_bbbge .Data [_efabf ],_fbea );};};case PixSrcOrNotDst :for _fgdb =0;_fgdb < _dcdb ;_fgdb ++{_beee =_cdff +_fgdb *_edde .RowStride ;_efabf =_cbcbg +_fgdb *_bbbge .RowStride ;for _afbc =0;_afbc < _dbeg ;_afbc ++{_bbbge .Data [_efabf ]=_edde .Data [_beee ]|^(_bbbge .Data [_efabf ]);_efabf ++;_beee ++;};if _fbga > 0{_bbbge .Data [_efabf ]=_edcd (_bbbge .Data [_efabf ],_edde .Data [_beee ]|^(_bbbge .Data [_efabf ]),_fbea );};};case PixSrcAndNotDst :for _fgdb =0;_fgdb < _dcdb ;_fgdb ++{_beee =_cdff +_fgdb *_edde .RowStride ;_efabf =_cbcbg +_fgdb *_bbbge .RowStride ;for _afbc =0;_afbc < _dbeg ;_afbc ++{_bbbge .Data [_efabf ]=_edde .Data [_beee ]&^(_bbbge .Data [_efabf ]);_efabf ++;_beee ++;};if _fbga > 0{_bbbge .Data [_efabf ]=_edcd (_bbbge .Data [_efabf ],_edde .Data [_beee ]&^(_bbbge .Data [_efabf ]),_fbea );};};case PixNotPixSrcOrDst :for _fgdb =0;_fgdb < _dcdb ;_fgdb ++{_beee =_cdff +_fgdb *_edde .RowStride ;_efabf =_cbcbg +_fgdb *_bbbge .RowStride ;for _afbc =0;_afbc < _dbeg ;_afbc ++{_bbbge .Data [_efabf ]=^(_edde .Data [_beee ]|_bbbge .Data [_efabf ]);_efabf ++;_beee ++;};if _fbga > 0{_bbbge .Data [_efabf ]=_edcd (_bbbge .Data [_efabf ],^(_edde .Data [_beee ]|_bbbge .Data [_efabf ]),_fbea );};};case PixNotPixSrcAndDst :for _fgdb =0;_fgdb < _dcdb ;_fgdb ++{_beee =_cdff +_fgdb *_edde .RowStride ;_efabf =_cbcbg +_fgdb *_bbbge .RowStride ;for _afbc =0;_afbc < _dbeg ;_afbc ++{_bbbge .Data [_efabf ]=^(_edde .Data [_beee ]&_bbbge .Data [_efabf ]);_efabf ++;_beee ++;};if _fbga > 0{_bbbge .Data [_efabf ]=_edcd (_bbbge .Data [_efabf ],^(_edde .Data [_beee ]&_bbbge .Data [_efabf ]),_fbea );};};case PixNotPixSrcXorDst :for _fgdb =0;_fgdb < _dcdb ;_fgdb ++{_beee =_cdff +_fgdb *_edde .RowStride ;_efabf =_cbcbg +_fgdb *_bbbge .RowStride ;for _afbc =0;_afbc < _dbeg ;_afbc ++{_bbbge .Data [_efabf ]=^(_edde .Data [_beee ]^_bbbge .Data [_efabf ]);_efabf ++;_beee ++;};if _fbga > 0{_bbbge .Data [_efabf ]=_edcd (_bbbge .Data [_efabf ],^(_edde .Data [_beee ]^_bbbge .Data [_efabf ]),_fbea );};};default:_fg .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_cafb );return _d .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};type CombinationOperator int ;func (_bcfg *Bitmap )ClipRectangle (box *_ge .Rectangle )(_gdeab *Bitmap ,_cagc *_ge .Rectangle ,_gcdg error ){const _fff ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,nil ,_d .Error (_fff ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_fcab ,_fcg :=_bcfg .Width ,_bcfg .Height ;_gcg :=_ge .Rect (0,0,_fcab ,_fcg );if !box .Overlaps (_gcg ){return nil ,nil ,_d .Error (_fff ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");};_bee :=box .Intersect (_gcg );_gca ,_adc :=_bee .Min .X ,_bee .Min .Y ;_eac ,_gbd :=_bee .Dx (),_bee .Dy ();_gdeab =New (_eac ,_gbd );_gdeab .Text =_bcfg .Text ;if _gcdg =_gdeab .RasterOperation (0,0,_eac ,_gbd ,PixSrc ,_bcfg ,_gca ,_adc );_gcdg !=nil {return nil ,nil ,_d .Wrap (_gcdg ,_fff ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");};_cagc =&_bee ;return _gdeab ,_cagc ,nil ;};func _ba (_egf *Bitmap ,_cgb ,_abb int )(*Bitmap ,error ){const _af ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";if _egf ==nil {return nil ,_d .Error (_af ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _cgb <=0||_abb <=0{return nil ,_d .Error (_af ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _cgb ==_abb {if _cgb ==1{_gf ,_bbc :=_bda (nil ,_egf );if _bbc !=nil {return nil ,_d .Wrap (_bbc ,_af ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _gf ,nil ;};if _cgb ==2||_cgb ==4||_cgb ==8{_gga ,_df :=_dg (_egf ,_cgb );if _df !=nil {return nil ,_d .Wrap (_df ,_af ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};return _gga ,nil ;};};_efd :=_cgb *_egf .Width ;_fab :=_abb *_egf .Height ;_fabb :=New (_efd ,_fab );_ffe :=_fabb .RowStride ;var (_dde ,_dga ,_edgf ,_ee ,_ggg int ;_fdd byte ;_age error ;);for _dga =0;_dga < _egf .Height ;_dga ++{_dde =_abb *_dga *_ffe ;for _edgf =0;_edgf < _egf .Width ;_edgf ++{if _cgba :=_egf .GetPixel (_edgf ,_dga );_cgba {_ggg =_cgb *_edgf ;for _ee =0;_ee < _cgb ;_ee ++{_fabb .setBit (_dde *8+_ggg +_ee );};};};for _ee =1;_ee < _abb ;_ee ++{_gae :=_dde +_ee *_ffe ;for _ccb :=0;_ccb < _ffe ;_ccb ++{if _fdd ,_age =_fabb .GetByte (_dde +_ccb );_age !=nil {return nil ,_d .Wrapf (_age ,_af ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_ee );};if _age =_fabb .SetByte (_gae +_ccb ,_fdd );_age !=nil {return nil ,_d .Wrap (_age ,_af ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};};};};return _fabb ,nil ;};func _eeg ()(_fda [256]uint16 ){for _dgd :=0;_dgd < 256;_dgd ++{if _dgd &0x01!=0{_fda [_dgd ]|=0x3;};if _dgd &0x02!=0{_fda [_dgd ]|=0xc;};if _dgd &0x04!=0{_fda [_dgd ]|=0x30;};if _dgd &0x08!=0{_fda [_dgd ]|=0xc0;};if _dgd &0x10!=0{_fda [_dgd ]|=0x300;};if _dgd &0x20!=0{_fda [_dgd ]|=0xc00;};if _dgd &0x40!=0{_fda [_dgd ]|=0x3000;};if _dgd &0x80!=0{_fda [_dgd ]|=0xc000;};};return _fda ;};var _dcba [256]uint8 ;func (_cef *Bitmap )removeBorderGeneral (_fcbd ,_bgaee ,_bedb ,_egag int )(*Bitmap ,error ){const _cbcg ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _fcbd < 0||_bgaee < 0||_bedb < 0||_egag < 0{return nil ,_d .Error (_cbcg ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_fefc ,_ccac :=_cef .Width ,_cef .Height ;_gee :=_fefc -_fcbd -_bgaee ;_egfd :=_ccac -_bedb -_egag ;if _gee <=0{return nil ,_d .Errorf (_cbcg ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_gee );};if _egfd <=0{return nil ,_d .Errorf (_cbcg ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_egfd );};_bcee :=New (_gee ,_egfd );_bcee .Color =_cef .Color ;_bageb :=_bcee .RasterOperation (0,0,_gee ,_egfd ,PixSrc ,_cef ,_fcbd ,_bedb );if _bageb !=nil {return nil ,_d .Wrap (_bageb ,_cbcg ,"");};return _bcee ,nil ;};func (_efce *byWidth )Less (i ,j int )bool {return _efce .Values [i ].Width < _efce .Values [j ].Width };func (_abd *Bitmap )nextOnPixel (_ebgd ,_dce int )(_bde _ge .Point ,_fdbg bool ,_ggab error ){const _ccbd ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";_bde ,_fdbg ,_ggab =_abd .nextOnPixelLow (_abd .Width ,_abd .Height ,_abd .RowStride ,_ebgd ,_dce );if _ggab !=nil {return _bde ,false ,_d .Wrap (_ggab ,_ccbd ,"");};return _bde ,_fdbg ,nil ;};func _bbb ()(_cbc [256]uint64 ){for _gaed :=0;_gaed < 256;_gaed ++{if _gaed &0x01!=0{_cbc [_gaed ]|=0xff;};if _gaed &0x02!=0{_cbc [_gaed ]|=0xff00;};if _gaed &0x04!=0{_cbc [_gaed ]|=0xff0000;};if _gaed &0x08!=0{_cbc [_gaed ]|=0xff000000;};if _gaed &0x10!=0{_cbc [_gaed ]|=0xff00000000;};if _gaed &0x20!=0{_cbc [_gaed ]|=0xff0000000000;};if _gaed &0x40!=0{_cbc [_gaed ]|=0xff000000000000;};if _gaed &0x80!=0{_cbc [_gaed ]|=0xff00000000000000;};};return _cbc ;};type Color int ;func _efcg (_aaeg ,_ebd *Bitmap ,_gaea ,_ceef ,_dbbf ,_feaf ,_ebgf ,_efbd ,_eeca ,_gdegg int ,_fcgb CombinationOperator )error {var _dfbf int ;_bcec :=func (){_dfbf ++;_dbbf +=_ebd .RowStride ;_feaf +=_aaeg .RowStride ;_ebgf +=_aaeg .RowStride };for _dfbf =_gaea ;_dfbf < _ceef ;_bcec (){var _dccef uint16 ;_agdf :=_dbbf ;for _ggbf :=_feaf ;_ggbf <=_ebgf ;_ggbf ++{_dacf ,_dbbd :=_ebd .GetByte (_agdf );if _dbbd !=nil {return _dbbd ;};_agfc ,_dbbd :=_aaeg .GetByte (_ggbf );if _dbbd !=nil {return _dbbd ;};_dccef =(_dccef |uint16 (_agfc ))<<uint (_gdegg );_agfc =byte (_dccef >>8);if _ggbf ==_ebgf {_agfc =_fgdg (uint (_efbd ),_agfc );};if _dbbd =_ebd .SetByte (_agdf ,_gafc (_dacf ,_agfc ,_fcgb ));_dbbd !=nil {return _dbbd ;};_agdf ++;_dccef <<=uint (_eeca );};};return nil ;};func TstNSymbol (t *_dc .T ,scale ...int )*Bitmap {_gdgbf ,_cbgc :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});_c .NoError (t ,_cbgc );return TstGetScaledSymbol (t ,_gdgbf ,scale ...);};func (_ecfe *Bitmaps )SortByWidth (){_gggb :=(*byWidth )(_ecfe );_g .Sort (_gggb )};const _fdge =5000;func (_bbbd *Bitmap )ToImage ()_ge .Image {_bfg ,_feec :=_f .NewImage (_bbbd .Width ,_bbbd .Height ,1,1,_bbbd .Data ,nil ,nil );if _feec !=nil {_fg .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_feec );};return _bfg ;};func _ddeb (_gfga *Bitmap ,_fegd ,_ccce ,_bfdeb ,_gbaa int ,_deef RasterOperator ){if _fegd < 0{_bfdeb +=_fegd ;_fegd =0;};_cdgc :=_fegd +_bfdeb -_gfga .Width ;if _cdgc > 0{_bfdeb -=_cdgc ;};if _ccce < 0{_gbaa +=_ccce ;_ccce =0;};_acad :=_ccce +_gbaa -_gfga .Height ;if _acad > 0{_gbaa -=_acad ;};if _bfdeb <=0||_gbaa <=0{return ;};if (_fegd &7)==0{_agbe (_gfga ,_fegd ,_ccce ,_bfdeb ,_gbaa ,_deef );}else {_afcf (_gfga ,_fegd ,_ccce ,_bfdeb ,_gbaa ,_deef );};};func (_cgde *Selection )findMaxTranslations ()(_fbcfc ,_ceefg ,_cbfb ,_ecff int ){for _fafb :=0;_fafb < _cgde .Height ;_fafb ++{for _abfd :=0;_abfd < _cgde .Width ;_abfd ++{if _cgde .Data [_fafb ][_abfd ]==SelHit {_fbcfc =_gfge (_fbcfc ,_cgde .Cx -_abfd );_ceefg =_gfge (_ceefg ,_cgde .Cy -_fafb );_cbfb =_gfge (_cbfb ,_abfd -_cgde .Cx );_ecff =_gfge (_ecff ,_fafb -_cgde .Cy );};};};return _fbcfc ,_ceefg ,_cbfb ,_ecff ;};func _adff ()[]int {_cafe :=make ([]int ,256);for _bacb :=0;_bacb <=0xff;_bacb ++{_ffaf :=byte (_bacb );_cafe [_ffaf ]=int (_ffaf &0x1)+(int (_ffaf >>1)&0x1)+(int (_ffaf >>2)&0x1)+(int (_ffaf >>3)&0x1)+(int (_ffaf >>4)&0x1)+(int (_ffaf >>5)&0x1)+(int (_ffaf >>6)&0x1)+(int (_ffaf >>7)&0x1);};return _cafe ;};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func (_egdaf Points )Get (i int )(Point ,error ){if i > len (_egdaf )-1{return Point {},_d .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _egdaf [i ],nil ;};type SizeComparison int ;func (_bacee Points )Size ()int {return len (_bacee )};func _agbe (_bcbf *Bitmap ,_abag ,_ffea int ,_fggd ,_fcdc int ,_ede RasterOperator ){var (_gdgf int ;_eegcfa byte ;_cgbc ,_aaegd int ;_egdae int ;);_gfdgg :=_fggd >>3;_abaec :=_fggd &7;if _abaec > 0{_eegcfa =_ddeae [_abaec ];};_gdgf =_bcbf .RowStride *_ffea +(_abag >>3);switch _ede {case PixClr :for _cgbc =0;_cgbc < _fcdc ;_cgbc ++{_egdae =_gdgf +_cgbc *_bcbf .RowStride ;for _aaegd =0;_aaegd < _gfdgg ;_aaegd ++{_bcbf .Data [_egdae ]=0x0;_egdae ++;};if _abaec > 0{_bcbf .Data [_egdae ]=_edcd (_bcbf .Data [_egdae ],0x0,_eegcfa );};};case PixSet :for _cgbc =0;_cgbc < _fcdc ;_cgbc ++{_egdae =_gdgf +_cgbc *_bcbf .RowStride ;for _aaegd =0;_aaegd < _gfdgg ;_aaegd ++{_bcbf .Data [_egdae ]=0xff;_egdae ++;};if _abaec > 0{_bcbf .Data [_egdae ]=_edcd (_bcbf .Data [_egdae ],0xff,_eegcfa );};};case PixNotDst :for _cgbc =0;_cgbc < _fcdc ;_cgbc ++{_egdae =_gdgf +_cgbc *_bcbf .RowStride ;for _aaegd =0;_aaegd < _gfdgg ;_aaegd ++{_bcbf .Data [_egdae ]=^_bcbf .Data [_egdae ];_egdae ++;};if _abaec > 0{_bcbf .Data [_egdae ]=_edcd (_bcbf .Data [_egdae ],^_bcbf .Data [_egdae ],_eegcfa );};};};};func (_gffa *BitmapsArray )GetBox (i int )(*_ge .Rectangle ,error ){const _feacb ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";if _gffa ==nil {return nil ,_d .Error (_feacb ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_gffa .Boxes )-1{return nil ,_d .Errorf (_feacb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _gffa .Boxes [i ],nil ;};func (_abgc *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _eaba ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";if len (_abgc .Values )==0{return nil ,_d .Error (_eaba ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};_cdca :=&BitmapsArray {};_abgc .SortByWidth ();_fccb :=-1;_adbae :=-1;for _gfgd :=0;_gfgd < len (_abgc .Values );_gfgd ++{_bfad :=_abgc .Values [_gfgd ].Width ;if _bfad > _fccb {_fccb =_bfad ;_adbae ++;_cdca .Values =append (_cdca .Values ,&Bitmaps {});};_cdca .Values [_adbae ].AddBitmap (_abgc .Values [_gfgd ]);};return _cdca ,nil ;};func (_eagc *Bitmaps )makeSizeIndicator (_egffc ,_gfca int ,_degc LocationFilter ,_bdfg SizeComparison )(_abaeca *_cc .NumSlice ,_dfgac error ){const _abga ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _eagc ==nil {return nil ,_d .Error (_abga ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _degc {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_d .Errorf (_abga ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_degc );};switch _bdfg {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_d .Errorf (_abga ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_bdfg );};_abaeca =&_cc .NumSlice {};var (_dggd ,_cbabd ,_gdgb int ;_fcbf *Bitmap ;);for _ ,_fcbf =range _eagc .Values {_dggd =0;_cbabd ,_gdgb =_fcbf .Width ,_fcbf .Height ;switch _degc {case LocSelectWidth :if (_bdfg ==SizeSelectIfLT &&_cbabd < _egffc )||(_bdfg ==SizeSelectIfGT &&_cbabd > _egffc )||(_bdfg ==SizeSelectIfLTE &&_cbabd <=_egffc )||(_bdfg ==SizeSelectIfGTE &&_cbabd >=_egffc )||(_bdfg ==SizeSelectIfEQ &&_cbabd ==_egffc ){_dggd =1;};case LocSelectHeight :if (_bdfg ==SizeSelectIfLT &&_gdgb < _gfca )||(_bdfg ==SizeSelectIfGT &&_gdgb > _gfca )||(_bdfg ==SizeSelectIfLTE &&_gdgb <=_gfca )||(_bdfg ==SizeSelectIfGTE &&_gdgb >=_gfca )||(_bdfg ==SizeSelectIfEQ &&_gdgb ==_gfca ){_dggd =1;};case LocSelectIfEither :if (_bdfg ==SizeSelectIfLT &&(_cbabd < _egffc ||_gdgb < _gfca ))||(_bdfg ==SizeSelectIfGT &&(_cbabd > _egffc ||_gdgb > _gfca ))||(_bdfg ==SizeSelectIfLTE &&(_cbabd <=_egffc ||_gdgb <=_gfca ))||(_bdfg ==SizeSelectIfGTE &&(_cbabd >=_egffc ||_gdgb >=_gfca ))||(_bdfg ==SizeSelectIfEQ &&(_cbabd ==_egffc ||_gdgb ==_gfca )){_dggd =1;};case LocSelectIfBoth :if (_bdfg ==SizeSelectIfLT &&(_cbabd < _egffc &&_gdgb < _gfca ))||(_bdfg ==SizeSelectIfGT &&(_cbabd > _egffc &&_gdgb > _gfca ))||(_bdfg ==SizeSelectIfLTE &&(_cbabd <=_egffc &&_gdgb <=_gfca ))||(_bdfg ==SizeSelectIfGTE &&(_cbabd >=_egffc &&_gdgb >=_gfca ))||(_bdfg ==SizeSelectIfEQ &&(_cbabd ==_egffc &&_gdgb ==_gfca )){_dggd =1;};};_abaeca .AddInt (_dggd );};return _abaeca ,nil ;};type Point struct{X ,Y float32 ;};func _abdge (_fdgbe ,_aegcd int ,_gedb string )*Selection {_egege :=&Selection {Height :_fdgbe ,Width :_aegcd ,Name :_gedb };_egege .Data =make ([][]SelectionValue ,_fdgbe );for _ccgff :=0;_ccgff < _fdgbe ;_ccgff ++{_egege .Data [_ccgff ]=make ([]SelectionValue ,_aegcd );};return _egege ;};func _dfeg (_bgce ,_cgga *Bitmap ,_cbf ,_gecg int )(_ecabg error ){const _beef ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_dgge ,_bdbb ,_dfefg ,_adcf int ;_agcad ,_eedc ,_gcac ,_gfbg ,_acac ,_ecabgf ,_gccf ,_gfdgd byte ;);for _dgge =0;_dgge < _cbf ;_dgge ++{_dfefg =_dgge *_bgce .RowStride ;_adcf =_dgge *_cgga .RowStride ;for _bdbb =0;_bdbb < _gecg ;_bdbb ++{if _agcad ,_ecabg =_bgce .GetByte (_dfefg +_bdbb );_ecabg !=nil {return _d .Wrap (_ecabg ,_beef ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _eedc ,_ecabg =_cgga .GetByte (_adcf +_bdbb );_ecabg !=nil {return _d .Wrap (_ecabg ,_beef ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");};if _dgge > 0{if _gcac ,_ecabg =_bgce .GetByte (_dfefg -_bgce .RowStride +_bdbb );_ecabg !=nil {return _d .Wrap (_ecabg ,_beef ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_agcad |=_gcac |(_gcac <<1)|(_gcac >>1);if _bdbb > 0{if _gfdgd ,_ecabg =_bgce .GetByte (_dfefg -_bgce .RowStride +_bdbb -1);_ecabg !=nil {return _d .Wrap (_ecabg ,_beef ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_agcad |=_gfdgd <<7;};if _bdbb < _gecg -1{if _gfdgd ,_ecabg =_bgce .GetByte (_dfefg -_bgce .RowStride +_bdbb +1);_ecabg !=nil {return _d .Wrap (_ecabg ,_beef ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");};_agcad |=_gfdgd >>7;};};if _bdbb > 0{if _gfbg ,_ecabg =_bgce .GetByte (_dfefg +_bdbb -1);_ecabg !=nil {return _d .Wrap (_ecabg ,_beef ,"\u006a\u0020\u003e \u0030");};_agcad |=_gfbg <<7;};_agcad &=_eedc ;if _agcad ==0||^_agcad ==0{if _ecabg =_bgce .SetByte (_dfefg +_bdbb ,_agcad );_ecabg !=nil {return _d .Wrap (_ecabg ,_beef ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_gccf =_agcad ;_agcad =(_agcad |(_agcad >>1)|(_agcad <<1))&_eedc ;if (_agcad ^_gccf )==0{if _ecabg =_bgce .SetByte (_dfefg +_bdbb ,_agcad );_ecabg !=nil {return _d .Wrap (_ecabg ,_beef ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _dgge =_cbf -1;_dgge >=0;_dgge --{_dfefg =_dgge *_bgce .RowStride ;_adcf =_dgge *_cgga .RowStride ;for _bdbb =_gecg -1;_bdbb >=0;_bdbb --{if _agcad ,_ecabg =_bgce .GetByte (_dfefg +_bdbb );_ecabg !=nil {return _d .Wrap (_ecabg ,_beef ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};if _eedc ,_ecabg =_cgga .GetByte (_adcf +_bdbb );_ecabg !=nil {return _d .Wrap (_ecabg ,_beef ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _dgge < _cbf -1{if _acac ,_ecabg =_bgce .GetByte (_dfefg +_bgce .RowStride +_bdbb );_ecabg !=nil {return _d .Wrap (_ecabg ,_beef ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_agcad |=_acac |(_acac <<1)|_acac >>1;if _bdbb > 0{if _gfdgd ,_ecabg =_bgce .GetByte (_dfefg +_bgce .RowStride +_bdbb -1);_ecabg !=nil {return _d .Wrap (_ecabg ,_beef ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_agcad |=_gfdgd <<7;};if _bdbb < _gecg -1{if _gfdgd ,_ecabg =_bgce .GetByte (_dfefg +_bgce .RowStride +_bdbb +1);_ecabg !=nil {return _d .Wrap (_ecabg ,_beef ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");};_agcad |=_gfdgd >>7;};};if _bdbb < _gecg -1{if _ecabgf ,_ecabg =_bgce .GetByte (_dfefg +_bdbb +1);_ecabg !=nil {return _d .Wrap (_ecabg ,_beef ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");};_agcad |=_ecabgf >>7;};_agcad &=_eedc ;if _agcad ==0||(^_agcad )==0{if _ecabg =_bgce .SetByte (_dfefg +_bdbb ,_agcad );_ecabg !=nil {return _d .Wrap (_ecabg ,_beef ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};};for {_gccf =_agcad ;_agcad =(_agcad |(_agcad >>1)|(_agcad <<1))&_eedc ;if (_agcad ^_gccf )==0{if _ecabg =_bgce .SetByte (_dfefg +_bdbb ,_agcad );_ecabg !=nil {return _d .Wrap (_ecabg ,_beef ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");};break ;};};};};return nil ;};func (_ccaca *Bitmaps )AddBitmap (bm *Bitmap ){_ccaca .Values =append (_ccaca .Values ,bm )};type SelectionValue int ;func _ffg (_aagd ,_beag *Bitmap ,_babb ,_afge int )(*Bitmap ,error ){const _cad ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";if _beag ==nil {return nil ,_d .Error (_cad ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _babb < 1||_afge < 1{return nil ,_d .Error (_cad ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");};if _babb ==1&&_afge ==1{return _beag .Copy (),nil ;};if _babb ==1||_afge ==1{_eede :=SelCreateBrick (_afge ,_babb ,_afge /2,_babb /2,SelHit );var _eabb error ;_aagd ,_eabb =_aceb (_aagd ,_beag ,_eede );if _eabb !=nil {return nil ,_d .Wrap (_eabb ,_cad ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _aagd ,nil ;};_ecf :=SelCreateBrick (1,_babb ,0,_babb /2,SelHit );_eebfa :=SelCreateBrick (_afge ,1,_afge /2,0,SelHit );_afcba ,_adcd :=_cbbd (nil ,_beag ,_ecf );if _adcd !=nil {return nil ,_d .Wrap (_adcd ,_cad ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _aagd ,_adcd =_cbbd (_aagd ,_afcba ,_eebfa );_adcd !=nil {return nil ,_d .Wrap (_adcd ,_cad ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_adcd =_agdb (_afcba ,_aagd ,_ecf );_adcd !=nil {return nil ,_d .Wrap (_adcd ,_cad ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");};if _ ,_adcd =_agdb (_aagd ,_afcba ,_eebfa );_adcd !=nil {return nil ,_d .Wrap (_adcd ,_cad ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _aagd ,nil ;};func _afcf (_gdba *Bitmap ,_fgeb ,_dagecd int ,_eeaf ,_cbbde int ,_ebab RasterOperator ){var (_eccd bool ;_fbd bool ;_dbbdb int ;_eaga int ;_ccab int ;_dfafa int ;_fbcd bool ;_cbeg byte ;);_egaa :=8-(_fgeb &7);_efdc :=_gfag [_egaa ];_dgfc :=_gdba .RowStride *_dagecd +(_fgeb >>3);if _eeaf < _egaa {_eccd =true ;_efdc &=_ddeae [8-_egaa +_eeaf ];};if !_eccd {_dbbdb =(_eeaf -_egaa )>>3;if _dbbdb !=0{_fbd =true ;_eaga =_dgfc +1;};};_ccab =(_fgeb +_eeaf )&7;if !(_eccd ||_ccab ==0){_fbcd =true ;_cbeg =_ddeae [_ccab ];_dfafa =_dgfc +1+_dbbdb ;};var _eaeef ,_fgagg int ;switch _ebab {case PixClr :for _eaeef =0;_eaeef < _cbbde ;_eaeef ++{_gdba .Data [_dgfc ]=_edcd (_gdba .Data [_dgfc ],0x0,_efdc );_dgfc +=_gdba .RowStride ;};if _fbd {for _eaeef =0;_eaeef < _cbbde ;_eaeef ++{for _fgagg =0;_fgagg < _dbbdb ;_fgagg ++{_gdba .Data [_eaga +_fgagg ]=0x0;};_eaga +=_gdba .RowStride ;};};if _fbcd {for _eaeef =0;_eaeef < _cbbde ;_eaeef ++{_gdba .Data [_dfafa ]=_edcd (_gdba .Data [_dfafa ],0x0,_cbeg );_dfafa +=_gdba .RowStride ;};};case PixSet :for _eaeef =0;_eaeef < _cbbde ;_eaeef ++{_gdba .Data [_dgfc ]=_edcd (_gdba .Data [_dgfc ],0xff,_efdc );_dgfc +=_gdba .RowStride ;};if _fbd {for _eaeef =0;_eaeef < _cbbde ;_eaeef ++{for _fgagg =0;_fgagg < _dbbdb ;_fgagg ++{_gdba .Data [_eaga +_fgagg ]=0xff;};_eaga +=_gdba .RowStride ;};};if _fbcd {for _eaeef =0;_eaeef < _cbbde ;_eaeef ++{_gdba .Data [_dfafa ]=_edcd (_gdba .Data [_dfafa ],0xff,_cbeg );_dfafa +=_gdba .RowStride ;};};case PixNotDst :for _eaeef =0;_eaeef < _cbbde ;_eaeef ++{_gdba .Data [_dgfc ]=_edcd (_gdba .Data [_dgfc ],^_gdba .Data [_dgfc ],_efdc );_dgfc +=_gdba .RowStride ;};if _fbd {for _eaeef =0;_eaeef < _cbbde ;_eaeef ++{for _fgagg =0;_fgagg < _dbbdb ;_fgagg ++{_gdba .Data [_eaga +_fgagg ]=^(_gdba .Data [_eaga +_fgagg ]);};_eaga +=_gdba .RowStride ;};};if _fbcd {for _eaeef =0;_eaeef < _cbbde ;_eaeef ++{_gdba .Data [_dfafa ]=_edcd (_gdba .Data [_dfafa ],^_gdba .Data [_dfafa ],_cbeg );_dfafa +=_gdba .RowStride ;};};};};func TstAddSymbol (t *_dc .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );_egffa :=_ge .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_egffa );*x +=sym .Width +space ;};func _afef (_aea ...MorphProcess )(_efcaf error ){const _ebfad ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _facb ,_ebc int ;for _dedd ,_cbab :=range _aea {if _efcaf =_cbab .verify (_dedd ,&_facb ,&_ebc );_efcaf !=nil {return _d .Wrap (_efcaf ,_ebfad ,"");};};if _ebc !=0&&_facb !=0{return _d .Error (_ebfad ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");};return nil ;};func TstGetScaledSymbol (t *_dc .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_bcef ,_eggac :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });_c .NoError (t ,_eggac );return _bcef ;};func (_gadd *ClassedPoints )validateIntSlice ()error {const _ccgda ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";for _ ,_acee :=range _gadd .IntSlice {if _acee >=(_gadd .Points .Size ()){return _d .Errorf (_ccgda ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_acee ,_gadd .Points .Size ());};};return nil ;};func (_dgde MorphProcess )verify (_gcb int ,_gcda ,_befb *int )error {const _bffb ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";switch _dgde .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_dgde .Arguments )!=2{return _d .Error (_bffb ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");};_dbbe ,_eddfg :=_dgde .getWidthHeight ();if _dbbe <=0||_eddfg <=0{return _d .Error (_bffb ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");};case MopRankBinaryReduction :_addg :=len (_dgde .Arguments );*_gcda +=_addg ;if _addg < 1||_addg > 4{return _d .Error (_bffb ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");};for _fdae :=0;_fdae < _addg ;_fdae ++{if _dgde .Arguments [_fdae ]< 1||_dgde .Arguments [_fdae ]> 4{return _d .Error (_bffb ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");};};case MopReplicativeBinaryExpansion :if len (_dgde .Arguments )==0{return _d .Error (_bffb ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ada :=_dgde .Arguments [0];if _ada !=2&&_ada !=4&&_ada !=8{return _d .Error (_bffb ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");};*_gcda -=_abcdc [_ada /4];case MopAddBorder :if len (_dgde .Arguments )==0{return _d .Error (_bffb ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cacba :=_dgde .Arguments [0];if _gcb > 0{return _d .Error (_bffb ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");};if _cacba < 1{return _d .Error (_bffb ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_befb =_cacba ;};return nil ;};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_cdccg float64 ,_afff error ){const _ecbbe ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";if bm1 ==nil ||bm2 ==nil {return _cdccg ,_d .Error (_ecbbe ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _cdccg ,_d .Error (_ecbbe ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if area1 ==0||area2 ==0{return _cdccg ,_d .Error (_ecbbe ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_dfee ,_dgcc :=bm1 .Width ,bm1 .Height ;_cgbb ,_gffd :=bm2 .Width ,bm2 .Height ;if _ecbg (_dfee -_cgbb )> maxDiffW {return 0,nil ;};if _ecbg (_dgcc -_gffd )> maxDiffH {return 0,nil ;};var _dbe ,_cefa int ;if delX >=0{_dbe =int (delX +0.5);}else {_dbe =int (delX -0.5);};if delY >=0{_cefa =int (delY +0.5);}else {_cefa =int (delY -0.5);};_abdb :=bm1 .createTemplate ();if _afff =_abdb .RasterOperation (_dbe ,_cefa ,_cgbb ,_gffd ,PixSrc ,bm2 ,0,0);_afff !=nil {return _cdccg ,_d .Wrap (_afff ,_ecbbe ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _afff =_abdb .RasterOperation (0,0,_dfee ,_dgcc ,PixSrcAndDst ,bm1 ,0,0);_afff !=nil {return _cdccg ,_d .Wrap (_afff ,_ecbbe ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_egcc :=_abdb .countPixels ();_cdccg =float64 (_egcc )*float64 (_egcc )/(float64 (area1 )*float64 (area2 ));return _cdccg ,nil ;};func _dbba (_abdg *Bitmap )(_ggaa *Bitmap ,_dcaa int ,_egda error ){const _agdd ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";if _abdg ==nil {return nil ,0,_d .Errorf (_agdd ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _gbg ,_faba *Bitmap ;if _gbg ,_egda =_bda (nil ,_abdg );_egda !=nil {return nil ,0,_d .Wrap (_egda ,_agdd ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");};var (_cgcbg [13]int ;_agcg ,_dfac int ;);_dfg :=12;_eafe :=_cc .NewNumSlice (_dfg +1);_efca :=_cc .NewNumSlice (_dfg +1);var _abcb *Boxes ;for _dcgbe :=0;_dcgbe <=_dfg ;_dcgbe ++{if _dcgbe ==0{if _faba ,_egda =_bda (nil ,_gbg );_egda !=nil {return nil ,0,_d .Wrap (_egda ,_agdd ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");};}else {if _faba ,_egda =_bcaae (_gbg ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_egda !=nil {return nil ,0,_d .Wrap (_egda ,_agdd ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _abcb ,_egda =_faba .connComponentsBB (4);_egda !=nil {return nil ,0,_d .Wrap (_egda ,_agdd ,"");};_cgcbg [_dcgbe ]=len (*_abcb );_eafe .AddInt (_cgcbg [_dcgbe ]);switch _dcgbe {case 0:_agcg =_cgcbg [0];default:_dfac =_cgcbg [_dcgbe -1]-_cgcbg [_dcgbe ];_efca .AddInt (_dfac );};_gbg =_faba ;};_eddfd :=true ;_ceea :=2;var _fbcf ,_gdfb int ;for _gbf :=1;_gbf < len (*_efca );_gbf ++{if _fbcf ,_egda =_eafe .GetInt (_gbf );_egda !=nil {return nil ,0,_d .Wrap (_egda ,_agdd ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");};if _eddfd &&_fbcf < int (0.3*float32 (_agcg )){_ceea =_gbf +1;_eddfd =false ;};if _dfac ,_egda =_efca .GetInt (_gbf );_egda !=nil {return nil ,0,_d .Wrap (_egda ,_agdd ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");};if _dfac > _gdfb {_gdfb =_dfac ;};};_afac :=_abdg .XResolution ;if _afac ==0{_afac =150;};if _afac > 110{_ceea ++;};if _ceea < 2{_fg .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");_ceea =2;};_dcaa =_ceea +1;if _ggaa ,_egda =_ffg (nil ,_abdg ,_ceea +1,1);_egda !=nil {return nil ,0,_d .Wrap (_egda ,_agdd ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _ggaa ,_dcaa ,nil ;};func (_dfgcd *Bitmaps )Size ()int {return len (_dfgcd .Values )};func MakePixelCentroidTab8 ()[]int {return _cccf ()};func TstPSymbol (t *_dc .T )*Bitmap {t .Helper ();_fdcd :=New (5,8);_c .NoError (t ,_fdcd .SetPixel (0,0,1));_c .NoError (t ,_fdcd .SetPixel (1,0,1));_c .NoError (t ,_fdcd .SetPixel (2,0,1));_c .NoError (t ,_fdcd .SetPixel (3,0,1));_c .NoError (t ,_fdcd .SetPixel (4,1,1));_c .NoError (t ,_fdcd .SetPixel (0,1,1));_c .NoError (t ,_fdcd .SetPixel (4,2,1));_c .NoError (t ,_fdcd .SetPixel (0,2,1));_c .NoError (t ,_fdcd .SetPixel (4,3,1));_c .NoError (t ,_fdcd .SetPixel (0,3,1));_c .NoError (t ,_fdcd .SetPixel (0,4,1));_c .NoError (t ,_fdcd .SetPixel (1,4,1));_c .NoError (t ,_fdcd .SetPixel (2,4,1));_c .NoError (t ,_fdcd .SetPixel (3,4,1));_c .NoError (t ,_fdcd .SetPixel (0,5,1));_c .NoError (t ,_fdcd .SetPixel (0,6,1));_c .NoError (t ,_fdcd .SetPixel (0,7,1));return _fdcd ;};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _bcaae (src ,sequence ...);};func (_fedb *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_fedb .Width ,Height :_fedb .Height ,RowStride :_fedb .RowStride ,Color :_fedb .Color ,Text :_fedb .Text ,BitmapNumber :_fedb .BitmapNumber ,Special :_fedb .Special ,Data :make ([]byte ,len (_fedb .Data ))};};type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};func _gfbb (_dddf *_cc .Stack )(_bfea *fillSegment ,_ebff error ){const _fgcb ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";if _dddf ==nil {return nil ,_d .Error (_fgcb ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _dddf .Aux ==nil {return nil ,_d .Error (_fgcb ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};_cfcb ,_eeef :=_dddf .Pop ();if !_eeef {return nil ,nil ;};_cbdd ,_eeef :=_cfcb .(*fillSegment );if !_eeef {return nil ,_d .Error (_fgcb ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_bfea =&fillSegment {_cbdd ._dbef ,_cbdd ._ddac ,_cbdd ._fbfbc +_cbdd ._fbadd ,_cbdd ._fbadd };_dddf .Aux .Push (_cbdd );return _bfea ,nil ;};func (_ffaa *Boxes )selectWithIndicator (_dgedg *_cc .NumSlice )(_agca *Boxes ,_abcd error ){const _dgec ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _ffaa ==nil {return nil ,_d .Error (_dgec ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _dgedg ==nil {return nil ,_d .Error (_dgec ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_dgedg )!=len (*_ffaa ){return nil ,_d .Error (_dgec ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");};var _dageb ,_bff int ;for _ebgg :=0;_ebgg < len (*_dgedg );_ebgg ++{if _dageb ,_abcd =_dgedg .GetInt (_ebgg );_abcd !=nil {return nil ,_d .Wrap (_abcd ,_dgec ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _dageb ==1{_bff ++;};};if _bff ==len (*_ffaa ){return _ffaa ,nil ;};_aaaf :=Boxes {};for _ggd :=0;_ggd < len (*_dgedg );_ggd ++{_dageb =int ((*_dgedg )[_ggd ]);if _dageb ==0{continue ;};_aaaf =append (_aaaf ,(*_ffaa )[_ggd ]);};_agca =&_aaaf ;return _agca ,nil ;};func TstFrameBitmap ()*Bitmap {return _efafg .Copy ()};func _bda (_becf ,_dcag *Bitmap )(*Bitmap ,error ){if _dcag ==nil {return nil ,_d .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _dcag ==_becf {return _becf ,nil ;};if _becf ==nil {_becf =_dcag .createTemplate ();copy (_becf .Data ,_dcag .Data );return _becf ,nil ;};_gad :=_becf .resizeImageData (_dcag );if _gad !=nil {return nil ,_d .Wrap (_gad ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");};_becf .Text =_dcag .Text ;copy (_becf .Data ,_dcag .Data );return _becf ,nil ;};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};type RasterOperator int ;func TstOSymbol (t *_dc .T ,scale ...int )*Bitmap {_bcfa ,_fbfae :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_c .NoError (t ,_fbfae );return TstGetScaledSymbol (t ,_bcfa ,scale ...);};func (_fcfg *Points )Add (pt *Points )error {const _dced ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _fcfg ==nil {return _d .Error (_dced ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if pt ==nil {return _d .Error (_dced ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_fcfg =append (*_fcfg ,*pt ...);return nil ;};func (_cage *byHeight )Len ()int {return len (_cage .Values )};func _cgge (_aeef ,_gagae ,_eccg *Bitmap ,_fdcc int )(*Bitmap ,error ){const _ggbbe ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";if _gagae ==nil {return nil ,_d .Error (_ggbbe ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _eccg ==nil {return nil ,_d .Error (_ggbbe ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _fdcc !=4&&_fdcc !=8{return nil ,_d .Error (_ggbbe ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");};var _aaag error ;_aeef ,_aaag =_bda (_aeef ,_gagae );if _aaag !=nil {return nil ,_d .Wrap (_aaag ,_ggbbe ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_dfgaf :=_gagae .createTemplate ();_eccg .setPadBits (0);for _fbec :=0;_fbec < _fdge ;_fbec ++{_dfgaf ,_aaag =_bda (_dfgaf ,_aeef );if _aaag !=nil {return nil ,_d .Wrapf (_aaag ,_ggbbe ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_fbec );};if _aaag =_fgcd (_aeef ,_eccg ,_fdcc );_aaag !=nil {return nil ,_d .Wrapf (_aaag ,_ggbbe ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_fbec );};if _dfgaf .Equals (_aeef ){break ;};};return _aeef ,nil ;};func (_abdf *Bitmap )setPadBits (_dged int ){_eec :=8-_abdf .Width %8;if _eec ==8{return ;};_eae :=_abdf .Width /8;_dccf :=_gfag [_eec ];if _dged ==0{_dccf ^=_dccf ;};var _ecc int ;for _dgg :=0;_dgg < _abdf .Height ;_dgg ++{_ecc =_dgg *_abdf .RowStride +_eae ;if _dged ==0{_abdf .Data [_ecc ]&=_dccf ;}else {_abdf .Data [_ecc ]|=_dccf ;};};};type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_ge .Rectangle ;};func _fbbac (_cbca *Bitmap ,_cbed ,_gffga ,_bfdg ,_fcfeb int ,_geed RasterOperator ,_gcba *Bitmap ,_afag ,_aaab int )error {var (_fbcc bool ;_gdeac bool ;_aacc int ;_bcdc int ;_aafe int ;_dfef bool ;_gefc byte ;_ddeee int ;_fcdd int ;_afec int ;_ffad ,_eeaef int ;);_fgfbg :=8-(_cbed &7);_dbcae :=_gfag [_fgfbg ];_aeba :=_cbca .RowStride *_gffga +(_cbed >>3);_aagbf :=_gcba .RowStride *_aaab +(_afag >>3);if _bfdg < _fgfbg {_fbcc =true ;_dbcae &=_ddeae [8-_fgfbg +_bfdg ];};if !_fbcc {_aacc =(_bfdg -_fgfbg )>>3;if _aacc > 0{_gdeac =true ;_bcdc =_aeba +1;_aafe =_aagbf +1;};};_ddeee =(_cbed +_bfdg )&7;if !(_fbcc ||_ddeee ==0){_dfef =true ;_gefc =_ddeae [_ddeee ];_fcdd =_aeba +1+_aacc ;_afec =_aagbf +1+_aacc ;};switch _geed {case PixSrc :for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_aeba ]=_edcd (_cbca .Data [_aeba ],_gcba .Data [_aagbf ],_dbcae );_aeba +=_cbca .RowStride ;_aagbf +=_gcba .RowStride ;};if _gdeac {for _ffad =0;_ffad < _fcfeb ;_ffad ++{for _eeaef =0;_eeaef < _aacc ;_eeaef ++{_cbca .Data [_bcdc +_eeaef ]=_gcba .Data [_aafe +_eeaef ];};_bcdc +=_cbca .RowStride ;_aafe +=_gcba .RowStride ;};};if _dfef {for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_fcdd ]=_edcd (_cbca .Data [_fcdd ],_gcba .Data [_afec ],_gefc );_fcdd +=_cbca .RowStride ;_afec +=_gcba .RowStride ;};};case PixNotSrc :for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_aeba ]=_edcd (_cbca .Data [_aeba ],^_gcba .Data [_aagbf ],_dbcae );_aeba +=_cbca .RowStride ;_aagbf +=_gcba .RowStride ;};if _gdeac {for _ffad =0;_ffad < _fcfeb ;_ffad ++{for _eeaef =0;_eeaef < _aacc ;_eeaef ++{_cbca .Data [_bcdc +_eeaef ]=^_gcba .Data [_aafe +_eeaef ];};_bcdc +=_cbca .RowStride ;_aafe +=_gcba .RowStride ;};};if _dfef {for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_fcdd ]=_edcd (_cbca .Data [_fcdd ],^_gcba .Data [_afec ],_gefc );_fcdd +=_cbca .RowStride ;_afec +=_gcba .RowStride ;};};case PixSrcOrDst :for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_aeba ]=_edcd (_cbca .Data [_aeba ],_gcba .Data [_aagbf ]|_cbca .Data [_aeba ],_dbcae );_aeba +=_cbca .RowStride ;_aagbf +=_gcba .RowStride ;};if _gdeac {for _ffad =0;_ffad < _fcfeb ;_ffad ++{for _eeaef =0;_eeaef < _aacc ;_eeaef ++{_cbca .Data [_bcdc +_eeaef ]|=_gcba .Data [_aafe +_eeaef ];};_bcdc +=_cbca .RowStride ;_aafe +=_gcba .RowStride ;};};if _dfef {for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_fcdd ]=_edcd (_cbca .Data [_fcdd ],_gcba .Data [_afec ]|_cbca .Data [_fcdd ],_gefc );_fcdd +=_cbca .RowStride ;_afec +=_gcba .RowStride ;};};case PixSrcAndDst :for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_aeba ]=_edcd (_cbca .Data [_aeba ],_gcba .Data [_aagbf ]&_cbca .Data [_aeba ],_dbcae );_aeba +=_cbca .RowStride ;_aagbf +=_gcba .RowStride ;};if _gdeac {for _ffad =0;_ffad < _fcfeb ;_ffad ++{for _eeaef =0;_eeaef < _aacc ;_eeaef ++{_cbca .Data [_bcdc +_eeaef ]&=_gcba .Data [_aafe +_eeaef ];};_bcdc +=_cbca .RowStride ;_aafe +=_gcba .RowStride ;};};if _dfef {for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_fcdd ]=_edcd (_cbca .Data [_fcdd ],_gcba .Data [_afec ]&_cbca .Data [_fcdd ],_gefc );_fcdd +=_cbca .RowStride ;_afec +=_gcba .RowStride ;};};case PixSrcXorDst :for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_aeba ]=_edcd (_cbca .Data [_aeba ],_gcba .Data [_aagbf ]^_cbca .Data [_aeba ],_dbcae );_aeba +=_cbca .RowStride ;_aagbf +=_gcba .RowStride ;};if _gdeac {for _ffad =0;_ffad < _fcfeb ;_ffad ++{for _eeaef =0;_eeaef < _aacc ;_eeaef ++{_cbca .Data [_bcdc +_eeaef ]^=_gcba .Data [_aafe +_eeaef ];};_bcdc +=_cbca .RowStride ;_aafe +=_gcba .RowStride ;};};if _dfef {for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_fcdd ]=_edcd (_cbca .Data [_fcdd ],_gcba .Data [_afec ]^_cbca .Data [_fcdd ],_gefc );_fcdd +=_cbca .RowStride ;_afec +=_gcba .RowStride ;};};case PixNotSrcOrDst :for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_aeba ]=_edcd (_cbca .Data [_aeba ],^(_gcba .Data [_aagbf ])|_cbca .Data [_aeba ],_dbcae );_aeba +=_cbca .RowStride ;_aagbf +=_gcba .RowStride ;};if _gdeac {for _ffad =0;_ffad < _fcfeb ;_ffad ++{for _eeaef =0;_eeaef < _aacc ;_eeaef ++{_cbca .Data [_bcdc +_eeaef ]|=^(_gcba .Data [_aafe +_eeaef ]);};_bcdc +=_cbca .RowStride ;_aafe +=_gcba .RowStride ;};};if _dfef {for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_fcdd ]=_edcd (_cbca .Data [_fcdd ],^(_gcba .Data [_afec ])|_cbca .Data [_fcdd ],_gefc );_fcdd +=_cbca .RowStride ;_afec +=_gcba .RowStride ;};};case PixNotSrcAndDst :for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_aeba ]=_edcd (_cbca .Data [_aeba ],^(_gcba .Data [_aagbf ])&_cbca .Data [_aeba ],_dbcae );_aeba +=_cbca .RowStride ;_aagbf +=_gcba .RowStride ;};if _gdeac {for _ffad =0;_ffad < _fcfeb ;_ffad ++{for _eeaef =0;_eeaef < _aacc ;_eeaef ++{_cbca .Data [_bcdc +_eeaef ]&=^_gcba .Data [_aafe +_eeaef ];};_bcdc +=_cbca .RowStride ;_aafe +=_gcba .RowStride ;};};if _dfef {for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_fcdd ]=_edcd (_cbca .Data [_fcdd ],^(_gcba .Data [_afec ])&_cbca .Data [_fcdd ],_gefc );_fcdd +=_cbca .RowStride ;_afec +=_gcba .RowStride ;};};case PixSrcOrNotDst :for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_aeba ]=_edcd (_cbca .Data [_aeba ],_gcba .Data [_aagbf ]|^(_cbca .Data [_aeba ]),_dbcae );_aeba +=_cbca .RowStride ;_aagbf +=_gcba .RowStride ;};if _gdeac {for _ffad =0;_ffad < _fcfeb ;_ffad ++{for _eeaef =0;_eeaef < _aacc ;_eeaef ++{_cbca .Data [_bcdc +_eeaef ]=_gcba .Data [_aafe +_eeaef ]|^(_cbca .Data [_bcdc +_eeaef ]);};_bcdc +=_cbca .RowStride ;_aafe +=_gcba .RowStride ;};};if _dfef {for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_fcdd ]=_edcd (_cbca .Data [_fcdd ],_gcba .Data [_afec ]|^(_cbca .Data [_fcdd ]),_gefc );_fcdd +=_cbca .RowStride ;_afec +=_gcba .RowStride ;};};case PixSrcAndNotDst :for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_aeba ]=_edcd (_cbca .Data [_aeba ],_gcba .Data [_aagbf ]&^(_cbca .Data [_aeba ]),_dbcae );_aeba +=_cbca .RowStride ;_aagbf +=_gcba .RowStride ;};if _gdeac {for _ffad =0;_ffad < _fcfeb ;_ffad ++{for _eeaef =0;_eeaef < _aacc ;_eeaef ++{_cbca .Data [_bcdc +_eeaef ]=_gcba .Data [_aafe +_eeaef ]&^(_cbca .Data [_bcdc +_eeaef ]);};_bcdc +=_cbca .RowStride ;_aafe +=_gcba .RowStride ;};};if _dfef {for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_fcdd ]=_edcd (_cbca .Data [_fcdd ],_gcba .Data [_afec ]&^(_cbca .Data [_fcdd ]),_gefc );_fcdd +=_cbca .RowStride ;_afec +=_gcba .RowStride ;};};case PixNotPixSrcOrDst :for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_aeba ]=_edcd (_cbca .Data [_aeba ],^(_gcba .Data [_aagbf ]|_cbca .Data [_aeba ]),_dbcae );_aeba +=_cbca .RowStride ;_aagbf +=_gcba .RowStride ;};if _gdeac {for _ffad =0;_ffad < _fcfeb ;_ffad ++{for _eeaef =0;_eeaef < _aacc ;_eeaef ++{_cbca .Data [_bcdc +_eeaef ]=^(_gcba .Data [_aafe +_eeaef ]|_cbca .Data [_bcdc +_eeaef ]);};_bcdc +=_cbca .RowStride ;_aafe +=_gcba .RowStride ;};};if _dfef {for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_fcdd ]=_edcd (_cbca .Data [_fcdd ],^(_gcba .Data [_afec ]|_cbca .Data [_fcdd ]),_gefc );_fcdd +=_cbca .RowStride ;_afec +=_gcba .RowStride ;};};case PixNotPixSrcAndDst :for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_aeba ]=_edcd (_cbca .Data [_aeba ],^(_gcba .Data [_aagbf ]&_cbca .Data [_aeba ]),_dbcae );_aeba +=_cbca .RowStride ;_aagbf +=_gcba .RowStride ;};if _gdeac {for _ffad =0;_ffad < _fcfeb ;_ffad ++{for _eeaef =0;_eeaef < _aacc ;_eeaef ++{_cbca .Data [_bcdc +_eeaef ]=^(_gcba .Data [_aafe +_eeaef ]&_cbca .Data [_bcdc +_eeaef ]);};_bcdc +=_cbca .RowStride ;_aafe +=_gcba .RowStride ;};};if _dfef {for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_fcdd ]=_edcd (_cbca .Data [_fcdd ],^(_gcba .Data [_afec ]&_cbca .Data [_fcdd ]),_gefc );_fcdd +=_cbca .RowStride ;_afec +=_gcba .RowStride ;};};case PixNotPixSrcXorDst :for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_aeba ]=_edcd (_cbca .Data [_aeba ],^(_gcba .Data [_aagbf ]^_cbca .Data [_aeba ]),_dbcae );_aeba +=_cbca .RowStride ;_aagbf +=_gcba .RowStride ;};if _gdeac {for _ffad =0;_ffad < _fcfeb ;_ffad ++{for _eeaef =0;_eeaef < _aacc ;_eeaef ++{_cbca .Data [_bcdc +_eeaef ]=^(_gcba .Data [_aafe +_eeaef ]^_cbca .Data [_bcdc +_eeaef ]);};_bcdc +=_cbca .RowStride ;_aafe +=_gcba .RowStride ;};};if _dfef {for _ffad =0;_ffad < _fcfeb ;_ffad ++{_cbca .Data [_fcdd ]=_edcd (_cbca .Data [_fcdd ],^(_gcba .Data [_afec ]^_cbca .Data [_fcdd ]),_gefc );_fcdd +=_cbca .RowStride ;_afec +=_gcba .RowStride ;};};default:_fg .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_geed );return _d .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func (_gfg *Bitmap )CreateTemplate ()*Bitmap {return _gfg .createTemplate ()};func (_begg *ClassedPoints )Len ()int {return _begg .IntSlice .Size ()};const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;);func (_gdac *ClassedPoints )XAtIndex (i int )float32 {return (*_gdac .Points )[_gdac .IntSlice [i ]].X };func (_gdbg *Bitmaps )String ()string {_cddeb :=_e .Builder {};for _ ,_fcba :=range _gdbg .Values {_cddeb .WriteString (_fcba .String ());_cddeb .WriteRune ('\n');};return _cddeb .String ();};func _bfaga (_dgbc *Bitmap ,_gegf ,_bdaf ,_badae ,_gbfg int ,_aefd RasterOperator ,_gbaf *Bitmap ,_agce ,_ecfd int )error {const _gbfe ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";if _dgbc ==nil {return _d .Error (_gbfe ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");};if _aefd ==PixDst {return nil ;};switch _aefd {case PixClr ,PixSet ,PixNotDst :_ddeb (_dgbc ,_gegf ,_bdaf ,_badae ,_gbfg ,_aefd );return nil ;};if _gbaf ==nil {_fg .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");return _d .Error (_gbfe ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _ccbf :=_bbbg (_dgbc ,_gegf ,_bdaf ,_badae ,_gbfg ,_aefd ,_gbaf ,_agce ,_ecfd );_ccbf !=nil {return _d .Wrap (_ccbf ,_gbfe ,"");};return nil ;};func (_dbcf *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _dbcf .addBorderGeneral (left ,right ,top ,bot ,val );};func (_aadf *Selection )setOrigin (_dfgec ,_gaec int ){_aadf .Cy ,_aadf .Cx =_dfgec ,_gaec };func _cbbd (_ebfa *Bitmap ,_gffc *Bitmap ,_bfde *Selection )(*Bitmap ,error ){var (_gfcb *Bitmap ;_cgg error ;);_ebfa ,_cgg =_eegf (_ebfa ,_gffc ,_bfde ,&_gfcb );if _cgg !=nil {return nil ,_cgg ;};if _cgg =_ebfa .clearAll ();_cgg !=nil {return nil ,_cgg ;};var _eegcf SelectionValue ;for _cgcd :=0;_cgcd < _bfde .Height ;_cgcd ++{for _gcee :=0;_gcee < _bfde .Width ;_gcee ++{_eegcf =_bfde .Data [_cgcd ][_gcee ];if _eegcf ==SelHit {if _cgg =_ebfa .RasterOperation (_gcee -_bfde .Cx ,_cgcd -_bfde .Cy ,_gffc .Width ,_gffc .Height ,PixSrcOrDst ,_gfcb ,0,0);_cgg !=nil {return nil ,_cgg ;};};};};return _ebfa ,nil ;};func ClipBoxToRectangle (box *_ge .Rectangle ,wi ,hi int )(_cacc *_ge .Rectangle ,_ccbdab error ){const _bca ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";if box ==nil {return nil ,_d .Error (_bca ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_d .Error (_bca ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");};_cacc =&(*box );if _cacc .Min .X < 0{_cacc .Max .X +=_cacc .Min .X ;_cacc .Min .X =0;};if _cacc .Min .Y < 0{_cacc .Max .Y +=_cacc .Min .Y ;_cacc .Min .Y =0;};if _cacc .Max .X > wi {_cacc .Max .X =wi ;};if _cacc .Max .Y > hi {_cacc .Max .Y =hi ;};return _cacc ,nil ;};func (_dgcb *ClassedPoints )SortByY (){_dgcb ._decb =_dgcb .ySortFunction ();_g .Sort (_dgcb )};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_acgcg :=_abdge (h ,w ,"");_acgcg .setOrigin (cy ,cx );var _ggdb ,_gaba int ;for _ggdb =0;_ggdb < h ;_ggdb ++{for _gaba =0;_gaba < w ;_gaba ++{_acgcg .Data [_ggdb ][_gaba ]=tp ;};};return _acgcg ;};func (_edgd *Bitmap )InverseData (){_edgd .inverseData ()};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _fgfed ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";if bm1 ==nil {return false ,_d .Error (_fgfed ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");};if bm2 ==nil {return false ,_d .Error (_fgfed ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");};if area1 <=0||area2 <=0{return false ,_d .Error (_fgfed ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");};if downcount ==nil {return false ,_d .Error (_fgfed ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_d .Error (_fgfed ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");};_afba ,_eabff :=bm1 .Width ,bm1 .Height ;_dgdcc ,_gbb :=bm2 .Width ,bm2 .Height ;if _cc .Abs (_afba -_dgdcc )> maxDiffW {return false ,nil ;};if _cc .Abs (_eabff -_gbb )> maxDiffH {return false ,nil ;};_faefc :=int (delX +_cc .Sign (delX )*0.5);_dfbfd :=int (delY +_cc .Sign (delY )*0.5);_ggfe :=int (_b .Ceil (_b .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_adfdc :=bm2 .RowStride ;_fade :=_gfge (_dfbfd ,0);_afdgf :=_bcde (_gbb +_dfbfd ,_eabff );_beba :=bm1 .RowStride *_fade ;_gce :=bm2 .RowStride *(_fade -_dfbfd );var _edag int ;if _afdgf <=_eabff {_edag =downcount [_afdgf -1];};_cbbf :=_gfge (_faefc ,0);_dbad :=_bcde (_dgdcc +_faefc ,_afba );var _fgc ,_ddbb int ;if _faefc >=8{_fgc =_faefc >>3;_beba +=_fgc ;_cbbf -=_fgc <<3;_dbad -=_fgc <<3;_faefc &=7;}else if _faefc <=-8{_ddbb =-((_faefc +7)>>3);_gce +=_ddbb ;_adfdc -=_ddbb ;_faefc +=_ddbb <<3;};var (_bfe ,_adbdb ,_gdb int ;_dgac ,_fdaag ,_cfbe byte ;);if _cbbf >=_dbad ||_fade >=_afdgf {return false ,nil ;};_add :=(_dbad +7)>>3;switch {case _faefc ==0:for _adbdb =_fade ;_adbdb < _afdgf ;_adbdb ,_beba ,_gce =_adbdb +1,_beba +bm1 .RowStride ,_gce +bm2 .RowStride {for _gdb =0;_gdb < _add ;_gdb ++{_dgac =bm1 .Data [_beba +_gdb ]&bm2 .Data [_gce +_gdb ];_bfe +=tab [_dgac ];};if _bfe >=_ggfe {return true ,nil ;};if _agddf :=_bfe +downcount [_adbdb ]-_edag ;_agddf < _ggfe {return false ,nil ;};};case _faefc > 0&&_adfdc < _add :for _adbdb =_fade ;_adbdb < _afdgf ;_adbdb ,_beba ,_gce =_adbdb +1,_beba +bm1 .RowStride ,_gce +bm2 .RowStride {_fdaag =bm1 .Data [_beba ];_cfbe =bm2 .Data [_gce ]>>uint (_faefc );_dgac =_fdaag &_cfbe ;_bfe +=tab [_dgac ];for _gdb =1;_gdb < _adfdc ;_gdb ++{_fdaag =bm1 .Data [_beba +_gdb ];_cfbe =bm2 .Data [_gce +_gdb ]>>uint (_faefc )|bm2 .Data [_gce +_gdb -1]<<uint (8-_faefc );_dgac =_fdaag &_cfbe ;_bfe +=tab [_dgac ];};_fdaag =bm1 .Data [_beba +_gdb ];_cfbe =bm2 .Data [_gce +_gdb -1]<<uint (8-_faefc );_dgac =_fdaag &_cfbe ;_bfe +=tab [_dgac ];if _bfe >=_ggfe {return true ,nil ;}else if _bfe +downcount [_adbdb ]-_edag < _ggfe {return false ,nil ;};};case _faefc > 0&&_adfdc >=_add :for _adbdb =_fade ;_adbdb < _afdgf ;_adbdb ,_beba ,_gce =_adbdb +1,_beba +bm1 .RowStride ,_gce +bm2 .RowStride {_fdaag =bm1 .Data [_beba ];_cfbe =bm2 .Data [_gce ]>>uint (_faefc );_dgac =_fdaag &_cfbe ;_bfe +=tab [_dgac ];for _gdb =1;_gdb < _add ;_gdb ++{_fdaag =bm1 .Data [_beba +_gdb ];_cfbe =bm2 .Data [_gce +_gdb ]>>uint (_faefc );_cfbe |=bm2 .Data [_gce +_gdb -1]<<uint (8-_faefc );_dgac =_fdaag &_cfbe ;_bfe +=tab [_dgac ];};if _bfe >=_ggfe {return true ,nil ;}else if _bfe +downcount [_adbdb ]-_edag < _ggfe {return false ,nil ;};};case _add < _adfdc :for _adbdb =_fade ;_adbdb < _afdgf ;_adbdb ,_beba ,_gce =_adbdb +1,_beba +bm1 .RowStride ,_gce +bm2 .RowStride {for _gdb =0;_gdb < _add ;_gdb ++{_fdaag =bm1 .Data [_beba +_gdb ];_cfbe =bm2 .Data [_gce +_gdb ]<<uint (-_faefc );_cfbe |=bm2 .Data [_gce +_gdb +1]>>uint (8+_faefc );_dgac =_fdaag &_cfbe ;_bfe +=tab [_dgac ];};if _bfe >=_ggfe {return true ,nil ;}else if _faff :=_bfe +downcount [_adbdb ]-_edag ;_faff < _ggfe {return false ,nil ;};};case _adfdc >=_add :for _adbdb =_fade ;_adbdb < _afdgf ;_adbdb ,_beba ,_gce =_adbdb +1,_beba +bm1 .RowStride ,_gce +bm2 .RowStride {for _gdb =0;_gdb < _add ;_gdb ++{_fdaag =bm1 .Data [_beba +_gdb ];_cfbe =bm2 .Data [_gce +_gdb ]<<uint (-_faefc );_cfbe |=bm2 .Data [_gce +_gdb +1]>>uint (8+_faefc );_dgac =_fdaag &_cfbe ;_bfe +=tab [_dgac ];};_fdaag =bm1 .Data [_beba +_gdb ];_cfbe =bm2 .Data [_gce +_gdb ]<<uint (-_faefc );_dgac =_fdaag &_cfbe ;_bfe +=tab [_dgac ];if _bfe >=_ggfe {return true ,nil ;}else if _bfe +downcount [_adbdb ]-_edag < _ggfe {return false ,nil ;};};};_gaga :=float32 (_bfe )*float32 (_bfe )/(float32 (area1 )*float32 (area2 ));if _gaga >=scoreThreshold {_fg .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_bfe ,_ggfe ,_gaga ,scoreThreshold );};return false ,nil ;};func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _fagd ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_cabf ,_cafae :=p1 .Width ,p1 .Height ;_bagc ,_egff :=p3 .Width ,p3 .Height ;if _cc .Abs (_cabf -_bagc )> maxDiffW {return false ,nil ;};if _cc .Abs (_cafae -_egff )> maxDiffH {return false ,nil ;};_feef :=int (delX +_cc .Sign (delX )*0.5);_egg :=int (delY +_cc .Sign (delY )*0.5);var _fabbd error ;_ebgb :=p1 .CreateTemplate ();if _fabbd =_ebgb .RasterOperation (0,0,_cabf ,_cafae ,PixSrc ,p1 ,0,0);_fabbd !=nil {return false ,_d .Wrap (_fabbd ,_fagd ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _fabbd =_ebgb .RasterOperation (_feef ,_egg ,_cabf ,_cafae ,PixNotSrcAndDst ,p4 ,0,0);_fabbd !=nil {return false ,_d .Wrap (_fabbd ,_fagd ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _ebgb .Zero (){return false ,nil ;};if _fabbd =_ebgb .RasterOperation (_feef ,_egg ,_bagc ,_egff ,PixSrc ,p3 ,0,0);_fabbd !=nil {return false ,_d .Wrap (_fabbd ,_fagd ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _fabbd =_ebgb .RasterOperation (0,0,_bagc ,_egff ,PixNotSrcAndDst ,p2 ,0,0);_fabbd !=nil {return false ,_d .Wrap (_fabbd ,_fagd ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _ebgb .Zero (),nil ;};type fillSegment struct{_dbef int ;_ddac int ;_fbfbc int ;_fbadd int ;};func (_ebg *Bitmap )GetByte (index int )(byte ,error ){if index > len (_ebg .Data )-1||index < 0{return 0,_d .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );};return _ebg .Data [index ],nil ;};func _debf (_efe *Bitmap ,_cgcf *_cc .Stack ,_dfgc ,_ecbbf ,_acgc int )(_eggc *_ge .Rectangle ,_dccc error ){const _ebaba ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _efe ==nil {return nil ,_d .Error (_ebaba ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _cgcf ==nil {return nil ,_d .Error (_ebaba ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};switch _acgc {case 4:if _eggc ,_dccc =_ffbfc (_efe ,_cgcf ,_dfgc ,_ecbbf );_dccc !=nil {return nil ,_d .Wrap (_dccc ,_ebaba ,"");};return _eggc ,nil ;case 8:if _eggc ,_dccc =_cadb (_efe ,_cgcf ,_dfgc ,_ecbbf );_dccc !=nil {return nil ,_d .Wrap (_dccc ,_ebaba ,"");};return _eggc ,nil ;default:return nil ,_d .Errorf (_ebaba ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_acgc );};};func _dg (_bfb *Bitmap ,_ddg int )(*Bitmap ,error ){const _ggb ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _bfb ==nil {return nil ,_d .Error (_ggb ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _ddg ==1{return _bda (nil ,_bfb );};if _ddg !=2&&_ddg !=4&&_ddg !=8{return nil ,_d .Error (_ggb ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");};_fga :=_ddg *_bfb .Width ;_edg :=_ddg *_bfb .Height ;_fe :=New (_fga ,_edg );var _ag error ;switch _ddg {case 2:_ag =_gd (_fe ,_bfb );case 4:_ag =_ce (_fe ,_bfb );case 8:_ag =_ef (_fe ,_bfb );};if _ag !=nil {return nil ,_d .Wrap (_ag ,_ggb ,"");};return _fe ,nil ;};func (_eebd Points )GetIntX (i int )(int ,error ){if i >=len (_eebd ){return 0,_d .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return int (_eebd [i ].X ),nil ;};func _cadb (_egaac *Bitmap ,_fdgba *_cc .Stack ,_daee ,_bgbb int )(_bagd *_ge .Rectangle ,_bgfaf error ){const _afacd ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _egaac ==nil {return nil ,_d .Error (_afacd ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _fdgba ==nil {return nil ,_d .Error (_afacd ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_gefff ,_fefcc :=_egaac .Width ,_egaac .Height ;_ffga :=_gefff -1;_agfb :=_fefcc -1;if _daee < 0||_daee > _ffga ||_bgbb < 0||_bgbb > _agfb ||!_egaac .GetPixel (_daee ,_bgbb ){return nil ,nil ;};_badef :=_ge .Rect (100000,100000,0,0);if _bgfaf =_bafc (_fdgba ,_daee ,_daee ,_bgbb ,1,_agfb ,&_badef );_bgfaf !=nil {return nil ,_d .Wrap (_bgfaf ,_afacd ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _bgfaf =_bafc (_fdgba ,_daee ,_daee ,_bgbb +1,-1,_agfb ,&_badef );_bgfaf !=nil {return nil ,_d .Wrap (_bgfaf ,_afacd ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_badef .Min .X ,_badef .Max .X =_daee ,_daee ;_badef .Min .Y ,_badef .Max .Y =_bgbb ,_bgbb ;var (_ebgc *fillSegment ;_geaf int ;);for _fdgba .Len ()> 0{if _ebgc ,_bgfaf =_gfbb (_fdgba );_bgfaf !=nil {return nil ,_d .Wrap (_bgfaf ,_afacd ,"");};_bgbb =_ebgc ._fbfbc ;for _daee =_ebgc ._dbef -1;_daee >=0&&_egaac .GetPixel (_daee ,_bgbb );_daee --{if _bgfaf =_egaac .SetPixel (_daee ,_bgbb ,0);_bgfaf !=nil {return nil ,_d .Wrap (_bgfaf ,_afacd ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _daee >=_ebgc ._dbef -1{for {for _daee ++;_daee <=_ebgc ._ddac +1&&_daee <=_ffga &&!_egaac .GetPixel (_daee ,_bgbb );_daee ++{};_geaf =_daee ;if !(_daee <=_ebgc ._ddac +1&&_daee <=_ffga ){break ;};for ;_daee <=_ffga &&_egaac .GetPixel (_daee ,_bgbb );_daee ++{if _bgfaf =_egaac .SetPixel (_daee ,_bgbb ,0);_bgfaf !=nil {return nil ,_d .Wrap (_bgfaf ,_afacd ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _bgfaf =_bafc (_fdgba ,_geaf ,_daee -1,_ebgc ._fbfbc ,_ebgc ._fbadd ,_agfb ,&_badef );_bgfaf !=nil {return nil ,_d .Wrap (_bgfaf ,_afacd ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _daee > _ebgc ._ddac {if _bgfaf =_bafc (_fdgba ,_ebgc ._ddac +1,_daee -1,_ebgc ._fbfbc ,-_ebgc ._fbadd ,_agfb ,&_badef );_bgfaf !=nil {return nil ,_d .Wrap (_bgfaf ,_afacd ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};};continue ;};_geaf =_daee +1;if _geaf < _ebgc ._dbef {if _bgfaf =_bafc (_fdgba ,_geaf ,_ebgc ._dbef -1,_ebgc ._fbfbc ,-_ebgc ._fbadd ,_agfb ,&_badef );_bgfaf !=nil {return nil ,_d .Wrap (_bgfaf ,_afacd ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");};};_daee =_ebgc ._dbef ;for {for ;_daee <=_ffga &&_egaac .GetPixel (_daee ,_bgbb );_daee ++{if _bgfaf =_egaac .SetPixel (_daee ,_bgbb ,0);_bgfaf !=nil {return nil ,_d .Wrap (_bgfaf ,_afacd ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _bgfaf =_bafc (_fdgba ,_geaf ,_daee -1,_ebgc ._fbfbc ,_ebgc ._fbadd ,_agfb ,&_badef );_bgfaf !=nil {return nil ,_d .Wrap (_bgfaf ,_afacd ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _daee > _ebgc ._ddac {if _bgfaf =_bafc (_fdgba ,_ebgc ._ddac +1,_daee -1,_ebgc ._fbfbc ,-_ebgc ._fbadd ,_agfb ,&_badef );_bgfaf !=nil {return nil ,_d .Wrap (_bgfaf ,_afacd ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");};};for _daee ++;_daee <=_ebgc ._ddac +1&&_daee <=_ffga &&!_egaac .GetPixel (_daee ,_bgbb );_daee ++{};_geaf =_daee ;if !(_daee <=_ebgc ._ddac +1&&_daee <=_ffga ){break ;};};};_badef .Max .X ++;_badef .Max .Y ++;return &_badef ,nil ;};func _ccdf (_afe ,_egab *Bitmap ,_bfac *Selection )(*Bitmap ,error ){const _badc ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";var _fadfe ,_dfga int ;if _egab ==nil {return nil ,_d .Error (_badc ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _bfac ==nil {return nil ,_d .Error (_badc ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};_fadfe =_bfac .Width ;_dfga =_bfac .Height ;if _fadfe ==0||_dfga ==0{return nil ,_d .Error (_badc ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _afe ==nil {return _egab .createTemplate (),nil ;};if _gbac :=_afe .resizeImageData (_egab );_gbac !=nil {return nil ,_gbac ;};return _afe ,nil ;};func (_acf *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _acf .Copy (),nil ;};_fbb ,_cdg :=_acf .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _cdg !=nil {return nil ,_d .Wrap (_cdg ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");};return _fbb ,nil ;};func (_efff *Bitmap )connComponentsBB (_cafab int )(_ddceg *Boxes ,_dgbg error ){const _dfaf ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";if _cafab !=4&&_cafab !=8{return nil ,_d .Error (_dfaf ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _efff .Zero (){return &Boxes {},nil ;};_efff .setPadBits (0);_dda ,_dgbg :=_bda (nil ,_efff );if _dgbg !=nil {return nil ,_d .Wrap (_dgbg ,_dfaf ,"\u0062\u006d\u0031");};_dbgd :=&_cc .Stack {};_dbgd .Aux =&_cc .Stack {};_ddceg =&Boxes {};var (_gea ,_ccaf int ;_dfbfb _ge .Point ;_bffc bool ;_bdca *_ge .Rectangle ;);for {if _dfbfb ,_bffc ,_dgbg =_dda .nextOnPixel (_ccaf ,_gea );_dgbg !=nil {return nil ,_d .Wrap (_dgbg ,_dfaf ,"");};if !_bffc {break ;};if _bdca ,_dgbg =_debf (_dda ,_dbgd ,_dfbfb .X ,_dfbfb .Y ,_cafab );_dgbg !=nil {return nil ,_d .Wrap (_dgbg ,_dfaf ,"");};if _dgbg =_ddceg .Add (_bdca );_dgbg !=nil {return nil ,_d .Wrap (_dgbg ,_dfaf ,"");};_ccaf =_dfbfb .X ;_gea =_dfbfb .Y ;};return _ddceg ,nil ;};func TstVSymbol (t *_dc .T ,scale ...int )*Bitmap {_fdfe ,_befe :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_c .NoError (t ,_befe );return TstGetScaledSymbol (t ,_fdfe ,scale ...);};func (_ebee *byWidth )Len ()int {return len (_ebee .Values )};func (_eadc *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _eadc .removeBorderGeneral (left ,right ,top ,bot );};const (MopDilation MorphOperation =iota ;MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);func (_cgbbg *Bitmap )centroid (_bdec ,_bccdc []int )(Point ,error ){_eegc :=Point {};_cgbbg .setPadBits (0);if len (_bdec )==0{_bdec =_cccf ();};if len (_bccdc )==0{_bccdc =_adff ();};var _adeb ,_acec ,_cffd ,_fafe ,_gada ,_fgce int ;var _cagca byte ;for _gada =0;_gada < _cgbbg .Height ;_gada ++{_bggb :=_cgbbg .RowStride *_gada ;_fafe =0;for _fgce =0;_fgce < _cgbbg .RowStride ;_fgce ++{_cagca =_cgbbg .Data [_bggb +_fgce ];if _cagca !=0{_fafe +=_bccdc [_cagca ];_adeb +=_bdec [_cagca ]+_fgce *8*_bccdc [_cagca ];};};_cffd +=_fafe ;_acec +=_fafe *_gada ;};if _cffd !=0{_eegc .X =float32 (_adeb )/float32 (_cffd );_eegc .Y =float32 (_acec )/float32 (_cffd );};return _eegc ,nil ;};func (_gdbac *Bitmaps )CountPixels ()*_cc .NumSlice {_aage :=&_cc .NumSlice {};for _ ,_egae :=range _gdbac .Values {_aage .AddInt (_egae .CountPixels ());};return _aage ;};func (_dec *Bitmap )String ()string {var _dgaa ="\u000a";for _gabe :=0;_gabe < _dec .Height ;_gabe ++{var _bgdfb string ;for _ccf :=0;_ccf < _dec .Width ;_ccf ++{_edca :=_dec .GetPixel (_ccf ,_gabe );if _edca {_bgdfb +="\u0031";}else {_bgdfb +="\u0030";};};_dgaa +=_bgdfb +"\u000a";};return _dgaa ;};func (_cdeg *ClassedPoints )SortByX (){_cdeg ._decb =_cdeg .xSortFunction ();_g .Sort (_cdeg )};func (_fccg *Bitmap )clipRectangle (_bfc ,_fdgb *_ge .Rectangle )(_bdg *Bitmap ,_afdg error ){const _aaa ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";if _bfc ==nil {return nil ,_d .Error (_aaa ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_gafe ,_gdeg :=_fccg .Width ,_fccg .Height ;_eaa ,_afdg :=ClipBoxToRectangle (_bfc ,_gafe ,_gdeg );if _afdg !=nil {_fg .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_afdg );return nil ,nil ;};_gac ,_cagd :=_eaa .Min .X ,_eaa .Min .Y ;_fdgd ,_eebf :=_eaa .Max .X -_eaa .Min .X ,_eaa .Max .Y -_eaa .Min .Y ;_bdg =New (_fdgd ,_eebf );_bdg .Text =_fccg .Text ;if _afdg =_bdg .RasterOperation (0,0,_fdgd ,_eebf ,PixSrc ,_fccg ,_gac ,_cagd );_afdg !=nil {return nil ,_d .Wrap (_afdg ,_aaa ,"");};if _fdgb !=nil {*_fdgb =*_eaa ;};return _bdg ,nil ;};func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _fdg ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";_eb :=_efa (width ,height );_eb .Data =data ;if _cda :=((width *height )+7)>>3;len (data )< _cda {return nil ,_d .Errorf (_fdg ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_cda );};if _bace :=_eb .addPadBits ();_bace !=nil {return nil ,_d .Wrap (_bace ,_fdg ,"");};return _eb ,nil ;};func (_ccdd Points )XSorter ()func (_gbebd ,_ebeb int )bool {return func (_eacg ,_dcgf int )bool {return _ccdd [_eacg ].X < _ccdd [_dcgf ].X };};type SizeSelection int ;type Bitmaps struct{Values []*Bitmap ;Boxes []*_ge .Rectangle ;};func (_fbabd *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _dbac ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _fbabd ==nil {return nil ,_d .Error (_dbac ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if i > len (_fbabd .Values )-1{return nil ,_d .Errorf (_dbac ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _fbabd .Values [i ],nil ;};func (_cce *Bitmap )setEightFullBytes (_adba int ,_gebe uint64 )error {if _adba +7> len (_cce .Data )-1{return _d .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_cce .Data [_adba ]=byte ((_gebe &0xff00000000000000)>>56);_cce .Data [_adba +1]=byte ((_gebe &0xff000000000000)>>48);_cce .Data [_adba +2]=byte ((_gebe &0xff0000000000)>>40);_cce .Data [_adba +3]=byte ((_gebe &0xff00000000)>>32);_cce .Data [_adba +4]=byte ((_gebe &0xff000000)>>24);_cce .Data [_adba +5]=byte ((_gebe &0xff0000)>>16);_cce .Data [_adba +6]=byte ((_gebe &0xff00)>>8);_cce .Data [_adba +7]=byte (_gebe &0xff);return nil ;};const (Vanilla Color =iota ;Chocolate ;);func (_bfdf *Bitmap )clearAll ()error {return _bfdf .RasterOperation (0,0,_bfdf .Width ,_bfdf .Height ,PixClr ,nil ,0,0);};func Centroids (bms []*Bitmap )(*Points ,error ){_ecdd :=make ([]Point ,len (bms ));_gcbe :=_cccf ();_bgfg :=_adff ();var _gba error ;for _fbfa ,_acc :=range bms {_ecdd [_fbfa ],_gba =_acc .centroid (_gcbe ,_bgfg );if _gba !=nil {return nil ,_gba ;};};_feb :=Points (_ecdd );return &_feb ,nil ;};func _bcde (_fedf ,_fcca int )int {if _fedf < _fcca {return _fedf ;};return _fcca ;};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func (_eab *Bitmap )GetVanillaData ()[]byte {if _eab .Color ==Chocolate {_eab .inverseData ();};return _eab .Data ;};func (_gda *Bitmap )setFourBytes (_agge int ,_eee uint32 )error {if _agge +3> len (_gda .Data )-1{return _d .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_agge );};_gda .Data [_agge ]=byte ((_eee &0xff000000)>>24);_gda .Data [_agge +1]=byte ((_eee &0xff0000)>>16);_gda .Data [_agge +2]=byte ((_eee &0xff00)>>8);_gda .Data [_agge +3]=byte (_eee &0xff);return nil ;};func _eegf (_ebbg *Bitmap ,_ebdd *Bitmap ,_defa *Selection ,_dbcc **Bitmap )(*Bitmap ,error ){const _bbba ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";if _ebdd ==nil {return nil ,_d .Error (_bbba ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");};if _defa ==nil {return nil ,_d .Error (_bbba ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");};_eggb ,_gebfc :=_defa .Height ,_defa .Width ;if _eggb ==0||_gebfc ==0{return nil ,_d .Error (_bbba ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _ebbg ==nil {_ebbg =_ebdd .createTemplate ();*_dbcc =_ebdd ;return _ebbg ,nil ;};_ebbg .Width =_ebdd .Width ;_ebbg .Height =_ebdd .Height ;_ebbg .RowStride =_ebdd .RowStride ;_ebbg .Color =_ebdd .Color ;_ebbg .Data =make ([]byte ,_ebdd .RowStride *_ebdd .Height );if _ebbg ==_ebdd {*_dbcc =_ebdd .Copy ();}else {*_dbcc =_ebdd ;};return _ebbg ,nil ;};type Component int ;func _agc (_begd *Bitmap ,_cd ...int )(_gfb *Bitmap ,_fed error ){const _caa ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";if _begd ==nil {return nil ,_d .Error (_caa ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_cd )==0||len (_cd )> 4{return nil ,_d .Error (_caa ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");};if _cd [0]<=0{_fg .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_gfb ,_fed =_bda (nil ,_begd );if _fed !=nil {return nil ,_d .Wrap (_fed ,_caa ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");};return _gfb ,nil ;};_cf :=_faf ();_gfb =_begd ;for _cege ,_bce :=range _cd {if _bce <=0{break ;};_gfb ,_fed =_daf (_gfb ,_bce ,_cf );if _fed !=nil {return nil ,_d .Wrapf (_fed ,_caa ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_cege );};};return _gfb ,nil ;};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _bda (d ,s )};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);const (CmbOpOr CombinationOperator =iota ;CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func TstISymbol (t *_dc .T ,scale ...int )*Bitmap {_fgge ,_cedg :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_c .NoError (t ,_cedg );return TstGetScaledSymbol (t ,_fgge ,scale ...);};func _dbgg (_accag ,_afbaa *Bitmap ,_dbabb ,_dfdg int )(*Bitmap ,error ){const _fbed ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _afbaa ==nil {_fg .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");return nil ,_d .Error (_fbed ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _dbabb < 1||_dfdg < 1{return nil ,_d .Error (_fbed ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");};if _dbabb ==1&&_dfdg ==1{_eecab ,_ggec :=_bda (_accag ,_afbaa );if _ggec !=nil {return nil ,_d .Wrap (_ggec ,_fbed ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _eecab ,nil ;};if _dbabb ==1||_dfdg ==1{_dfge :=SelCreateBrick (_dfdg ,_dbabb ,_dfdg /2,_dbabb /2,SelHit );_caccc ,_dacef :=_cbbd (_accag ,_afbaa ,_dfge );if _dacef !=nil {return nil ,_d .Wrap (_dacef ,_fbed ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");};return _caccc ,nil ;};_dfgef :=SelCreateBrick (1,_dbabb ,0,_dbabb /2,SelHit );_ebggb :=SelCreateBrick (_dfdg ,1,_dfdg /2,0,SelHit );_ced ,_dafg :=_cbbd (nil ,_afbaa ,_dfgef );if _dafg !=nil {return nil ,_d .Wrap (_dafg ,_fbed ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};_accag ,_dafg =_cbbd (_accag ,_ced ,_ebggb );if _dafg !=nil {return nil ,_d .Wrap (_dafg ,_fbed ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _accag ,nil ;};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _bfaga (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func TstImageBitmapData ()[]byte {return _fcdb .Data };const (_ SizeComparison =iota ;SizeSelectIfLT ;SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func TstWriteSymbols (t *_dc .T ,bms *Bitmaps ,src *Bitmap ){for _cfag :=0;_cfag < bms .Size ();_cfag ++{_ebdf :=bms .Values [_cfag ];_cdfe :=bms .Boxes [_cfag ];_dabb :=src .RasterOperation (_cdfe .Min .X ,_cdfe .Min .Y ,_ebdf .Width ,_ebdf .Height ,PixSrc ,_ebdf ,0,0);_c .NoError (t ,_dabb );};};func (_agf *Bitmap )GetBitOffset (x int )int {return x &0x07};func (_bbgdd *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_eea *Boxes ,_ccbda error ){const _adgc ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";if _bbgdd ==nil {return nil ,_d .Error (_adgc ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_bbgdd )==0{return _bbgdd ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_d .Errorf (_adgc ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_d .Errorf (_adgc ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );};_bfdfd :=_bbgdd .makeSizeIndicator (width ,height ,tp ,relation );_dbag ,_ccbda :=_bbgdd .selectWithIndicator (_bfdfd );if _ccbda !=nil {return nil ,_d .Wrap (_ccbda ,_adgc ,"");};return _dbag ,nil ;};func _bbbg (_gfdeg *Bitmap ,_cbeb ,_dfgeb int ,_bgcbe ,_cgcc int ,_bbgc RasterOperator ,_fdage *Bitmap ,_aefb ,_feecd int )error {var _gcdbe ,_beae ,_acff ,_gfffd int ;if _cbeb < 0{_aefb -=_cbeb ;_bgcbe +=_cbeb ;_cbeb =0;};if _aefb < 0{_cbeb -=_aefb ;_bgcbe +=_aefb ;_aefb =0;};_gcdbe =_cbeb +_bgcbe -_gfdeg .Width ;if _gcdbe > 0{_bgcbe -=_gcdbe ;};_beae =_aefb +_bgcbe -_fdage .Width ;if _beae > 0{_bgcbe -=_beae ;};if _dfgeb < 0{_feecd -=_dfgeb ;_cgcc +=_dfgeb ;_dfgeb =0;};if _feecd < 0{_dfgeb -=_feecd ;_cgcc +=_feecd ;_feecd =0;};_acff =_dfgeb +_cgcc -_gfdeg .Height ;if _acff > 0{_cgcc -=_acff ;};_gfffd =_feecd +_cgcc -_fdage .Height ;if _gfffd > 0{_cgcc -=_gfffd ;};if _bgcbe <=0||_cgcc <=0{return nil ;};var _aacf error ;switch {case _cbeb &7==0&&_aefb &7==0:_aacf =_deb (_gfdeg ,_cbeb ,_dfgeb ,_bgcbe ,_cgcc ,_bbgc ,_fdage ,_aefb ,_feecd );case _cbeb &7==_aefb &7:_aacf =_fbbac (_gfdeg ,_cbeb ,_dfgeb ,_bgcbe ,_cgcc ,_bbgc ,_fdage ,_aefb ,_feecd );default:_aacf =_ecdbb (_gfdeg ,_cbeb ,_dfgeb ,_bgcbe ,_cgcc ,_bbgc ,_fdage ,_aefb ,_feecd );};if _aacf !=nil {return _d .Wrap (_aacf ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};func TstFrameBitmapData ()[]byte {return _efafg .Data };var _ _g .Interface =&ClassedPoints {};func (_bgga *Boxes )Get (i int )(*_ge .Rectangle ,error ){const _ceca ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _bgga ==nil {return nil ,_d .Error (_ceca ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if i > len (*_bgga )-1{return nil ,_d .Errorf (_ceca ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_bgga )[i ],nil ;};func (_dea *Bitmap )Equivalent (s *Bitmap )bool {return _dea .equivalent (s )};func (_efde *Bitmap )GetUnpaddedData ()([]byte ,error ){_cgc :=uint (_efde .Width &0x07);if _cgc ==0{return _efde .Data ,nil ;};_dgf :=_efde .Width *_efde .Height ;if _dgf %8!=0{_dgf >>=3;_dgf ++;}else {_dgf >>=3;};_fcfa :=make ([]byte ,_dgf );_cec :=_db .NewWriterMSB (_fcfa );const _edd ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";for _cfe :=0;_cfe < _efde .Height ;_cfe ++{for _fgf :=0;_fgf < _efde .RowStride ;_fgf ++{_efab :=_efde .Data [_cfe *_efde .RowStride +_fgf ];if _fgf !=_efde .RowStride -1{_gbc :=_cec .WriteByte (_efab );if _gbc !=nil {return nil ,_d .Wrap (_gbc ,_edd ,"");};continue ;};for _cbae :=uint (0);_cbae < _cgc ;_cbae ++{_bcd :=_cec .WriteBit (int (_efab >>(7-_cbae )&0x01));if _bcd !=nil {return nil ,_d .Wrap (_bcd ,_edd ,"");};};};};return _fcfa ,nil ;};func TstWordBitmap (t *_dc .T ,scale ...int )*Bitmap {_cded :=1;if len (scale )> 0{_cded =scale [0];};_cada :=3;_acbe :=9+7+15+2*_cada ;_badf :=5+_cada +5;_cdgcb :=New (_acbe *_cded ,_badf *_cded );_fdaea :=&Bitmaps {};var _bdgbe *int ;_cada *=_cded ;_ffded :=0;_bdgbe =&_ffded ;_gacff :=0;_ceda :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_fdaea ,_ceda ,_bdgbe ,_gacff ,1*_cded );_ceda =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_fdaea ,_ceda ,_bdgbe ,_gacff ,_cada );_ceda =TstISymbol (t ,scale ...);TstAddSymbol (t ,_fdaea ,_ceda ,_bdgbe ,_gacff ,1*_cded );_ceda =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_fdaea ,_ceda ,_bdgbe ,_gacff ,_cada );_ceda =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_fdaea ,_ceda ,_bdgbe ,_gacff ,1*_cded );_ceda =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_fdaea ,_ceda ,_bdgbe ,_gacff ,1*_cded );_ceda =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_fdaea ,_ceda ,_bdgbe ,_gacff ,0);*_bdgbe =0;_gacff =5*_cded +_cada ;_ceda =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_fdaea ,_ceda ,_bdgbe ,_gacff ,1*_cded );_ceda =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_fdaea ,_ceda ,_bdgbe ,_gacff ,_cada );_ceda =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_fdaea ,_ceda ,_bdgbe ,_gacff ,1*_cded );_ceda =TstESymbol (t ,scale ...);TstAddSymbol (t ,_fdaea ,_ceda ,_bdgbe ,_gacff ,1*_cded );_ceda =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_fdaea ,_ceda ,_bdgbe ,_gacff ,1*_cded );_ceda =TstESymbol (t ,scale ...);TstAddSymbol (t ,_fdaea ,_ceda ,_bdgbe ,_gacff ,1*_cded );_ceda =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_fdaea ,_ceda ,_bdgbe ,_gacff ,0);TstWriteSymbols (t ,_fdaea ,_cdgcb );return _cdgcb ;};func (_fcfd *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _ccea ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";if _fcfd ==nil {return nil ,_d .Error (_ccea ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_d .Error (_ccea ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};_cfbed :=len (_fcfd .Values );_bffbe :=&Bitmaps {Values :make ([]*Bitmap ,_cfbed ),Boxes :make ([]*_ge .Rectangle ,_cfbed )};var (_dadff ,_cebc *Bitmap ;_ceab *_ge .Rectangle ;_cabb error ;);for _feeb :=0;_feeb < _cfbed ;_feeb ++{if _dadff ,_cabb =_fcfd .GetBitmap (_feeb );_cabb !=nil {return nil ,_d .Wrap (_cabb ,_ccea ,"");};if _ceab ,_cabb =_fcfd .GetBox (_feeb );_cabb !=nil {return nil ,_d .Wrap (_cabb ,_ccea ,"");};if _cebc ,_cabb =s .clipRectangle (_ceab ,nil );_cabb !=nil {return nil ,_d .Wrap (_cabb ,_ccea ,"");};if _cebc ,_cabb =_cebc .And (_dadff );_cabb !=nil {return nil ,_d .Wrap (_cabb ,_ccea ,"");};_bffbe .Values [_feeb ]=_cebc ;_bffbe .Boxes [_feeb ]=_ceab ;};return _bffbe ,nil ;};func (_dgc *Bitmap )Zero ()bool {_faeb :=_dgc .Width /8;_aab :=_dgc .Width &7;var _dba byte ;if _aab !=0{_dba =byte (0xff<<uint (8-_aab ));};var _cga ,_ffed ,_abbg int ;for _ffed =0;_ffed < _dgc .Height ;_ffed ++{_cga =_dgc .RowStride *_ffed ;for _abbg =0;_abbg < _faeb ;_abbg ,_cga =_abbg +1,_cga +1{if _dgc .Data [_cga ]!=0{return false ;};};if _aab > 0{if _dgc .Data [_cga ]&_dba !=0{return false ;};};};return true ;};func (_egga *Bitmaps )WidthSorter ()func (_abbgc ,_acd int )bool {return func (_cfdc ,_fgfbb int )bool {return _egga .Values [_cfdc ].Width < _egga .Values [_fgfbb ].Width };};func (_fbcg *Bitmap )connComponentsBitmapsBB (_ccdg *Bitmaps ,_cceb int )(_bcaa *Boxes ,_ageb error ){const _fdbe ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";if _cceb !=4&&_cceb !=8{return nil ,_d .Error (_fdbe ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _ccdg ==nil {return nil ,_d .Error (_fdbe ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");};if len (_ccdg .Values )> 0{return nil ,_d .Error (_fdbe ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _fbcg .Zero (){return &Boxes {},nil ;};var (_fcec ,_bbeb ,_ggcf ,_effe *Bitmap ;);_fbcg .setPadBits (0);if _fcec ,_ageb =_bda (nil ,_fbcg );_ageb !=nil {return nil ,_d .Wrap (_ageb ,_fdbe ,"\u0062\u006d\u0031");};if _bbeb ,_ageb =_bda (nil ,_fbcg );_ageb !=nil {return nil ,_d .Wrap (_ageb ,_fdbe ,"\u0062\u006d\u0032");};_afa :=&_cc .Stack {};_afa .Aux =&_cc .Stack {};_bcaa =&Boxes {};var (_ffc ,_aga int ;_gfaa _ge .Point ;_beb bool ;_dggg *_ge .Rectangle ;);for {if _gfaa ,_beb ,_ageb =_fcec .nextOnPixel (_ffc ,_aga );_ageb !=nil {return nil ,_d .Wrap (_ageb ,_fdbe ,"");};if !_beb {break ;};if _dggg ,_ageb =_debf (_fcec ,_afa ,_gfaa .X ,_gfaa .Y ,_cceb );_ageb !=nil {return nil ,_d .Wrap (_ageb ,_fdbe ,"");};if _ageb =_bcaa .Add (_dggg );_ageb !=nil {return nil ,_d .Wrap (_ageb ,_fdbe ,"");};if _ggcf ,_ageb =_fcec .clipRectangle (_dggg ,nil );_ageb !=nil {return nil ,_d .Wrap (_ageb ,_fdbe ,"\u0062\u006d\u0033");};if _effe ,_ageb =_bbeb .clipRectangle (_dggg ,nil );_ageb !=nil {return nil ,_d .Wrap (_ageb ,_fdbe ,"\u0062\u006d\u0034");};if _ ,_ageb =_cdae (_ggcf ,_ggcf ,_effe );_ageb !=nil {return nil ,_d .Wrap (_ageb ,_fdbe ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");};if _ageb =_bbeb .RasterOperation (_dggg .Min .X ,_dggg .Min .Y ,_dggg .Dx (),_dggg .Dy (),PixSrcXorDst ,_ggcf ,0,0);_ageb !=nil {return nil ,_d .Wrap (_ageb ,_fdbe ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};_ccdg .AddBitmap (_ggcf );_ffc =_gfaa .X ;_aga =_gfaa .Y ;};_ccdg .Boxes =*_bcaa ;return _bcaa ,nil ;};var (_aafb =_eeg ();_bgcc =_ged ();_cfc =_bbb (););func TstImageBitmap ()*Bitmap {return _fcdb .Copy ()};func init (){const _bbcb ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";_efafg =New (50,40);var _bccg error ;_efafg ,_bccg =_efafg .AddBorder (2,1);if _bccg !=nil {panic (_d .Wrap (_bccg ,_bbcb ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_fcdb ,_bccg =NewWithData (50,22,_aaaa );if _bccg !=nil {panic (_d .Wrap (_bccg ,_bbcb ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};};func TstDSymbol (t *_dc .T ,scale ...int )*Bitmap {_cbg ,_gdfa :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_c .NoError (t ,_gdfa );return TstGetScaledSymbol (t ,_cbg ,scale ...);};func (_ceccb *ClassedPoints )xSortFunction ()func (_dffc int ,_gfgea int )bool {return func (_ggbd ,_ebddc int )bool {return _ceccb .XAtIndex (_ggbd )< _ceccb .XAtIndex (_ebddc )};};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func _gafc (_bcac ,_dcge byte ,_edb CombinationOperator )byte {switch _edb {case CmbOpOr :return _dcge |_bcac ;case CmbOpAnd :return _dcge &_bcac ;case CmbOpXor :return _dcge ^_bcac ;case CmbOpXNor :return ^(_dcge ^_bcac );case CmbOpNot :return ^(_dcge );default:return _dcge ;};};type BoundaryCondition int ;func (_gbcec *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _fbge ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";if _gagb :=_gbcec .validateIntSlice ();_gagb !=nil {return nil ,_d .Wrap (_gagb ,_fbge ,"");};if _gbcec .IntSlice .Size ()==0{return nil ,_d .Error (_fbge ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_gbcec .SortByY ();var (_gggc []*ClassedPoints ;_gfdf int ;);_eafb :=-1;var _cgbbe *ClassedPoints ;for _aaea :=0;_aaea < len (_gbcec .IntSlice );_aaea ++{_gfdf =int (_gbcec .YAtIndex (_aaea ));if _gfdf !=_eafb {_cgbbe =&ClassedPoints {Points :_gbcec .Points };_eafb =_gfdf ;_gggc =append (_gggc ,_cgbbe );};_cgbbe .IntSlice =append (_cgbbe .IntSlice ,_gbcec .IntSlice [_aaea ]);};for _ ,_bacc :=range _gggc {_bacc .SortByX ();};return _gggc ,nil ;};func (_bgf *Bitmap )SetPixel (x ,y int ,pixel byte )error {_bea :=_bgf .GetByteIndex (x ,y );if _bea > len (_bgf .Data )-1{return _d .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_bea );};_cdde :=_bgf .GetBitOffset (x );_efb :=uint (7-_cdde );_gaa :=_bgf .Data [_bea ];var _bbec byte ;if pixel ==1{_bbec =_gaa |(pixel &0x01<<_efb );}else {_bbec =_gaa &^(1<<_efb );};_bgf .Data [_bea ]=_bbec ;return nil ;};func (_gge *Bitmap )SetDefaultPixel (){for _bbd :=range _gge .Data {_gge .Data [_bbd ]=byte (0xff);};};func (_gbda *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _gcgg ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";if i >=_gbda .IntSlice .Size (){return 0,_d .Errorf (_gcgg ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );};return int (_gbda .XAtIndex (i )),nil ;};func (_cddc *Bitmap )GetPixel (x ,y int )bool {_fadf :=_cddc .GetByteIndex (x ,y );_adg :=_cddc .GetBitOffset (x );_caac :=uint (7-_adg );if _fadf > len (_cddc .Data )-1{_fg .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_cddc );return false ;};if (_cddc .Data [_fadf ]>>_caac )&0x01>=1{return true ;};return false ;};func (_egee *Bitmap )Equals (s *Bitmap )bool {if len (_egee .Data )!=len (s .Data )||_egee .Width !=s .Width ||_egee .Height !=s .Height {return false ;};for _agd :=0;_agd < _egee .Height ;_agd ++{_baf :=_agd *_egee .RowStride ;for _eeb :=0;_eeb < _egee .RowStride ;_eeb ++{if _egee .Data [_baf +_eeb ]!=s .Data [_baf +_eeb ]{return false ;};};};return true ;};type Boxes []*_ge .Rectangle ;func (_ddbc CombinationOperator )String ()string {var _gdecc string ;switch _ddbc {case CmbOpOr :_gdecc ="\u004f\u0052";case CmbOpAnd :_gdecc ="\u0041\u004e\u0044";case CmbOpXor :_gdecc ="\u0058\u004f\u0052";case CmbOpXNor :_gdecc ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_gdecc ="\u0052E\u0050\u004c\u0041\u0043\u0045";case CmbOpNot :_gdecc ="\u004e\u004f\u0054";};return _gdecc ;};func (_dbada *Bitmaps )selectByIndicator (_eade *_cc .NumSlice )(_gecde *Bitmaps ,_ggbdd error ){const _bfcg ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";if _dbada ==nil {return nil ,_d .Error (_bfcg ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _eade ==nil {return nil ,_d .Error (_bfcg ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};if len (_dbada .Values )==0{return _dbada ,nil ;};if len (*_eade )!=len (_dbada .Values ){return nil ,_d .Errorf (_bfcg ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_eade ),len (_dbada .Values ));};var _acgb ,_efcc ,_bgee int ;for _efcc =0;_efcc < len (*_eade );_efcc ++{if _acgb ,_ggbdd =_eade .GetInt (_efcc );_ggbdd !=nil {return nil ,_d .Wrap (_ggbdd ,_bfcg ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _acgb ==1{_bgee ++;};};if _bgee ==len (_dbada .Values ){return _dbada ,nil ;};_gecde =&Bitmaps {};_ffcb :=len (_dbada .Values )==len (_dbada .Boxes );for _efcc =0;_efcc < len (*_eade );_efcc ++{if _acgb =int ((*_eade )[_efcc ]);_acgb ==0{continue ;};_gecde .Values =append (_gecde .Values ,_dbada .Values [_efcc ]);if _ffcb {_gecde .Boxes =append (_gecde .Boxes ,_dbada .Boxes [_efcc ]);};};return _gecde ,nil ;};func (_bdcf *Bitmap )SizesEqual (s *Bitmap )bool {if _bdcf ==s {return true ;};if _bdcf .Width !=s .Width ||_bdcf .Height !=s .Height {return false ;};return true ;};func _fcf (_gfd ,_fb *Bitmap ,_gff int ,_gab []byte ,_ae int )(_ege error ){const _afc ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";var (_aee ,_afg ,_deg ,_cca ,_dee ,_bcc ,_dcd ,_fcb int ;_ccd ,_fae uint32 ;_ade ,_aff byte ;_fdc uint16 ;);_bed :=make ([]byte ,4);_cgf :=make ([]byte ,4);for _deg =0;_deg < _gfd .Height -1;_deg ,_cca =_deg +2,_cca +1{_aee =_deg *_gfd .RowStride ;_afg =_cca *_fb .RowStride ;for _dee ,_bcc =0,0;_dee < _ae ;_dee ,_bcc =_dee +4,_bcc +1{for _dcd =0;_dcd < 4;_dcd ++{_fcb =_aee +_dee +_dcd ;if _fcb <=len (_gfd .Data )-1&&_fcb < _aee +_gfd .RowStride {_bed [_dcd ]=_gfd .Data [_fcb ];}else {_bed [_dcd ]=0x00;};_fcb =_aee +_gfd .RowStride +_dee +_dcd ;if _fcb <=len (_gfd .Data )-1&&_fcb < _aee +(2*_gfd .RowStride ){_cgf [_dcd ]=_gfd .Data [_fcb ];}else {_cgf [_dcd ]=0x00;};};_ccd =_ff .BigEndian .Uint32 (_bed );_fae =_ff .BigEndian .Uint32 (_cgf );_fae |=_ccd ;_fae |=_fae <<1;_fae &=0xaaaaaaaa;_ccd =_fae |(_fae <<7);_ade =byte (_ccd >>24);_aff =byte ((_ccd >>8)&0xff);_fcb =_afg +_bcc ;if _fcb +1==len (_fb .Data )-1||_fcb +1>=_afg +_fb .RowStride {_fb .Data [_fcb ]=_gab [_ade ];}else {_fdc =(uint16 (_gab [_ade ])<<8)|uint16 (_gab [_aff ]);if _ege =_fb .setTwoBytes (_fcb ,_fdc );_ege !=nil {return _d .Wrapf (_ege ,_afc ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fcb );};_bcc ++;};};};return nil ;};type Getter interface{GetBitmap ()*Bitmap ;};func TstCSymbol (t *_dc .T )*Bitmap {t .Helper ();_dbda :=New (6,6);_c .NoError (t ,_dbda .SetPixel (1,0,1));_c .NoError (t ,_dbda .SetPixel (2,0,1));_c .NoError (t ,_dbda .SetPixel (3,0,1));_c .NoError (t ,_dbda .SetPixel (4,0,1));_c .NoError (t ,_dbda .SetPixel (0,1,1));_c .NoError (t ,_dbda .SetPixel (5,1,1));_c .NoError (t ,_dbda .SetPixel (0,2,1));_c .NoError (t ,_dbda .SetPixel (0,3,1));_c .NoError (t ,_dbda .SetPixel (0,4,1));_c .NoError (t ,_dbda .SetPixel (5,4,1));_c .NoError (t ,_dbda .SetPixel (1,5,1));_c .NoError (t ,_dbda .SetPixel (2,5,1));_c .NoError (t ,_dbda .SetPixel (3,5,1));_c .NoError (t ,_dbda .SetPixel (4,5,1));return _dbda ;};func (_baca *Bitmap )CountPixels ()int {return _baca .countPixels ()};type shift int ;func (_fggb *byWidth )Swap (i ,j int ){_fggb .Values [i ],_fggb .Values [j ]=_fggb .Values [j ],_fggb .Values [i ];if _fggb .Boxes !=nil {_fggb .Boxes [i ],_fggb .Boxes [j ]=_fggb .Boxes [j ],_fggb .Boxes [i ];};};