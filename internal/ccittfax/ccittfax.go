//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_b "errors";_bb "math";);func _efeb (_ega ,_daf []byte ,_fdf ,_ced ,_fabg int )([]byte ,int ,int ){_efef :=_cfeb (_ega ,_fabg );_gbe :=_ced >=0&&_ega [_ced ]==_fg ||_ced ==-1;_daf ,_fdf =_ffa (_daf ,_fdf ,_cg );var _cae int ;if _ced > -1{_cae =_fabg -_ced ;}else {_cae =_fabg -_ced -1;};_daf ,_fdf =_gda (_daf ,_fdf ,_cae ,_gbe );_gbe =!_gbe ;_bgee :=_efef -_fabg ;_daf ,_fdf =_gda (_daf ,_fdf ,_bgee ,_gbe );_ced =_efef ;return _daf ,_fdf ,_ced ;};func _bbgg (_eadb []byte ,_dbcd int )(bool ,int ,error ){_cda :=_dbcd ;var _edg bool ;_edg ,_dbcd =_gce (_eadb ,_dbcd );if _edg {_edg ,_dbcd =_gce (_eadb ,_dbcd );if _edg {return true ,_dbcd ,nil ;}else {return false ,_cda ,_cb ;};};return false ,_cda ,nil ;};func init (){_c =make (map[int ]code );_c [0]=code {Code :13<<8|3<<6,BitsWritten :10};_c [1]=code {Code :2<<(5+8),BitsWritten :3};_c [2]=code {Code :3<<(6+8),BitsWritten :2};_c [3]=code {Code :2<<(6+8),BitsWritten :2};_c [4]=code {Code :3<<(5+8),BitsWritten :3};_c [5]=code {Code :3<<(4+8),BitsWritten :4};_c [6]=code {Code :2<<(4+8),BitsWritten :4};_c [7]=code {Code :3<<(3+8),BitsWritten :5};_c [8]=code {Code :5<<(2+8),BitsWritten :6};_c [9]=code {Code :4<<(2+8),BitsWritten :6};_c [10]=code {Code :4<<(1+8),BitsWritten :7};_c [11]=code {Code :5<<(1+8),BitsWritten :7};_c [12]=code {Code :7<<(1+8),BitsWritten :7};_c [13]=code {Code :4<<8,BitsWritten :8};_c [14]=code {Code :7<<8,BitsWritten :8};_c [15]=code {Code :12<<8,BitsWritten :9};_c [16]=code {Code :5<<8|3<<6,BitsWritten :10};_c [17]=code {Code :6<<8,BitsWritten :10};_c [18]=code {Code :2<<8,BitsWritten :10};_c [19]=code {Code :12<<8|7<<5,BitsWritten :11};_c [20]=code {Code :13<<8,BitsWritten :11};_c [21]=code {Code :13<<8|4<<5,BitsWritten :11};_c [22]=code {Code :6<<8|7<<5,BitsWritten :11};_c [23]=code {Code :5<<8,BitsWritten :11};_c [24]=code {Code :2<<8|7<<5,BitsWritten :11};_c [25]=code {Code :3<<8,BitsWritten :11};_c [26]=code {Code :12<<8|10<<4,BitsWritten :12};_c [27]=code {Code :12<<8|11<<4,BitsWritten :12};_c [28]=code {Code :12<<8|12<<4,BitsWritten :12};_c [29]=code {Code :12<<8|13<<4,BitsWritten :12};_c [30]=code {Code :6<<8|8<<4,BitsWritten :12};_c [31]=code {Code :6<<8|9<<4,BitsWritten :12};_c [32]=code {Code :6<<8|10<<4,BitsWritten :12};_c [33]=code {Code :6<<8|11<<4,BitsWritten :12};_c [34]=code {Code :13<<8|2<<4,BitsWritten :12};_c [35]=code {Code :13<<8|3<<4,BitsWritten :12};_c [36]=code {Code :13<<8|4<<4,BitsWritten :12};_c [37]=code {Code :13<<8|5<<4,BitsWritten :12};_c [38]=code {Code :13<<8|6<<4,BitsWritten :12};_c [39]=code {Code :13<<8|7<<4,BitsWritten :12};_c [40]=code {Code :6<<8|12<<4,BitsWritten :12};_c [41]=code {Code :6<<8|13<<4,BitsWritten :12};_c [42]=code {Code :13<<8|10<<4,BitsWritten :12};_c [43]=code {Code :13<<8|11<<4,BitsWritten :12};_c [44]=code {Code :5<<8|4<<4,BitsWritten :12};_c [45]=code {Code :5<<8|5<<4,BitsWritten :12};_c [46]=code {Code :5<<8|6<<4,BitsWritten :12};_c [47]=code {Code :5<<8|7<<4,BitsWritten :12};_c [48]=code {Code :6<<8|4<<4,BitsWritten :12};_c [49]=code {Code :6<<8|5<<4,BitsWritten :12};_c [50]=code {Code :5<<8|2<<4,BitsWritten :12};_c [51]=code {Code :5<<8|3<<4,BitsWritten :12};_c [52]=code {Code :2<<8|4<<4,BitsWritten :12};_c [53]=code {Code :3<<8|7<<4,BitsWritten :12};_c [54]=code {Code :3<<8|8<<4,BitsWritten :12};_c [55]=code {Code :2<<8|7<<4,BitsWritten :12};_c [56]=code {Code :2<<8|8<<4,BitsWritten :12};_c [57]=code {Code :5<<8|8<<4,BitsWritten :12};_c [58]=code {Code :5<<8|9<<4,BitsWritten :12};_c [59]=code {Code :2<<8|11<<4,BitsWritten :12};_c [60]=code {Code :2<<8|12<<4,BitsWritten :12};_c [61]=code {Code :5<<8|10<<4,BitsWritten :12};_c [62]=code {Code :6<<8|6<<4,BitsWritten :12};_c [63]=code {Code :6<<8|7<<4,BitsWritten :12};_g =make (map[int ]code );_g [0]=code {Code :53<<8,BitsWritten :8};_g [1]=code {Code :7<<(2+8),BitsWritten :6};_g [2]=code {Code :7<<(4+8),BitsWritten :4};_g [3]=code {Code :8<<(4+8),BitsWritten :4};_g [4]=code {Code :11<<(4+8),BitsWritten :4};_g [5]=code {Code :12<<(4+8),BitsWritten :4};_g [6]=code {Code :14<<(4+8),BitsWritten :4};_g [7]=code {Code :15<<(4+8),BitsWritten :4};_g [8]=code {Code :19<<(3+8),BitsWritten :5};_g [9]=code {Code :20<<(3+8),BitsWritten :5};_g [10]=code {Code :7<<(3+8),BitsWritten :5};_g [11]=code {Code :8<<(3+8),BitsWritten :5};_g [12]=code {Code :8<<(2+8),BitsWritten :6};_g [13]=code {Code :3<<(2+8),BitsWritten :6};_g [14]=code {Code :52<<(2+8),BitsWritten :6};_g [15]=code {Code :53<<(2+8),BitsWritten :6};_g [16]=code {Code :42<<(2+8),BitsWritten :6};_g [17]=code {Code :43<<(2+8),BitsWritten :6};_g [18]=code {Code :39<<(1+8),BitsWritten :7};_g [19]=code {Code :12<<(1+8),BitsWritten :7};_g [20]=code {Code :8<<(1+8),BitsWritten :7};_g [21]=code {Code :23<<(1+8),BitsWritten :7};_g [22]=code {Code :3<<(1+8),BitsWritten :7};_g [23]=code {Code :4<<(1+8),BitsWritten :7};_g [24]=code {Code :40<<(1+8),BitsWritten :7};_g [25]=code {Code :43<<(1+8),BitsWritten :7};_g [26]=code {Code :19<<(1+8),BitsWritten :7};_g [27]=code {Code :36<<(1+8),BitsWritten :7};_g [28]=code {Code :24<<(1+8),BitsWritten :7};_g [29]=code {Code :2<<8,BitsWritten :8};_g [30]=code {Code :3<<8,BitsWritten :8};_g [31]=code {Code :26<<8,BitsWritten :8};_g [32]=code {Code :27<<8,BitsWritten :8};_g [33]=code {Code :18<<8,BitsWritten :8};_g [34]=code {Code :19<<8,BitsWritten :8};_g [35]=code {Code :20<<8,BitsWritten :8};_g [36]=code {Code :21<<8,BitsWritten :8};_g [37]=code {Code :22<<8,BitsWritten :8};_g [38]=code {Code :23<<8,BitsWritten :8};_g [39]=code {Code :40<<8,BitsWritten :8};_g [40]=code {Code :41<<8,BitsWritten :8};_g [41]=code {Code :42<<8,BitsWritten :8};_g [42]=code {Code :43<<8,BitsWritten :8};_g [43]=code {Code :44<<8,BitsWritten :8};_g [44]=code {Code :45<<8,BitsWritten :8};_g [45]=code {Code :4<<8,BitsWritten :8};_g [46]=code {Code :5<<8,BitsWritten :8};_g [47]=code {Code :10<<8,BitsWritten :8};_g [48]=code {Code :11<<8,BitsWritten :8};_g [49]=code {Code :82<<8,BitsWritten :8};_g [50]=code {Code :83<<8,BitsWritten :8};_g [51]=code {Code :84<<8,BitsWritten :8};_g [52]=code {Code :85<<8,BitsWritten :8};_g [53]=code {Code :36<<8,BitsWritten :8};_g [54]=code {Code :37<<8,BitsWritten :8};_g [55]=code {Code :88<<8,BitsWritten :8};_g [56]=code {Code :89<<8,BitsWritten :8};_g [57]=code {Code :90<<8,BitsWritten :8};_g [58]=code {Code :91<<8,BitsWritten :8};_g [59]=code {Code :74<<8,BitsWritten :8};_g [60]=code {Code :75<<8,BitsWritten :8};_g [61]=code {Code :50<<8,BitsWritten :8};_g [62]=code {Code :51<<8,BitsWritten :8};_g [63]=code {Code :52<<8,BitsWritten :8};_f =make (map[int ]code );_f [64]=code {Code :3<<8|3<<6,BitsWritten :10};_f [128]=code {Code :12<<8|8<<4,BitsWritten :12};_f [192]=code {Code :12<<8|9<<4,BitsWritten :12};_f [256]=code {Code :5<<8|11<<4,BitsWritten :12};_f [320]=code {Code :3<<8|3<<4,BitsWritten :12};_f [384]=code {Code :3<<8|4<<4,BitsWritten :12};_f [448]=code {Code :3<<8|5<<4,BitsWritten :12};_f [512]=code {Code :3<<8|12<<3,BitsWritten :13};_f [576]=code {Code :3<<8|13<<3,BitsWritten :13};_f [640]=code {Code :2<<8|10<<3,BitsWritten :13};_f [704]=code {Code :2<<8|11<<3,BitsWritten :13};_f [768]=code {Code :2<<8|12<<3,BitsWritten :13};_f [832]=code {Code :2<<8|13<<3,BitsWritten :13};_f [896]=code {Code :3<<8|18<<3,BitsWritten :13};_f [960]=code {Code :3<<8|19<<3,BitsWritten :13};_f [1024]=code {Code :3<<8|20<<3,BitsWritten :13};_f [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_f [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_f [1216]=code {Code :119<<3,BitsWritten :13};_f [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_f [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_f [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_f [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_f [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_f [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_f [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_f [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_be =make (map[int ]code );_be [64]=code {Code :27<<(3+8),BitsWritten :5};_be [128]=code {Code :18<<(3+8),BitsWritten :5};_be [192]=code {Code :23<<(2+8),BitsWritten :6};_be [256]=code {Code :55<<(1+8),BitsWritten :7};_be [320]=code {Code :54<<8,BitsWritten :8};_be [384]=code {Code :55<<8,BitsWritten :8};_be [448]=code {Code :100<<8,BitsWritten :8};_be [512]=code {Code :101<<8,BitsWritten :8};_be [576]=code {Code :104<<8,BitsWritten :8};_be [640]=code {Code :103<<8,BitsWritten :8};_be [704]=code {Code :102<<8,BitsWritten :9};_be [768]=code {Code :102<<8|1<<7,BitsWritten :9};_be [832]=code {Code :105<<8,BitsWritten :9};_be [896]=code {Code :105<<8|1<<7,BitsWritten :9};_be [960]=code {Code :106<<8,BitsWritten :9};_be [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_be [1088]=code {Code :107<<8,BitsWritten :9};_be [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_be [1216]=code {Code :108<<8,BitsWritten :9};_be [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_be [1344]=code {Code :109<<8,BitsWritten :9};_be [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_be [1472]=code {Code :76<<8,BitsWritten :9};_be [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_be [1600]=code {Code :77<<8,BitsWritten :9};_be [1664]=code {Code :24<<(2+8),BitsWritten :6};_be [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_a =make (map[int ]code );_a [1792]=code {Code :1<<8,BitsWritten :11};_a [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_a [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_a [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_a [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_a [2112]=code {Code :1<<8|4<<4,BitsWritten :12};_a [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_a [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_a [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_a [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_a [2432]=code {Code :1<<8|13<<4,BitsWritten :12};_a [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_a [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_e =make (map[int ]byte );_e [0]=0xFF;_e [1]=0xFE;_e [2]=0xFC;_e [3]=0xF8;_e [4]=0xF0;_e [5]=0xE0;_e [6]=0xC0;_e [7]=0x80;_e [8]=0x00;};func _cfeb (_dbg []byte ,_afb int )int {if _afb >=len (_dbg ){return _afb ;};if _afb < -1{_afb =-1;};var _agg byte ;if _afb > -1{_agg =_dbg [_afb ];}else {_agg =_fg ;};_fdc :=_afb +1;for _fdc < len (_dbg ){if _dbg [_fdc ]!=_agg {break ;};_fdc ++;};return _fdc ;};func (_bagc *Encoder )encodeG32D (_eba [][]byte )[]byte {var _afc []byte ;var _bgf int ;for _bdd :=0;_bdd < len (_eba );_bdd +=_bagc .K {if _bagc .Rows > 0&&!_bagc .EndOfBlock &&_bdd ==_bagc .Rows {break ;};_cefb ,_gedb :=_beeg (_eba [_bdd ],_bgf ,_ed );_afc =_bagc .appendEncodedRow (_afc ,_cefb ,_bgf );if _bagc .EncodedByteAlign {_gedb =0;};_bgf =_gedb ;for _gebab :=_bdd +1;_gebab < (_bdd +_bagc .K )&&_gebab < len (_eba );_gebab ++{if _bagc .Rows > 0&&!_bagc .EndOfBlock &&_gebab ==_bagc .Rows {break ;};_bagce ,_fga :=_ffa (nil ,_bgf ,_gb );var _caaf ,_cfa ,_dadb int ;_cdd :=-1;for _cdd < len (_eba [_gebab ]){_caaf =_cfeb (_eba [_gebab ],_cdd );_cfa =_dadg (_eba [_gebab ],_eba [_gebab -1],_cdd );_dadb =_cfeb (_eba [_gebab -1],_cfa );if _dadb < _caaf {_bagce ,_fga =_fdbb (_bagce ,_fga );_cdd =_dadb ;}else {if _bb .Abs (float64 (_cfa -_caaf ))> 3{_bagce ,_fga ,_cdd =_efeb (_eba [_gebab ],_bagce ,_fga ,_cdd ,_caaf );}else {_bagce ,_fga =_faac (_bagce ,_fga ,_caaf ,_cfa );_cdd =_caaf ;};};};_afc =_bagc .appendEncodedRow (_afc ,_bagce ,_bgf );if _bagc .EncodedByteAlign {_fga =0;};_bgf =_fga %8;};};if _bagc .EndOfBlock {_fdd ,_ :=_abag (_bgf );_afc =_bagc .appendEncodedRow (_afc ,_fdd ,_bgf );};return _afc ;};func init (){for _gg ,_cge :=range _g {_bgcgg (_fc ,_cge ,0,_gg );};for _acd ,_eff :=range _be {_bgcgg (_fc ,_eff ,0,_acd );};for _ddg ,_cbf :=range _c {_bgcgg (_ef ,_cbf ,0,_ddg );};for _gd ,_db :=range _f {_bgcgg (_ef ,_db ,0,_gd );};for _dfb ,_ec :=range _a {_bgcgg (_fc ,_ec ,0,_dfb );_bgcgg (_ef ,_ec ,0,_dfb );};_bgcgg (_gbg ,_ac ,0,0);_bgcgg (_gbg ,_cg ,0,0);_bgcgg (_gbg ,_eg ,0,0);_bgcgg (_gbg ,_ca ,0,0);_bgcgg (_gbg ,_fd ,0,0);_bgcgg (_gbg ,_df ,0,0);_bgcgg (_gbg ,_ee ,0,0);_bgcgg (_gbg ,_ge ,0,0);_bgcgg (_gbg ,_ea ,0,0);};func (_fcc *Encoder )Decode (encoded []byte )([][]byte ,error ){if _fcc .BlackIs1 {_fg =0;_fcbf =1;}else {_fg =1;_fcbf =0;};if _fcc .K ==0{return _fcc .decodeG31D (encoded );};if _fcc .K > 0{return _fcc .decodeG32D (encoded );};if _fcc .K < 4{return _fcc .decodeG4 (encoded );};return nil ,nil ;};func (_fdb *Encoder )encodeG4 (_adb [][]byte )[]byte {_cfb :=make ([][]byte ,len (_adb ));copy (_cfb ,_adb );_cfb =_fabb (_cfb );var _ceab []byte ;var _bbc int ;for _faga :=1;_faga < len (_cfb );_faga ++{if _fdb .Rows > 0&&!_fdb .EndOfBlock &&_faga ==(_fdb .Rows +1){break ;};var _bagg []byte ;var _ccb ,_baed ,_fafa int ;_aba :=_bbc ;_gbac :=-1;for _gbac < len (_cfb [_faga ]){_ccb =_cfeb (_cfb [_faga ],_gbac );_baed =_dadg (_cfb [_faga ],_cfb [_faga -1],_gbac );_fafa =_cfeb (_cfb [_faga -1],_baed );if _fafa < _ccb {_bagg ,_aba =_ffa (_bagg ,_aba ,_ac );_gbac =_fafa ;}else {if _bb .Abs (float64 (_baed -_ccb ))> 3{_bagg ,_aba ,_gbac =_efeb (_cfb [_faga ],_bagg ,_aba ,_gbac ,_ccb );}else {_bagg ,_aba =_faac (_bagg ,_aba ,_ccb ,_baed );_gbac =_ccb ;};};};_ceab =_fdb .appendEncodedRow (_ceab ,_bagg ,_bbc );if _fdb .EncodedByteAlign {_aba =0;};_bbc =_aba %8;};if _fdb .EndOfBlock {_cdf ,_ :=_bbd (_bbc );_ceab =_fdb .appendEncodedRow (_ceab ,_cdf ,_bbc );};return _ceab ;};func _bgcgg (_bde *decodingTreeNode ,_geba code ,_dgc int ,_ebbd int ){_gfc :=_cba (_geba .Code ,_dgc );_dgc ++;if _gfc ==1{if _bde .Right ==nil {_bde .Right =&decodingTreeNode {Val :_gfc };};if _dgc ==_geba .BitsWritten {_bde .Right .RunLen =&_ebbd ;_bde .Right .Code =&_geba ;}else {_bgcgg (_bde .Right ,_geba ,_dgc ,_ebbd );};}else {if _bde .Left ==nil {_bde .Left =&decodingTreeNode {Val :_gfc };};if _dgc ==_geba .BitsWritten {_bde .Left .RunLen =&_ebbd ;_bde .Left .Code =&_geba ;}else {_bgcgg (_bde .Left ,_geba ,_dgc ,_ebbd );};};};func _fbfd (_ffe ,_ceee []byte ,_dga int ,_gdf bool )int {_adbd :=_cfeb (_ceee ,_dga );if _adbd < len (_ceee )&&(_dga ==-1&&_ceee [_adbd ]==_fg ||_dga >=0&&_dga < len (_ffe )&&_ffe [_dga ]==_ceee [_adbd ]||_dga >=len (_ffe )&&_gdf &&_ceee [_adbd ]==_fg ||_dga >=len (_ffe )&&!_gdf &&_ceee [_adbd ]==_fcbf ){_adbd =_cfeb (_ceee ,_adbd );};return _adbd ;};func _ddab (_bgc []byte ,_eed int )(uint16 ,int ,int ){_cgbc :=_eed ;_agd :=_eed /8;_eed %=8;if _agd >=len (_bgc ){return 0,16,_cgbc ;};_ga :=byte (0xFF>>uint (_eed ));_fag :=uint16 ((_bgc [_agd ]&_ga )<<uint (_eed ))<<8;_cgd :=8-_eed ;_agd ++;_eed =0;if _agd >=len (_bgc ){return _fag >>(16-uint (_cgd )),16-_cgd ,_cgbc +_cgd ;};_fag |=uint16 (_bgc [_agd ])<<(8-uint (_cgd ));_cgd +=8;_agd ++;_eed =0;if _agd >=len (_bgc ){return _fag >>(16-uint (_cgd )),16-_cgd ,_cgbc +_cgd ;};if _cgd ==16{return _fag ,0,_cgbc +_cgd ;};_cgf :=16-_cgd ;_fag |=uint16 (_bgc [_agd ]>>(8-uint (_cgf )));return _fag ,0,_cgbc +16;};func _abag (_gac int )([]byte ,int ){var _aad []byte ;for _fgab :=0;_fgab < 6;_fgab ++{_aad ,_gac =_ffa (_aad ,_gac ,_ed );};return _aad ,_gac %8;};func (_ab *Encoder )decodeG31D (_ad []byte )([][]byte ,error ){var _ccf [][]byte ;var _cff int ;for (_cff /8)< len (_ad ){var _eb bool ;_eb ,_cff =_gce (_ad ,_cff );if !_eb {if _ab .EndOfLine {return nil ,_cf ;};}else {for _fa :=0;_fa < 5;_fa ++{_eb ,_cff =_gce (_ad ,_cff );if !_eb {if _fa ==0{break ;};return nil ,_fe ;};};if _eb {break ;};};var _fde []byte ;_fde ,_cff =_ab .decodeRow1D (_ad ,_cff );if _ab .EncodedByteAlign &&_cff %8!=0{_cff +=8-_cff %8;};_ccf =append (_ccf ,_fde );if _ab .Rows > 0&&!_ab .EndOfBlock &&len (_ccf )>=_ab .Rows {break ;};};return _ccf ,nil ;};func _bea (_ecb []byte ,_agab int )(code ,int ,bool ){var (_cee uint16 ;_cbb int ;_ebf int ;);_ebf =_agab ;_cee ,_cbb ,_agab =_ddab (_ecb ,_agab );_gebf ,_gdd :=_gea (_cee ,_cbb );if !_gdd {return code {},_ebf ,false ;};return _gebf ,_ebf +_gebf .BitsWritten ,true ;};func _fabb (_dgac [][]byte )[][]byte {_ceac :=make ([]byte ,len (_dgac [0]));for _dbb :=range _ceac {_ceac [_dbb ]=_fg ;};_dgac =append (_dgac ,[]byte {});for _dbfc :=len (_dgac )-1;_dbfc > 0;_dbfc --{_dgac [_dbfc ]=_dgac [_dbfc -1];};_dgac [0]=_ceac ;return _dgac ;};func _bbd (_ebd int )([]byte ,int ){var _bge []byte ;for _bec :=0;_bec < 2;_bec ++{_bge ,_ebd =_ffa (_bge ,_ebd ,_cd );};return _bge ,_ebd %8;};func (_ged *Encoder )decodeG4 (_ddgg []byte )([][]byte ,error ){_dbf :=make ([]byte ,_ged .Columns );for _ff :=range _dbf {_dbf [_ff ]=_fg ;};_bbe :=make ([][]byte ,1);_bbe [0]=_dbf ;var (_fb bool ;_gc error ;_gba int ;);for (_gba /8)< len (_ddgg ){_fb ,_gba ,_gc =_bbgg (_ddgg ,_gba );if _gc !=nil {return nil ,_gc ;};if _fb {break ;};var (_ddge code ;_edb bool ;);_dg :=true ;var _fcb []byte ;_fbf :=-1;for _fbf < _ged .Columns {_ddge ,_gba ,_edb =_bea (_ddgg ,_gba );if !_edb {return nil ,_ae ;};switch _ddge {case _ac :_fcb ,_fbf =_aca (_bbe ,_fcb ,_dg ,_fbf );case _cg :_fcb ,_gba ,_fbf ,_gc =_dgg (_ddgg ,_fcb ,_gba ,_dg ,_fbf );if _gc !=nil {return nil ,_gc ;};case _eg :_fcb ,_fbf =_ag (_bbe ,_fcb ,_dg ,_fbf ,0);_dg =!_dg ;case _ca :_fcb ,_fbf =_ag (_bbe ,_fcb ,_dg ,_fbf ,1);_dg =!_dg ;case _fd :_fcb ,_fbf =_ag (_bbe ,_fcb ,_dg ,_fbf ,2);_dg =!_dg ;case _df :_fcb ,_fbf =_ag (_bbe ,_fcb ,_dg ,_fbf ,3);_dg =!_dg ;case _ee :_fcb ,_fbf =_ag (_bbe ,_fcb ,_dg ,_fbf ,-1);_dg =!_dg ;case _ge :_fcb ,_fbf =_ag (_bbe ,_fcb ,_dg ,_fbf ,-2);_dg =!_dg ;case _ea :_fcb ,_fbf =_ag (_bbe ,_fcb ,_dg ,_fbf ,-3);_dg =!_dg ;};if len (_fcb )>=_ged .Columns {break ;};};if _ged .EncodedByteAlign &&_gba %8!=0{_gba +=8-_gba %8;};_bbe =append (_bbe ,_fcb );if _ged .Rows > 0&&!_ged .EndOfBlock &&len (_bbe )>=(_ged .Rows +1){break ;};};_bbe =_bbe [1:];return _bbe ,nil ;};func _ffa (_fdag []byte ,_fdac int ,_dgf code )([]byte ,int ){_bgd :=0;for _bgd < _dgf .BitsWritten {_ecef :=_fdac /8;_dgfa :=_fdac %8;if _ecef >=len (_fdag ){_fdag =append (_fdag ,0);};_ccc :=8-_dgfa ;_gca :=_dgf .BitsWritten -_bgd ;if _ccc > _gca {_ccc =_gca ;};if _bgd < 8{_fdag [_ecef ]=_fdag [_ecef ]|byte (_dgf .Code >>uint (8+_dgfa -_bgd ))&_e [8-_ccc -_dgfa ];}else {_fdag [_ecef ]=_fdag [_ecef ]|(byte (_dgf .Code <<uint (_bgd -8))&_e [8-_ccc ])>>uint (_dgfa );};_fdac +=_ccc ;_bgd +=_ccc ;};return _fdag ,_fdac ;};func _aeb (_bdbf uint16 ,_agf int ,_dac bool )(int ,code ){var _ggf *int ;var _bc *code ;if _dac {_ggf ,_bc =_ege (_fc ,_bdbf ,_agf );}else {_ggf ,_bc =_ege (_ef ,_bdbf ,_agf );};if _ggf ==nil {return -1,code {};};return *_ggf ,*_bc ;};func _ag (_dbc [][]byte ,_abc []byte ,_eaf bool ,_cfc ,_de int )([]byte ,int ){_cad :=_fbfd (_abc ,_dbc [len (_dbc )-1],_cfc ,_eaf );_gge :=_cad +_de ;if _cfc ==-1{_abc =_acg (_abc ,_eaf ,_gge -_cfc -1);}else {_abc =_acg (_abc ,_eaf ,_gge -_cfc );};_cfc =_gge ;return _abc ,_cfc ;};func _cba (_dcb uint16 ,_fcbb int )byte {if _fcbb < 8{_dcb >>=8;};_fcbb %=8;_geb :=byte (0x01<<(7-uint (_fcbb )));return (byte (_dcb )&_geb )>>(7-uint (_fcbb ));};func _ebg (_fae []byte ,_ebc bool ,_fba int )(int ,int ){_ccg :=0;for _fba < len (_fae ){if _ebc {if _fae [_fba ]!=_fg {break ;};}else {if _fae [_fba ]!=_fcbf {break ;};};_ccg ++;_fba ++;};return _ccg ,_fba ;};var (_c map[int ]code ;_g map[int ]code ;_f map[int ]code ;_be map[int ]code ;_a map[int ]code ;_e map[int ]byte ;_cd =code {Code :1<<4,BitsWritten :12};_ed =code {Code :3<<3,BitsWritten :13};_gb =code {Code :2<<3,BitsWritten :13};_ac =code {Code :1<<12,BitsWritten :4};_cg =code {Code :1<<13,BitsWritten :3};_eg =code {Code :1<<15,BitsWritten :1};_ca =code {Code :3<<13,BitsWritten :3};_fd =code {Code :3<<10,BitsWritten :6};_df =code {Code :3<<9,BitsWritten :7};_ee =code {Code :2<<13,BitsWritten :3};_ge =code {Code :2<<10,BitsWritten :6};_ea =code {Code :2<<9,BitsWritten :7};);type decodingTreeNode struct{Val byte ;RunLen *int ;Code *code ;Left *decodingTreeNode ;Right *decodingTreeNode ;};func _bgcg (_bae []byte ,_aeac int ,_fca code )(bool ,int ){_bgg :=_aeac ;var (_efff uint16 ;_egd int ;);_efff ,_egd ,_aeac =_ddab (_bae ,_aeac );if _egd > 3{return false ,_bgg ;};_efff >>=uint (3-_egd );_efff <<=3;if _efff !=_fca .Code {return false ,_bgg ;}else {return true ,_aeac -3+_egd ;};};func _acfg (_fgc int ,_feg bool )(code ,int ,bool ){if _fgc < 64{if _feg {return _g [_fgc ],0,true ;}else {return _c [_fgc ],0,true ;};}else {_geae :=_fgc /64;if _geae > 40{return _a [2560],_fgc -2560,false ;};if _geae > 27{return _a [_geae *64],_fgc -_geae *64,false ;};if _feg {return _be [_geae *64],_fgc -_geae *64,false ;}else {return _f [_geae *64],_fgc -_geae *64,false ;};};};func _fdbb (_efgf []byte ,_ccca int )([]byte ,int ){return _ffa (_efgf ,_ccca ,_ac )};func _aca (_aaa [][]byte ,_fbe []byte ,_caf bool ,_agb int )([]byte ,int ){_ba :=_fbfd (_fbe ,_aaa [len (_aaa )-1],_agb ,_caf );_daa :=_cfeb (_aaa [len (_aaa )-1],_ba );if _agb ==-1{_fbe =_acg (_fbe ,_caf ,_daa -_agb -1);}else {_fbe =_acg (_fbe ,_caf ,_daa -_agb );};_agb =_daa ;return _fbe ,_agb ;};func (_bag *Encoder )decodeRow1D (_bfe []byte ,_bagd int )([]byte ,int ){var _dad []byte ;_bead :=true ;var _dacb int ;_dacb ,_bagd =_efc (_bfe ,_bagd ,_bead );for _dacb !=-1{_dad =_acg (_dad ,_bead ,_dacb );if _dacb < 64{if len (_dad )>=_bag .Columns {break ;};_bead =!_bead ;};_dacb ,_bagd =_efc (_bfe ,_bagd ,_bead );};return _dad ,_bagd ;};func _cgfb (_fdde int )([]byte ,int ){var _efgg []byte ;for _bagca :=0;_bagca < 6;_bagca ++{_efgg ,_fdde =_ffa (_efgg ,_fdde ,_cd );};return _efgg ,_fdde %8;};func _gea (_ecg uint16 ,_fdad int )(code ,bool ){_ ,_cgaf :=_ege (_gbg ,_ecg ,_fdad );if _cgaf ==nil {return code {},false ;};return *_cgaf ,true ;};var (_fg byte =1;_fcbf byte =0;);func (_eag *Encoder )decodeG32D (_ece []byte )([][]byte ,error ){var (_ada [][]byte ;_ecea int ;_aa error ;);_aed :for (_ecea /8)< len (_ece ){var _aec bool ;_aec ,_ecea ,_aa =_bbg (_ece ,_ecea );if _aa !=nil {return nil ,_aa ;};if _aec {break ;};_aec ,_ecea =_fce (_ece ,_ecea );if !_aec {if _eag .EndOfLine {return nil ,_cf ;};};var _eab []byte ;_eab ,_ecea =_eag .decodeRow1D (_ece ,_ecea );if _eag .EncodedByteAlign &&_ecea %8!=0{_ecea +=8-_ecea %8;};if _eab !=nil {_ada =append (_ada ,_eab );};if _eag .Rows > 0&&!_eag .EndOfBlock &&len (_ada )>=_eag .Rows {break ;};for _ce :=1;_ce < _eag .K &&(_ecea /8)< len (_ece );_ce ++{_aec ,_ecea =_ddabg (_ece ,_ecea );if !_aec {_aec ,_ecea ,_aa =_bbg (_ece ,_ecea );if _aa !=nil {return nil ,_aa ;};if _aec {break _aed ;}else {if _eag .EndOfLine {return nil ,_cf ;};};};var (_ebb code ;_af bool ;);_gdg :=true ;var _da []byte ;_eea :=-1;for _ebb ,_ecea ,_af =_bea (_ece ,_ecea );_af ;_ebb ,_ecea ,_af =_bea (_ece ,_ecea ){switch _ebb {case _ac :_da ,_eea =_aca (_ada ,_da ,_gdg ,_eea );case _cg :_da ,_ecea ,_eea ,_aa =_dgg (_ece ,_da ,_ecea ,_gdg ,_eea );if _aa !=nil {return nil ,_aa ;};case _eg :_da ,_eea =_ag (_ada ,_da ,_gdg ,_eea ,0);_gdg =!_gdg ;case _ca :_da ,_eea =_ag (_ada ,_da ,_gdg ,_eea ,1);_gdg =!_gdg ;case _fd :_da ,_eea =_ag (_ada ,_da ,_gdg ,_eea ,2);_gdg =!_gdg ;case _df :_da ,_eea =_ag (_ada ,_da ,_gdg ,_eea ,3);_gdg =!_gdg ;case _ee :_da ,_eea =_ag (_ada ,_da ,_gdg ,_eea ,-1);_gdg =!_gdg ;case _ge :_da ,_eea =_ag (_ada ,_da ,_gdg ,_eea ,-2);_gdg =!_gdg ;case _ea :_da ,_eea =_ag (_ada ,_da ,_gdg ,_eea ,-3);_gdg =!_gdg ;};if len (_da )>=_eag .Columns {break ;};};if _eag .EncodedByteAlign &&_ecea %8!=0{_ecea +=8-_ecea %8;};if _da !=nil {_ada =append (_ada ,_da );};if _eag .Rows > 0&&!_eag .EndOfBlock &&len (_ada )>=_eag .Rows {break _aed ;};};};return _ada ,nil ;};func (_ffag *Encoder )appendEncodedRow (_efb ,_cfe []byte ,_ded int )[]byte {if len (_efb )> 0&&_ded !=0&&!_ffag .EncodedByteAlign {_efb [len (_efb )-1]=_efb [len (_efb )-1]|_cfe [0];_efb =append (_efb ,_cfe [1:]...);}else {_efb =append (_efb ,_cfe ...);};return _efb ;};func _beeg (_becg []byte ,_edd int ,_fdga code )([]byte ,int ){_gee :=true ;var _cffd []byte ;_cffd ,_edd =_ffa (nil ,_edd ,_fdga );_gedd :=0;var _gff int ;for _gedd < len (_becg ){_gff ,_gedd =_ebg (_becg ,_gee ,_gedd );_cffd ,_edd =_gda (_cffd ,_edd ,_gff ,_gee );_gee =!_gee ;};return _cffd ,_edd %8;};type code struct{Code uint16 ;BitsWritten int ;};func _efc (_bg []byte ,_fda int ,_abbb bool )(int ,int ){var (_aecg uint16 ;_aea int ;_dae int ;);_dae =_fda ;_aecg ,_aea ,_fda =_ddab (_bg ,_fda );_bdb ,_cga :=_aeb (_aecg ,_aea ,_abbb );if _bdb ==-1{return -1,_dae ;};return _bdb ,_dae +_cga .BitsWritten ;};func _acg (_ecf []byte ,_cffe bool ,_ace int )[]byte {if _ace < 0{return _ecf ;};_efa :=make ([]byte ,_ace );if _cffe {for _ebe :=0;_ebe < len (_efa );_ebe ++{_efa [_ebe ]=_fg ;};}else {for _cde :=0;_cde < len (_efa );_cde ++{_efa [_cde ]=_fcbf ;};};_ecf =append (_ecf ,_efa ...);return _ecf ;};func _aee (_bbf ,_cdgf int )code {var _cbfb code ;switch _cdgf -_bbf {case -1:_cbfb =_ca ;case -2:_cbfb =_fd ;case -3:_cbfb =_df ;case 0:_cbfb =_eg ;case 1:_cbfb =_ee ;case 2:_cbfb =_ge ;case 3:_cbfb =_ea ;};return _cbfb ;};func _ege (_baa *decodingTreeNode ,_effb uint16 ,_dce int )(*int ,*code ){if _baa ==nil {return nil ,nil ;};if _dce ==16{return _baa .RunLen ,_baa .Code ;};_eagd :=_cba (_effb ,_dce );_dce ++;var _cef *int ;var _dbcf *code ;if _eagd ==1{_cef ,_dbcf =_ege (_baa .Right ,_effb ,_dce );}else {_cef ,_dbcf =_ege (_baa .Left ,_effb ,_dce );};if _cef ==nil {_cef =_baa .RunLen ;_dbcf =_baa .Code ;};return _cef ,_dbcf ;};func _ddabg (_efg []byte ,_dacd int )(bool ,int ){return _bgcg (_efg ,_dacd ,_gb )};func _bbg (_fedg []byte ,_acf int )(bool ,int ,error ){_cac :=_acf ;var _dda =false ;for _bf :=0;_bf < 6;_bf ++{_dda ,_acf =_fce (_fedg ,_acf );if !_dda {if _bf > 1{return false ,_cac ,_cc ;}else {_acf =_cac ;break ;};};};return _dda ,_acf ,nil ;};func _gce (_dfc []byte ,_dfg int )(bool ,int ){_faa :=_dfg ;var (_bagf uint16 ;_cea int ;);_bagf ,_cea ,_dfg =_ddab (_dfc ,_dfg );if _cea > 4{return false ,_faa ;};_bagf >>=uint (4-_cea );_bagf <<=4;if _bagf !=_cd .Code {return false ,_faa ;}else {return true ,_dfg -4+_cea ;};};var (_cb =_b .New ("\u0045\u004f\u0046\u0042 c\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074e\u0064");_cc =_b .New ("R\u0054\u0043\u0020\u0063od\u0065 \u0069\u0073\u0020\u0063\u006fr\u0072\u0075\u0070\u0074\u0065\u0064");_dd =_b .New ("\u0077\u0072o\u006e\u0067\u0020\u0063\u006f\u0064\u0065\u0020\u0069\u006e\u0020\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u0020mo\u0064\u0065");_cf =_b .New ("\u006e\u006f\u0020\u0045\u004f\u004c\u0020\u0066\u006f\u0075\u006e\u0064\u0020\u0077\u0068\u0069\u006c\u0065 \u0074\u0068\u0065\u0020\u0045\u006e\u0064O\u0066\u004c\u0069\u006e\u0065\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0069\u0073\u0020\u0074\u0072\u0075\u0065");_fe =_b .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u004f\u004c");_ae =_b .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u0032\u0044\u0020\u0063\u006f\u0064\u0065"););func _dadg (_cfbb ,_ccbf []byte ,_gbad int )int {_fagb :=_cfeb (_ccbf ,_gbad );if _fagb < len (_ccbf )&&(_gbad ==-1&&_ccbf [_fagb ]==_fg ||_gbad >=0&&_gbad < len (_cfbb )&&_cfbb [_gbad ]==_ccbf [_fagb ]||_gbad >=len (_cfbb )&&_cfbb [_gbad -1]!=_ccbf [_fagb ]){_fagb =_cfeb (_ccbf ,_fagb );};return _fagb ;};func _faac (_ddae []byte ,_gffd ,_ggfb ,_fdeb int )([]byte ,int ){_gbb :=_aee (_ggfb ,_fdeb );_ddae ,_gffd =_ffa (_ddae ,_gffd ,_gbb );return _ddae ,_gffd ;};func _gda (_cgg []byte ,_cce int ,_bce int ,_cgbg bool )([]byte ,int ){var (_cdg code ;_afe bool ;);for !_afe {_cdg ,_bce ,_afe =_acfg (_bce ,_cgbg );_cgg ,_cce =_ffa (_cgg ,_cce ,_cdg );};return _cgg ,_cce ;};func (_cbbc *Encoder )Encode (pixels [][]byte )[]byte {if _cbbc .BlackIs1 {_fg =0;_fcbf =1;}else {_fg =1;_fcbf =0;};if _cbbc .K ==0{return _cbbc .encodeG31D (pixels );};if _cbbc .K > 0{return _cbbc .encodeG32D (pixels );};if _cbbc .K < 0{return _cbbc .encodeG4 (pixels );};return nil ;};func _fce (_caa []byte ,_fbed int )(bool ,int ){return _bgcg (_caa ,_fbed ,_ed )};func _eca (_ccfe ,_bab []byte ,_dcc int ,_cgb bool )([]byte ,int ,error ){_fdg :=_dcc ;var _efe int ;for _efe ,_dcc =_efc (_ccfe ,_dcc ,_cgb );_efe !=-1;_efe ,_dcc =_efc (_ccfe ,_dcc ,_cgb ){_bab =_acg (_bab ,_cgb ,_efe );if _efe < 64{break ;};};if _efe ==-1{return _bab ,_fdg ,_dd ;};return _bab ,_dcc ,nil ;};func (_cbg *Encoder )encodeG31D (_bac [][]byte )[]byte {var _fab []byte ;_cdec :=0;for _gdc :=range _bac {if _cbg .Rows > 0&&!_cbg .EndOfBlock &&_gdc ==_cbg .Rows {break ;};_aecb ,_gfd :=_beeg (_bac [_gdc ],_cdec ,_cd );_fab =_cbg .appendEncodedRow (_fab ,_aecb ,_cdec );if _cbg .EncodedByteAlign {_gfd =0;};_cdec =_gfd ;};if _cbg .EndOfBlock {_bdg ,_ :=_cgfb (_cdec );_fab =_cbg .appendEncodedRow (_fab ,_bdg ,_cdec );};return _fab ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func _dgg (_dc ,_abb []byte ,_aga int ,_fed bool ,_dab int )([]byte ,int ,int ,error ){_bee :=_aga ;var _ead error ;_abb ,_aga ,_ead =_eca (_dc ,_abb ,_aga ,_fed );if _ead !=nil {return _abb ,_bee ,_dab ,_ead ;};_fed =!_fed ;_abb ,_aga ,_ead =_eca (_dc ,_abb ,_aga ,_fed );if _ead !=nil {return _abb ,_bee ,_dab ,_ead ;};_dab =len (_abb );return _abb ,_aga ,_dab ,nil ;};var (_fc =&decodingTreeNode {Val :255};_ef =&decodingTreeNode {Val :255};_gbg =&decodingTreeNode {Val :255};);