//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_be "bufio";_e "bytes";_c "encoding/hex";_bg "errors";_f "fmt";_gb "github.com/unidoc/unipdf/v3/common";_ce "github.com/unidoc/unipdf/v3/core";_fg "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_bb "io";_bbf "sort";_bf "strconv";_a "strings";_b "unicode/utf16";);type cmapArray struct{Array []cmapObject ;};func (_fdd *cMapParser )parseComment ()(string ,error ){var _cfcac _e .Buffer ;_ ,_eff :=_fdd .skipSpaces ();if _eff !=nil {return _cfcac .String (),_eff ;};_dff :=true ;for {_eaf ,_bbcc :=_fdd ._cgg .Peek (1);if _bbcc !=nil {_gb .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_bbcc );return _cfcac .String (),_bbcc ;};if _dff &&_eaf [0]!='%'{return _cfcac .String (),ErrBadCMapComment ;};_dff =false ;if (_eaf [0]!='\r')&&(_eaf [0]!='\n'){_fed ,_ :=_fdd ._cgg .ReadByte ();_cfcac .WriteByte (_fed );}else {break ;};};return _cfcac .String (),nil ;};func (cmap *CMap )parseCodespaceRange ()error {for {_cfca ,_bfa :=cmap .parseObject ();if _bfa !=nil {if _bfa ==_bb .EOF {break ;};return _bfa ;};_ec ,_gfb :=_cfca .(cmapHexString );if !_gfb {if _egg ,_edag :=_cfca .(cmapOperand );_edag {if _egg .Operand ==_gae {return nil ;};return _bg .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_cfca ,_bfa =cmap .parseObject ();if _bfa !=nil {if _bfa ==_bb .EOF {break ;};return _bfa ;};_aba ,_gfb :=_cfca .(cmapHexString );if !_gfb {return _bg .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_ec ._geg )!=len (_aba ._geg ){return _bg .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_dccb :=_gbcf (_ec );_eec :=_gbcf (_aba );if _eec < _dccb {_gb .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_dccb ,_eec );return ErrBadCMap ;};_edad :=_aba ._cfa ;_bgg :=Codespace {NumBytes :_edad ,Low :_dccb ,High :_eec };cmap ._ggg =append (cmap ._ggg ,_bgg );_gb .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_dccb ,_eec );};if len (cmap ._ggg )==0{_gb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_abg :=_gdd (name );if _abg !=nil {return nil ,_abg ;};if cmap ._ef ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_cecd ,_abg :=_gdd (cmap ._ef );if _abg !=nil {return nil ,_abg ;};for _gaf ,_dge :=range _cecd ._af {if _ ,_bfg :=cmap ._af [_gaf ];!_bfg {cmap ._af [_gaf ]=_dge ;};};for _ ,_aada :=range _cecd ._ggg {cmap ._ggg =append (cmap ._ggg ,_aada );};cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_dgc ,_bgc :=cmap ._aad [s ];return _dgc ,_bgc ;};func (_ffbf *cMapParser )parseHexString ()(cmapHexString ,error ){_ffbf ._cgg .ReadByte ();_bfeda :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");_fcae :=_e .Buffer {};for {_ffbf .skipSpaces ();_bgcg ,_edd :=_ffbf ._cgg .Peek (1);if _edd !=nil {return cmapHexString {},_edd ;};if _bgcg [0]=='>'{_ffbf ._cgg .ReadByte ();break ;};_gfg ,_ :=_ffbf ._cgg .ReadByte ();if _e .IndexByte (_bfeda ,_gfg )>=0{_fcae .WriteByte (_gfg );};};if _fcae .Len ()%2==1{_gb .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_fcae .String ());_fcae .WriteByte ('0');};_gcc :=_fcae .Len ()/2;_faa ,_ :=_c .DecodeString (_fcae .String ());return cmapHexString {_cfa :_gcc ,_geg :_faa },nil ;};func (_ed *CIDSystemInfo )String ()string {return _f .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_ed .Registry ,_ed .Ordering ,_ed .Supplement );};type cmapHexString struct{_cfa int ;_geg []byte ;};func (cmap *CMap )Stream ()(*_ce .PdfObjectStream ,error ){if cmap ._gda !=nil {return cmap ._gda ,nil ;};_cdf ,_ae :=_ce .MakeStream (cmap .Bytes (),_ce .NewFlateEncoder ());if _ae !=nil {return nil ,_ae ;};cmap ._gda =_cdf ;return cmap ._gda ,nil ;};func (_gead *cMapParser )skipSpaces ()(int ,error ){_abaf :=0;for {_cfe ,_afae :=_gead ._cgg .Peek (1);if _afae !=nil {return 0,_afae ;};if _ce .IsWhiteSpace (_cfe [0]){_gead ._cgg .ReadByte ();_abaf ++;}else {break ;};};return _abaf ,nil ;};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_gb .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );cmap :=_ge (isSimple );cmap .cMapParser =_dacd (data );_ee :=cmap .parse ();if _ee !=nil {return nil ,_ee ;};if len (cmap ._ggg )==0{if cmap ._ef !=""{return cmap ,nil ;};_gb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};func _gbcf (_egdd cmapHexString )CharCode {_dca :=CharCode (0);for _ ,_ddgd :=range _egdd ._geg {_dca <<=8;_dca |=CharCode (_ddgd );};return _dca ;};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_daa ,_dgd :=cmap .BytesToCharcodes (data );if !_dgd {_gb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );return "",0;};_bee :=make ([]string ,len (_daa ));var _db []CharCode ;for _fb ,_bd :=range _daa {_fc ,_dab :=cmap ._dda [_bd ];if !_dab {_db =append (_db ,_bd );_fc =MissingCodeString ;};_bee [_fb ]=_fc ;};_ffe :=_a .Join (_bee ,"");if len (_db )> 0{_gb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_daa ,len (_db ),_db ,_ffe ,cmap );};return _ffe ,len (_db );};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_cc ,_ad :=cmap ._fd [cid ];return _cc ,_ad ;};func (cmap *CMap )parseName ()error {_dbd :="";_dbc :=false ;for _gfe :=0;_gfe < 20&&!_dbc ;_gfe ++{_begf ,_ded :=cmap .parseObject ();if _ded !=nil {return _ded ;};switch _fgda :=_begf .(type ){case cmapOperand :switch _fgda .Operand {case "\u0064\u0065\u0066":_dbc =true ;default:_gb .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_begf ,_dbd );if _dbd !=""{_dbd =_f .Sprintf ("\u0025\u0073\u0020%\u0073",_dbd ,_fgda .Operand );};_gb .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_dbd );};case cmapName :_dbd =_fgda .Name ;};};if !_dbc {_gb .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._dd =_dbd ;return nil ;};func _ffg (_cadg cmapHexString )rune {_abfd :=_bef (_cadg );if _dbf :=len (_abfd );_dbf ==0{_gb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_cadg );return MissingCodeRune ;};if len (_abfd )> 1{_gb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_cadg ,_abfd );};return _abfd [0];};type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};type cmapDict struct{Dict map[string ]cmapObject ;};func (cmap *CMap )toBfData ()string {if len (cmap ._dda )==0{return "";};_fab :=make ([]CharCode ,0,len (cmap ._dda ));for _gbc :=range cmap ._dda {_fab =append (_fab ,_gbc );};_bbf .Slice (_fab ,func (_ag ,_cbb int )bool {return _fab [_ag ]< _fab [_cbb ]});var _adb []charRange ;_gc :=charRange {_fab [0],_fab [0]};_ba :=cmap ._dda [_fab [0]];for _ ,_ac :=range _fab [1:]{_gggg :=cmap ._dda [_ac ];if _ac ==_gc ._gg +1&&_fdc (_gggg )==_fdc (_ba )+1{_gc ._gg =_ac ;}else {_adb =append (_adb ,_gc );_gc ._d ,_gc ._gg =_ac ,_ac ;};_ba =_gggg ;};_adb =append (_adb ,_gc );var _afc []CharCode ;var _bfed []fbRange ;for _ ,_add :=range _adb {if _add ._d ==_add ._gg {_afc =append (_afc ,_add ._d );}else {_bfed =append (_bfed ,fbRange {_fe :_add ._d ,_ab :_add ._gg ,_da :cmap ._dda [_add ._d ]});};};_gb .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_adb ),len (_afc ),len (_bfed ));var _deeb []string ;if len (_afc )> 0{_cad :=(len (_afc )+_ffa -1)/_ffa ;for _defa :=0;_defa < _cad ;_defa ++{_cfgd :=_baa (len (_afc )-_defa *_ffa ,_ffa );_deeb =append (_deeb ,_f .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_cfgd ));for _cbf :=0;_cbf < _cfgd ;_cbf ++{_dgff :=_afc [_defa *_ffa +_cbf ];_gdg :=cmap ._dda [_dgff ];_deeb =append (_deeb ,_f .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_dgff ,_ccg (_gdg )));};_deeb =append (_deeb ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");};};if len (_bfed )> 0{_eda :=(len (_bfed )+_ffa -1)/_ffa ;for _agg :=0;_agg < _eda ;_agg ++{_gac :=_baa (len (_bfed )-_agg *_ffa ,_ffa );_deeb =append (_deeb ,_f .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_gac ));for _aea :=0;_aea < _gac ;_aea ++{_aeb :=_bfed [_agg *_ffa +_aea ];_deeb =append (_deeb ,_f .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_aeb ._fe ,_aeb ._ab ,_ccg (_aeb ._da )));};_deeb =append (_deeb ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");};};return _a .Join (_deeb ,"\u000a");};func (_ecfa *cMapParser )parseString ()(cmapString ,error ){_ecfa ._cgg .ReadByte ();_afg :=_e .Buffer {};_ebe :=1;for {_dfc ,_dccc :=_ecfa ._cgg .Peek (1);if _dccc !=nil {return cmapString {_afg .String ()},_dccc ;};if _dfc [0]=='\\'{_ecfa ._cgg .ReadByte ();_ggee ,_dadb :=_ecfa ._cgg .ReadByte ();if _dadb !=nil {return cmapString {_afg .String ()},_dadb ;};if _ce .IsOctalDigit (_ggee ){_efb ,_gdf :=_ecfa ._cgg .Peek (2);if _gdf !=nil {return cmapString {_afg .String ()},_gdf ;};var _ffbb []byte ;_ffbb =append (_ffbb ,_ggee );for _ ,_egd :=range _efb {if _ce .IsOctalDigit (_egd ){_ffbb =append (_ffbb ,_egd );}else {break ;};};_ecfa ._cgg .Discard (len (_ffbb )-1);_gb .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_ffbb );_egga ,_gdf :=_bf .ParseUint (string (_ffbb ),8,32);if _gdf !=nil {return cmapString {_afg .String ()},_gdf ;};_afg .WriteByte (byte (_egga ));continue ;};switch _ggee {case 'n':_afg .WriteByte ('\n');case 'r':_afg .WriteByte ('\r');case 't':_afg .WriteByte ('\t');case 'b':_afg .WriteByte ('\b');case 'f':_afg .WriteByte ('\f');case '(':_afg .WriteByte ('(');case ')':_afg .WriteByte (')');case '\\':_afg .WriteByte ('\\');};continue ;}else if _dfc [0]=='('{_ebe ++;}else if _dfc [0]==')'{_ebe --;if _ebe ==0{_ecfa ._cgg .ReadByte ();break ;};};_fcac ,_ :=_ecfa ._cgg .ReadByte ();_afg .WriteByte (_fcac );};return cmapString {_afg .String ()},nil ;};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_cd :=make (map[CharCode ]string ,len (codeToRune ));for _bff ,_cg :=range codeToRune {_cd [_bff ]=string (_cg );};cmap :=&CMap {_dd :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_gbf :2,_cf :16,_dac :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_ggg :[]Codespace {{Low :0,High :0xffff}},_dda :_cd ,_aad :make (map[string ]CharCode ,len (codeToRune )),_af :make (map[CharCode ]CharCode ,len (codeToRune )),_fd :make (map[CharCode ]CharCode ,len (codeToRune ))};cmap .computeInverseMappings ();return cmap ;};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _abdb ,_fa :=cmap ._dda [code ];_fa {return _abdb ,true ;};return MissingCodeString ,false ;};func (_bdb *cMapParser )parseNumber ()(cmapObject ,error ){_bdc ,_agd :=_ce .ParseNumber (_bdb ._cgg );if _agd !=nil {return nil ,_agd ;};switch _bgcb :=_bdc .(type ){case *_ce .PdfObjectFloat :return cmapFloat {float64 (*_bgcb )},nil ;case *_ce .PdfObjectInteger :return cmapInt {int64 (*_bgcb )},nil ;};return nil ,_f .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_bdc );};func _gdc ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func (cmap *CMap )parseSystemInfo ()error {_eeag :=false ;_fcd :=false ;_cfc :="";_cbd :=false ;_age :=CIDSystemInfo {};for _fag :=0;_fag < 50&&!_cbd ;_fag ++{_fad ,_gde :=cmap .parseObject ();if _gde !=nil {return _gde ;};switch _ggd :=_fad .(type ){case cmapDict :_eae :=_ggd .Dict ;_cecf ,_deda :=_eae ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_deda {_gb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_fagg ,_deda :=_cecf .(cmapString );if !_deda {_gb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_age .Registry =_fagg .String ;_cecf ,_deda =_eae ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_deda {_gb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_fagg ,_deda =_cecf .(cmapString );if !_deda {_gb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_age .Ordering =_fagg .String ;_cddb ,_deda :=_eae ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_deda {_gb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_bga ,_deda :=_cddb .(cmapInt );if !_deda {_gb .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_age .Supplement =int (_bga ._gag );_cbd =true ;case cmapOperand :switch _ggd .Operand {case "\u0062\u0065\u0067i\u006e":_eeag =true ;case "\u0065\u006e\u0064":_cbd =true ;case "\u0064\u0065\u0066":_fcd =false ;};case cmapName :if _eeag {_cfc =_ggd .Name ;_fcd =true ;};case cmapString :if _fcd {switch _cfc {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_age .Registry =_ggd .String ;case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_age .Ordering =_ggd .String ;};};case cmapInt :if _fcd {switch _cfc {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_age .Supplement =int (_ggd ._gag );};};};};if !_cbd {_gb .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");return ErrBadCMap ;};cmap ._dac =_age ;return nil ;};func (cmap *CMap )parseCIDRange ()error {for {_bcf ,_deg :=cmap .parseObject ();if _deg !=nil {if _deg ==_bb .EOF {break ;};return _deg ;};_fda ,_dbe :=_bcf .(cmapHexString );if !_dbe {if _ggf ,_gaca :=_bcf .(cmapOperand );_gaca {if _ggf .Operand ==_edcg {return nil ;};return _bg .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};};_gcec :=_gbcf (_fda );_bcf ,_deg =cmap .parseObject ();if _deg !=nil {if _deg ==_bb .EOF {break ;};return _deg ;};_gef ,_dbe :=_bcf .(cmapHexString );if !_dbe {return _bg .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};if len (_fda ._geg )!=len (_gef ._geg ){return _bg .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_begc :=_gbcf (_gef );if _gcec > _begc {_gb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_gcec ,_begc );return ErrBadCMap ;};_bcf ,_deg =cmap .parseObject ();if _deg !=nil {if _deg ==_bb .EOF {break ;};return _deg ;};_aee ,_dbe :=_bcf .(cmapInt );if !_dbe {return _bg .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _aee ._gag < 0{return _bg .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_gab :=_aee ._gag ;for _edab :=_gcec ;_edab <=_begc ;_edab ++{cmap ._af [_edab ]=CharCode (_gab );_gab ++;};_gb .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_gcec ,_begc ,_aee ._gag );};return nil ;};func (cmap *CMap )computeInverseMappings (){for _cb ,_afd :=range cmap ._af {if _gaa ,_edg :=cmap ._fd [_afd ];!_edg ||(_edg &&_gaa > _cb ){cmap ._fd [_afd ]=_cb ;};};for _edb ,_dace :=range cmap ._dda {if _cde ,_cfg :=cmap ._aad [_dace ];!_cfg ||(_cfg &&_cde > _edb ){cmap ._aad [_dace ]=_edb ;};};_bbf .Slice (cmap ._ggg ,func (_bbc ,_cgd int )bool {return cmap ._ggg [_bbc ].Low < cmap ._ggg [_cgd ].Low });};type charRange struct{_d CharCode ;_gg CharCode ;};type cmapOperand struct{Operand string ;};func (cmap *CMap )NBits ()int {return cmap ._cf };func _ccg (_dcc string )string {_dad :=[]rune (_dcc );_gge :=make ([]string ,len (_dad ));for _ace ,_gaag :=range _dad {_gge [_ace ]=_f .Sprintf ("\u0025\u0030\u0034\u0078",_gaag );};return _f .Sprintf ("\u003c\u0025\u0073\u003e",_a .Join (_gge ,""));};func (cmap *CMap )parseType ()error {_ege :=0;_aae :=false ;for _feg :=0;_feg < 3&&!_aae ;_feg ++{_dedb ,_eeea :=cmap .parseObject ();if _eeea !=nil {return _eeea ;};switch _fac :=_dedb .(type ){case cmapOperand :switch _fac .Operand {case "\u0064\u0065\u0066":_aae =true ;default:_gb .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_dedb );return ErrBadCMap ;};case cmapInt :_ege =int (_fac ._gag );};};cmap ._gbf =_ege ;return nil ;};func NewCIDSystemInfo (obj _ce .PdfObject )(_abe CIDSystemInfo ,_ga error ){_cec ,_aa :=_ce .GetDict (obj );if !_aa {return CIDSystemInfo {},_ce .ErrTypeError ;};_dg ,_aa :=_ce .GetStringVal (_cec .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_aa {return CIDSystemInfo {},_ce .ErrTypeError ;};_gd ,_aa :=_ce .GetStringVal (_cec .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_aa {return CIDSystemInfo {},_ce .ErrTypeError ;};_ea ,_aa :=_ce .GetIntVal (_cec .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_aa {return CIDSystemInfo {},_ce .ErrTypeError ;};return CIDSystemInfo {Registry :_dg ,Ordering :_gd ,Supplement :_ea },nil ;};func _gdd (_eb string )(*CMap ,error ){_bc ,_afe :=_fg .Asset (_eb );if _afe !=nil {return nil ,_afe ;};return LoadCmapFromDataCID (_bc );};func (_ffed *cMapParser )parseObject ()(cmapObject ,error ){_ffed .skipSpaces ();for {_adf ,_dfdd :=_ffed ._cgg .Peek (2);if _dfdd !=nil {return nil ,_dfdd ;};if _adf [0]=='%'{_ffed .parseComment ();_ffed .skipSpaces ();continue ;}else if _adf [0]=='/'{_dabg ,_dada :=_ffed .parseName ();return _dabg ,_dada ;}else if _adf [0]=='('{_gaee ,_faf :=_ffed .parseString ();return _gaee ,_faf ;}else if _adf [0]=='['{_fefd ,_abf :=_ffed .parseArray ();return _fefd ,_abf ;}else if (_adf [0]=='<')&&(_adf [1]=='<'){_gbcb ,_gcg :=_ffed .parseDict ();return _gbcb ,_gcg ;}else if _adf [0]=='<'{_fec ,_bggc :=_ffed .parseHexString ();return _fec ,_bggc ;}else if _ce .IsDecimalDigit (_adf [0])||(_adf [0]=='-'&&_ce .IsDecimalDigit (_adf [1])){_dcd ,_fcc :=_ffed .parseNumber ();if _fcc !=nil {return nil ,_fcc ;};return _dcd ,nil ;}else {_ged ,_ecf :=_ffed .parseOperand ();if _ecf !=nil {return nil ,_ecf ;};return _ged ,nil ;};};};type cmapInt struct{_gag int64 };func (cmap *CMap )parseBfrange ()error {for {var _dcb CharCode ;_cdfg ,_aeed :=cmap .parseObject ();if _aeed !=nil {if _aeed ==_bb .EOF {break ;};return _aeed ;};switch _cbcf :=_cdfg .(type ){case cmapOperand :if _cbcf .Operand ==_daf {return nil ;};return _bg .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_dcb =_gbcf (_cbcf );default:return _bg .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};var _deea CharCode ;_cdfg ,_aeed =cmap .parseObject ();if _aeed !=nil {if _aeed ==_bb .EOF {break ;};return _aeed ;};switch _cecc :=_cdfg .(type ){case cmapOperand :_gb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006d\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");return ErrBadCMap ;case cmapHexString :_deea =_gbcf (_cecc );default:_gb .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_cdfg );return ErrBadCMap ;};_cdfg ,_aeed =cmap .parseObject ();if _aeed !=nil {if _aeed ==_bb .EOF {break ;};return _aeed ;};switch _bacg :=_cdfg .(type ){case cmapArray :if len (_bacg .Array )!=int (_deea -_dcb )+1{_gb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");return ErrBadCMap ;};for _bbce :=_dcb ;_bbce <=_deea ;_bbce ++{_gad :=_bacg .Array [_bbce -_dcb ];_cag ,_cfb :=_gad .(cmapHexString );if !_cfb {return _bg .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");};_ead :=_bef (_cag );cmap ._dda [_bbce ]=string (_ead );};case cmapHexString :_dae :=_bef (_bacg );_bfga :=len (_dae );for _ccef :=_dcb ;_ccef <=_deea ;_ccef ++{cmap ._dda [_ccef ]=string (_dae );_dae [_bfga -1]++;};default:_gb .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_cdfg );return ErrBadCMap ;};};return nil ;};func (cmap *CMap )parseBfchar ()error {for {_dba ,_efe :=cmap .parseObject ();if _efe !=nil {if _efe ==_bb .EOF {break ;};return _efe ;};var _agf CharCode ;switch _ggc :=_dba .(type ){case cmapOperand :if _ggc .Operand ==_aec {return nil ;};return _bg .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_agf =_gbcf (_ggc );default:return _bg .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};_dba ,_efe =cmap .parseObject ();if _efe !=nil {if _efe ==_bb .EOF {break ;};return _efe ;};var _dfd []rune ;switch _gfbd :=_dba .(type ){case cmapOperand :if _gfbd .Operand ==_aec {return nil ;};_gb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_gfbd );return ErrBadCMap ;case cmapHexString :_dfd =_bef (_gfbd );case cmapName :_gb .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_gfbd );_dfd =[]rune {MissingCodeRune };default:_gb .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_dba );return ErrBadCMap ;};cmap ._dda [_agf ]=string (_dfd );};return nil ;};type cMapParser struct{_cgg *_be .Reader };type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};func IsPredefinedCMap (name string )bool {return _fg .AssetExists (name )};func (cmap *CMap )matchCode (_def []byte )(_dgf CharCode ,_dc int ,_bde bool ){for _abeb :=0;_abeb < _eg ;_abeb ++{if _abeb < len (_def ){_dgf =_dgf <<8|CharCode (_def [_abeb ]);_dc ++;};_bde =cmap .inCodespace (_dgf ,_abeb +1);if _bde {return _dgf ,_dc ,true ;};};_gb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_def ,string (_def ),cmap );return 0,0,false ;};const (_ccb ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_efg ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_agef ="\u0065n\u0064\u0063\u006d\u0061\u0070";_gbff ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_gae ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_deb ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_aec ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_cea ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_daf ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_bfb ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_edcg ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_efc ="\u0075s\u0065\u0063\u006d\u0061\u0070";_cdfb ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_ffd ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_gced ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func (cmap *CMap )parse ()error {var _gcf cmapObject ;for {_edc ,_bed :=cmap .parseObject ();if _bed !=nil {if _bed ==_bb .EOF {break ;};_gb .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_bed );return _bed ;};switch _agge :=_edc .(type ){case cmapOperand :_bba :=_agge ;switch _bba .Operand {case _gbff :_dcf :=cmap .parseCodespaceRange ();if _dcf !=nil {return _dcf ;};case _bfb :_cecb :=cmap .parseCIDRange ();if _cecb !=nil {return _cecb ;};case _deb :_ddfc :=cmap .parseBfchar ();if _ddfc !=nil {return _ddfc ;};case _cea :_bag :=cmap .parseBfrange ();if _bag !=nil {return _bag ;};case _efc :if _gcf ==nil {_gb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");return ErrBadCMap ;};_gfa ,_gff :=_gcf .(cmapName );if !_gff {_gb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_gcf );return ErrBadCMap ;};cmap ._ef =_gfa .Name ;case _ccb :_bac :=cmap .parseSystemInfo ();if _bac !=nil {return _bac ;};};case cmapName :_eee :=_agge ;switch _eee .Name {case _ccb :_aca :=cmap .parseSystemInfo ();if _aca !=nil {return _aca ;};case _cdfb :_gfc :=cmap .parseName ();if _gfc !=nil {return _gfc ;};case _ffd :_fea :=cmap .parseType ();if _fea !=nil {return _fea ;};case _gced :_abb :=cmap .parseVersion ();if _abb !=nil {return _abb ;};};};_gcf =_edc ;};return nil ;};func _dacd (_fca []byte )*cMapParser {_bbd :=cMapParser {};_ebc :=_e .NewBuffer (_fca );_bbd ._cgg =_be .NewReader (_ebc );return &_bbd ;};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_fgg ,_ddf :=cmap ._af [code ];return _fgg ,_ddf ;};type CharCode uint32 ;type cmapObject interface{};type CMap struct{*cMapParser ;_dd string ;_cf int ;_gbf int ;_egc string ;_ef string ;_dac CIDSystemInfo ;_ggg []Codespace ;_af map[CharCode ]CharCode ;_fd map[CharCode ]CharCode ;_dda map[CharCode ]string ;_aad map[string ]CharCode ;_df []byte ;_gda *_ce .PdfObjectStream ;};func _baa (_fae ,_becg int )int {if _fae < _becg {return _fae ;};return _becg ;};func _bef (_cgae cmapHexString )[]rune {if len (_cgae ._geg )==1{return []rune {rune (_cgae ._geg [0])};};_bebe :=_cgae ._geg ;if len (_bebe )%2!=0{_bebe =append (_bebe ,0);_gb .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_cgae ,_bebe );};_gfbf :=len (_bebe )>>1;_caa :=make ([]uint16 ,_gfbf );for _cggg :=0;_cggg < _gfbf ;_cggg ++{_caa [_cggg ]=uint16 (_bebe [_cggg <<1])<<8+uint16 (_bebe [_cggg <<1+1]);};_cabg :=_b .Decode (_caa );return _cabg ;};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _ca []CharCode ;if cmap ._cf ==8{for _ ,_fef :=range data {_ca =append (_ca ,CharCode (_fef ));};return _ca ,true ;};for _cce :=0;_cce < len (data );{_bdg ,_dee ,_gf :=cmap .matchCode (data [_cce :]);if !_gf {_gb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_cce ,data ,string (data ));return _ca ,false ;};_ca =append (_ca ,_bdg );_cce +=_dee ;};return _ca ,true ;};func (_bca *cMapParser )parseDict ()(cmapDict ,error ){_gb .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");_fcdd :=_gdc ();_fcf ,_ :=_bca ._cgg .ReadByte ();if _fcf !='<'{return _fcdd ,ErrBadCMapDict ;};_fcf ,_ =_bca ._cgg .ReadByte ();if _fcf !='<'{return _fcdd ,ErrBadCMapDict ;};for {_bca .skipSpaces ();_dgb ,_efa :=_bca ._cgg .Peek (2);if _efa !=nil {return _fcdd ,_efa ;};if (_dgb [0]=='>')&&(_dgb [1]=='>'){_bca ._cgg .ReadByte ();_bca ._cgg .ReadByte ();break ;};_gca ,_efa :=_bca .parseName ();_gb .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_gca .Name );if _efa !=nil {_gb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_efa );return _fcdd ,_efa ;};_bca .skipSpaces ();_dbb ,_efa :=_bca .parseObject ();if _efa !=nil {return _fcdd ,_efa ;};_fcdd .Dict [_gca .Name ]=_dbb ;_bca .skipSpaces ();_dgb ,_efa =_bca ._cgg .Peek (3);if _efa !=nil {return _fcdd ,_efa ;};if string (_dgb )=="\u0064\u0065\u0066"{_bca ._cgg .Discard (3);};};return _fcdd ,nil ;};type cmapName struct{Name string ;};func (cmap *CMap )inCodespace (_ffba CharCode ,_bdge int )bool {for _ ,_afa :=range cmap ._ggg {if _afa .Low <=_ffba &&_ffba <=_afa .High &&_bdge ==_afa .NumBytes {return true ;};};return false ;};const (_eg =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););func _ge (_gec bool )*CMap {_fgd :=16;if _gec {_fgd =8;};return &CMap {_cf :_fgd ,_af :make (map[CharCode ]CharCode ),_fd :make (map[CharCode ]CharCode ),_dda :make (map[CharCode ]string ),_aad :make (map[string ]CharCode )};};type cmapString struct{String string ;};func (_acdd *cMapParser )parseOperand ()(cmapOperand ,error ){_cdg :=cmapOperand {};_adff :=_e .Buffer {};for {_degd ,_aaaf :=_acdd ._cgg .Peek (1);if _aaaf !=nil {if _aaaf ==_bb .EOF {break ;};return _cdg ,_aaaf ;};if _ce .IsDelimiter (_degd [0]){break ;};if _ce .IsWhiteSpace (_degd [0]){break ;};_fcb ,_ :=_acdd ._cgg .ReadByte ();_adff .WriteByte (_fcb );};if _adff .Len ()==0{return _cdg ,_f .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");};_cdg .Operand =_adff .String ();return _cdg ,nil ;};func _fdc (_ccd string )rune {_fbb :=[]rune (_ccd );return _fbb [len (_fbb )-1]};func (_aged *cMapParser )parseName ()(cmapName ,error ){_bfab :="";_bdd :=false ;for {_aecc ,_acc :=_aged ._cgg .Peek (1);if _acc ==_bb .EOF {break ;};if _acc !=nil {return cmapName {_bfab },_acc ;};if !_bdd {if _aecc [0]=='/'{_bdd =true ;_aged ._cgg .ReadByte ();}else {_gb .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_aecc ,_aecc );return cmapName {_bfab },_f .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_aecc [0]);};}else {if _ce .IsWhiteSpace (_aecc [0]){break ;}else if (_aecc [0]=='/')||(_aecc [0]=='[')||(_aecc [0]=='(')||(_aecc [0]==']')||(_aecc [0]=='<')||(_aecc [0]=='>'){break ;}else if _aecc [0]=='#'{_fgfd ,_cee :=_aged ._cgg .Peek (3);if _cee !=nil {return cmapName {_bfab },_cee ;};_aged ._cgg .Discard (3);_eaa ,_cee :=_c .DecodeString (string (_fgfd [1:3]));if _cee !=nil {return cmapName {_bfab },_cee ;};_bfab +=string (_eaa );}else {_cae ,_ :=_aged ._cgg .ReadByte ();_bfab +=string (_cae );};};};return cmapName {_bfab },nil ;};func (cmap *CMap )String ()string {_afef :=cmap ._dac ;_cbc :=[]string {_f .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._cf ),_f .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._gbf )};if cmap ._egc !=""{_cbc =append (_cbc ,_f .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._egc ));};if cmap ._ef !=""{_cbc =append (_cbc ,_f .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._ef ));};_cbc =append (_cbc ,_f .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_afef .String ()));if len (cmap ._ggg )> 0{_cbc =append (_cbc ,_f .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._ggg )));};if len (cmap ._dda )> 0{_cbc =append (_cbc ,_f .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._dda )));};return _f .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._dd ,_a .Join (_cbc ,"\u0020"));};func (_acd *cMapParser )parseArray ()(cmapArray ,error ){_fbfc :=cmapArray {};_fbfc .Array =[]cmapObject {};_acd ._cgg .ReadByte ();for {_acd .skipSpaces ();_fgga ,_agb :=_acd ._cgg .Peek (1);if _agb !=nil {return _fbfc ,_agb ;};if _fgga [0]==']'{_acd ._cgg .ReadByte ();break ;};_cga ,_agb :=_acd .parseObject ();if _agb !=nil {return _fbfc ,_agb ;};_fbfc .Array =append (_fbfc .Array ,_cga );};return _fbfc ,nil ;};func (cmap *CMap )Name ()string {return cmap ._dd };func (cmap *CMap )Bytes ()[]byte {_gb .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());if len (cmap ._df )> 0{return cmap ._df ;};cmap ._df =[]byte (_a .Join ([]string {_gcd ,cmap .toBfData (),_eef },"\u000a"));return cmap ._df ;};var (ErrBadCMap =_bg .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_bg .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");ErrBadCMapDict =_bg .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074"););type fbRange struct{_fe CharCode ;_ab CharCode ;_da string ;};func (cmap *CMap )Type ()int {return cmap ._gbf };func (cmap *CMap )parseVersion ()error {_bbfa :="";_gce :=false ;for _beb :=0;_beb < 3&&!_gce ;_beb ++{_eea ,_gea :=cmap .parseObject ();if _gea !=nil {return _gea ;};switch _bebg :=_eea .(type ){case cmapOperand :switch _bebg .Operand {case "\u0064\u0065\u0066":_gce =true ;default:_gb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_eea );return ErrBadCMap ;};case cmapInt :_bbfa =_f .Sprintf ("\u0025\u0064",_bebg ._gag );case cmapFloat :_bbfa =_f .Sprintf ("\u0025\u0066",_bebg ._feb );case cmapString :_bbfa =_bebg .String ;default:_gb .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_eea );};};cmap ._egc =_bbfa ;return nil ;};type cmapFloat struct{_feb float64 };const (_ffa =100;_gcd ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";_eef ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";);