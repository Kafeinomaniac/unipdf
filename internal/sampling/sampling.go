//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sampling ;import (_d "github.com/unidoc/unipdf/v3/internal/bitwise";_c "github.com/unidoc/unipdf/v3/internal/imageutil";_a "io";);func (_f *Reader )ReadSample ()(uint32 ,error ){if _f ._ace ==_f ._bf .Height {return 0,_a .EOF ;};_dab ,_ae :=_f ._ac .ReadBits (byte (_f ._bf .BitsPerComponent ));if _ae !=nil {return 0,_ae ;};_f ._bg --;if _f ._bg ==0{_f ._bg =_f ._bf .ColorComponents ;_f ._da ++;};if _f ._da ==_f ._bf .Width {if _f ._dc {_f ._ac .ConsumeRemainingBits ();};_f ._da =0;_f ._ace ++;};return uint32 (_dab ),nil ;};func (_e *Reader )ReadSamples (samples []uint32 )(_bc error ){for _aef :=0;_aef < len (samples );_aef ++{samples [_aef ],_bc =_e .ReadSample ();if _bc !=nil {return _bc ;};};return nil ;};type SampleReader interface{ReadSample ()(uint32 ,error );ReadSamples (_g []uint32 )error ;};func (_fa *Writer )WriteSample (sample uint32 )error {if _ ,_cff :=_fa ._aafa .WriteBits (uint64 (sample ),_fa ._cce .BitsPerComponent );_cff !=nil {return _cff ;};_fa ._cbde --;if _fa ._cbde ==0{_fa ._cbde =_fa ._cce .ColorComponents ;_fa ._ef ++;};if _fa ._ef ==_fa ._cce .Width {if _fa ._gdd {_fa ._aafa .FinishByte ();};_fa ._ef =0;};return nil ;};func NewReader (img _c .ImageBase )*Reader {return &Reader {_ac :_d .NewReader (img .Data ),_bf :img ,_bg :img .ColorComponents ,_dc :img .BytesPerLine *8!=img .ColorComponents *img .BitsPerComponent *img .Width };};func ResampleUint32 (data []uint32 ,bitsPerInputSample int ,bitsPerOutputSample int )[]uint32 {var _fg []uint32 ;_ec :=bitsPerOutputSample ;var _aa uint32 ;var _aee uint32 ;_dad :=0;_ff :=0;_cbd :=0;for _cbd < len (data ){if _dad > 0{_ccg :=_dad ;if _ec < _ccg {_ccg =_ec ;};_aa =(_aa <<uint (_ccg ))|uint32 (_aee >>uint (bitsPerInputSample -_ccg ));_dad -=_ccg ;if _dad > 0{_aee =_aee <<uint (_ccg );}else {_aee =0;};_ec -=_ccg ;if _ec ==0{_fg =append (_fg ,_aa );_ec =bitsPerOutputSample ;_aa =0;_ff ++;};}else {_aebd :=data [_cbd ];_cbd ++;_ed :=bitsPerInputSample ;if _ec < _ed {_ed =_ec ;};_dad =bitsPerInputSample -_ed ;_aa =(_aa <<uint (_ed ))|uint32 (_aebd >>uint (_dad ));if _ed < bitsPerInputSample {_aee =_aebd <<uint (_ed );};_ec -=_ed ;if _ec ==0{_fg =append (_fg ,_aa );_ec =bitsPerOutputSample ;_aa =0;_ff ++;};};};for _dad >=bitsPerOutputSample {_aaf :=_dad ;if _ec < _aaf {_aaf =_ec ;};_aa =(_aa <<uint (_aaf ))|uint32 (_aee >>uint (bitsPerInputSample -_aaf ));_dad -=_aaf ;if _dad > 0{_aee =_aee <<uint (_aaf );}else {_aee =0;};_ec -=_aaf ;if _ec ==0{_fg =append (_fg ,_aa );_ec =bitsPerOutputSample ;_aa =0;_ff ++;};};if _ec > 0&&_ec < bitsPerOutputSample {_aa <<=uint (_ec );_fg =append (_fg ,_aa );};return _fg ;};type SampleWriter interface{WriteSample (_cd uint32 )error ;WriteSamples (_gd []uint32 )error ;};func (_ba *Writer )WriteSamples (samples []uint32 )error {for _bgb :=0;_bgb < len (samples );_bgb ++{if _dce :=_ba .WriteSample (samples [_bgb ]);_dce !=nil {return _dce ;};};return nil ;};type Writer struct{_cce _c .ImageBase ;_aafa *_d .Writer ;_ef ,_cbde int ;_gdd bool ;};type Reader struct{_bf _c .ImageBase ;_ac *_d .Reader ;_da ,_ace ,_bg int ;_dc bool ;};func ResampleBytes (data []byte ,bitsPerSample int )[]uint32 {var _aeb []uint32 ;_ad :=bitsPerSample ;var _db uint32 ;var _ce byte ;_cc :=0;_cf :=0;_gg :=0;for _gg < len (data ){if _cc > 0{_gf :=_cc ;if _ad < _gf {_gf =_ad ;};_db =(_db <<uint (_gf ))|uint32 (_ce >>uint (8-_gf ));_cc -=_gf ;if _cc > 0{_ce =_ce <<uint (_gf );}else {_ce =0;};_ad -=_gf ;if _ad ==0{_aeb =append (_aeb ,_db );_ad =bitsPerSample ;_db =0;_cf ++;};}else {_cb :=data [_gg ];_gg ++;_fc :=8;if _ad < _fc {_fc =_ad ;};_cc =8-_fc ;_db =(_db <<uint (_fc ))|uint32 (_cb >>uint (_cc ));if _fc < 8{_ce =_cb <<uint (_fc );};_ad -=_fc ;if _ad ==0{_aeb =append (_aeb ,_db );_ad =bitsPerSample ;_db =0;_cf ++;};};};for _cc >=bitsPerSample {_dg :=_cc ;if _ad < _dg {_dg =_ad ;};_db =(_db <<uint (_dg ))|uint32 (_ce >>uint (8-_dg ));_cc -=_dg ;if _cc > 0{_ce =_ce <<uint (_dg );}else {_ce =0;};_ad -=_dg ;if _ad ==0{_aeb =append (_aeb ,_db );_ad =bitsPerSample ;_db =0;_cf ++;};};return _aeb ;};func NewWriter (img _c .ImageBase )*Writer {return &Writer {_aafa :_d .NewWriterMSB (img .Data ),_cce :img ,_cbde :img .ColorComponents ,_gdd :img .BytesPerLine *8!=img .ColorComponents *img .BitsPerComponent *img .Width };};