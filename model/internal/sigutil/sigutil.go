//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sigutil ;import (_a "bytes";_g "crypto";_bg "crypto/x509";_c "encoding/pem";_e "errors";_b "fmt";_bc "github.com/unidoc/unipdf/v3/common";_ca "golang.org/x/crypto/ocsp";_fd "io/ioutil";_f "net/http";_gd "time";);func (_fg *CertClient )Get (url string )(*_bg .Certificate ,error ){_ab ,_bb :=_fg ._dd .Get (url );if _bb !=nil {return nil ,_bb ;};defer _ab .Body .Close ();_ec ,_bb :=_fd .ReadAll (_ab .Body );if _bb !=nil {return nil ,_bb ;};if _gf ,_ :=_c .Decode (_ec );_gf !=nil {_ec =_gf .Bytes ;};_ed ,_bb :=_bg .ParseCertificate (_ec );if _bb !=nil {return nil ,_bb ;};return _ed ,nil ;};func NewCertClient ()*CertClient {return &CertClient {_dd :&_f .Client {Timeout :10*_gd .Second }}};func (_dgg *OCSPClient )MakeRequest (serverURL string ,cert ,issuer *_bg .Certificate )(*_ca .Response ,[]byte ,error ){if serverURL ==""{if len (cert .OCSPServer )==0{return nil ,nil ,_e .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063a\u0074\u0065\u0020\u0064\u006f\u0065\u0073 \u006e\u006f\u0074\u0020\u0073\u0070e\u0063\u0069\u0066\u0079\u0020\u0061\u006e\u0079\u0020\u004f\u0043S\u0050\u0020\u0073\u0065\u0072\u0076\u0065\u0072\u0073");};serverURL =cert .OCSPServer [0];};_ga ,_bgf :=_ca .CreateRequest (cert ,issuer ,&_ca .RequestOptions {Hash :_dgg ._ag });if _bgf !=nil {return nil ,nil ,_bgf ;};_aa ,_bgf :=_dgg ._fe .Post (serverURL ,"\u0061p\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u006fc\u0073\u0070\u002d\u0072\u0065\u0071\u0075\u0065\u0073\u0074",_a .NewReader (_ga ));if _bgf !=nil {return nil ,nil ,_bgf ;};defer _aa .Body .Close ();_bgfd ,_bgf :=_fd .ReadAll (_aa .Body );if _bgf !=nil {return nil ,nil ,_bgf ;};if _afa ,_ :=_c .Decode (_bgfd );_afa !=nil {_bgfd =_afa .Bytes ;};_fb ,_bgf :=_ca .ParseResponseForCert (_bgfd ,cert ,issuer );if _bgf !=nil {return nil ,nil ,_bgf ;};return _fb ,_bgfd ,nil ;};func NewCRLClient ()*CRLClient {return &CRLClient {_gb :&_f .Client {Timeout :10*_gd .Second }}};type CRLClient struct{_gb *_f .Client };func (_da *CertClient )GetIssuer (cert *_bg .Certificate )(*_bg .Certificate ,error ){for _ ,_ae :=range cert .IssuingCertificateURL {_ba ,_gdb :=_da .Get (_ae );if _gdb !=nil {_bc .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074 \u0064\u006f\u0077\u006e\u006c\u006f\u0061\u0064\u0020\u0069\u0073\u0073\u0075e\u0072\u0020\u0066\u006f\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066ic\u0061\u0074\u0065\u0020\u0025\u0076\u003a\u0020\u0025\u0076",cert .Subject .CommonName ,_gdb );continue ;};return _ba ,nil ;};return nil ,_b .Errorf ("\u0069\u0073\u0073\u0075e\u0072\u0020\u0063\u0065\u0072\u0074\u0069\u0066\u0069\u0063a\u0074e\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064");};type CertClient struct{_dd *_f .Client };func (_ecc *CertClient )IsCA (cert *_bg .Certificate )bool {return cert .IsCA &&_a .Equal (cert .RawIssuer ,cert .RawSubject );};type OCSPClient struct{_fe *_f .Client ;_ag _g .Hash ;};func (_dg *CRLClient )MakeRequest (serverURL string ,cert *_bg .Certificate )([]byte ,error ){if serverURL ==""{if len (cert .CRLDistributionPoints )==0{return nil ,_e .New ("\u0063e\u0072\u0074i\u0066\u0069\u0063\u0061t\u0065\u0020\u0064o\u0065\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0070ec\u0069\u0066\u0079 \u0061\u006ey\u0020\u0043\u0052\u004c\u0020\u0073e\u0072\u0076e\u0072\u0073");};serverURL =cert .CRLDistributionPoints [0];};_fc ,_ef :=_dg ._gb .Get (serverURL );if _ef !=nil {return nil ,_ef ;};defer _fc .Body .Close ();_fa ,_ef :=_fd .ReadAll (_fc .Body );if _ef !=nil {return nil ,_ef ;};if _be ,_ :=_c .Decode (_fa );_be !=nil {_fa =_be .Bytes ;};return _fa ,nil ;};func NewOCSPClient ()*OCSPClient {return &OCSPClient {_fe :&_f .Client {Timeout :10*_gd .Second },_ag :_g .SHA1 };};