//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package optimize ;import (_ga "bytes";_ed "crypto/md5";_ab "errors";_g "fmt";_d "github.com/unidoc/unipdf/v3/common";_fa "github.com/unidoc/unipdf/v3/contentstream";_b "github.com/unidoc/unipdf/v3/core";_c "github.com/unidoc/unipdf/v3/extractor";_ec "github.com/unidoc/unipdf/v3/internal/textencoding";_da "github.com/unidoc/unipdf/v3/model";_bd "github.com/unidoc/unitype";_e "golang.org/x/image/draw";_af "image";_f "math";);

// CombineIdenticalIndirectObjects combines identical indirect objects.
// It implements interface model.Optimizer.
type CombineIdenticalIndirectObjects struct{};

// Image optimizes images by rewrite images into JPEG format with quality equals to ImageQuality.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type Image struct{ImageQuality int ;};func _ddc (_dcc _b .PdfObject )(_ddcb string ,_fdcc []_b .PdfObject ){var _gcgg _ga .Buffer ;switch _babe :=_dcc .(type ){case *_b .PdfIndirectObject :_fdcc =append (_fdcc ,_babe );_dcc =_babe .PdfObject ;};switch _gbgb :=_dcc .(type ){case *_b .PdfObjectStream :if _ccg ,_ccbb :=_b .DecodeStream (_gbgb );_ccbb ==nil {_gcgg .Write (_ccg );_fdcc =append (_fdcc ,_gbgb );};case *_b .PdfObjectArray :for _ ,_fcbf :=range _gbgb .Elements (){switch _agac :=_fcbf .(type ){case *_b .PdfObjectStream :if _edef ,_ceac :=_b .DecodeStream (_agac );_ceac ==nil {_gcgg .Write (_edef );_fdcc =append (_fdcc ,_agac );};};};};return _gcgg .String (),_fdcc ;};type imageInfo struct{ColorSpace _b .PdfObjectName ;BitsPerComponent int ;ColorComponents int ;Width int ;Height int ;Stream *_b .PdfObjectStream ;PPI float64 ;};func _ccbd (_bcd []_b .PdfObject )[]*imageInfo {_bff :=_b .PdfObjectName ("\u0053u\u0062\u0074\u0079\u0070\u0065");_cbd :=make (map[*_b .PdfObjectStream ]struct{});var _cbe error ;var _fcef []*imageInfo ;for _ ,_dadda :=range _bcd {_fcc ,_geb :=_b .GetStream (_dadda );if !_geb {continue ;};if _ ,_gaa :=_cbd [_fcc ];_gaa {continue ;};_cbd [_fcc ]=struct{}{};_fefg :=_fcc .PdfObjectDictionary .Get (_bff );_dbf ,_geb :=_b .GetName (_fefg );if !_geb ||string (*_dbf )!="\u0049\u006d\u0061g\u0065"{continue ;};_aabc :=&imageInfo {BitsPerComponent :8,Stream :_fcc };if _aabc .ColorSpace ,_cbe =_da .DetermineColorspaceNameFromPdfObject (_fcc .PdfObjectDictionary .Get ("\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065"));_cbe !=nil {_d .Log .Error ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u0025\u0073",_cbe );continue ;};if _bgce ,_dbc :=_b .GetIntVal (_fcc .PdfObjectDictionary .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074"));_dbc {_aabc .BitsPerComponent =_bgce ;};if _gee ,_ced :=_b .GetIntVal (_fcc .PdfObjectDictionary .Get ("\u0057\u0069\u0064t\u0068"));_ced {_aabc .Width =_gee ;};if _acdc ,_gadg :=_b .GetIntVal (_fcc .PdfObjectDictionary .Get ("\u0048\u0065\u0069\u0067\u0068\u0074"));_gadg {_aabc .Height =_acdc ;};switch _aabc .ColorSpace {case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_aabc .ColorComponents =3;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_aabc .ColorComponents =1;default:_d .Log .Warning ("\u004f\u0070\u0074\u0069\u006d\u0069\u007a\u0061t\u0069\u006f\u006e i\u0073\u0020\u006e\u006f\u0074\u0020s\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065 \u0025\u0073",_aabc .ColorSpace );continue ;};_fcef =append (_fcef ,_aabc );};return _fcef ;};func _ff (_dc []_b .PdfObject )(_fc map[*_b .PdfObjectStream ]struct{},_ebb error ){_fc =map[*_b .PdfObjectStream ]struct{}{};_ccb :=map[*_da .PdfFont ]struct{}{};_bab :=_ggba (_dc );for _ ,_gb :=range _bab ._ege {_df ,_ac :=_b .GetDict (_gb .PdfObject );if !_ac {continue ;};_fae ,_ac :=_b .GetDict (_df .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_ac {continue ;};_aec ,_ :=_ddc (_df .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_edd ,_cde :=_da .NewPdfPageResourcesFromDict (_fae );if _cde !=nil {return nil ,_cde ;};_dadd :=[]content {{_dffe :_aec ,_ece :_edd }};_bdf :=_dcg (_df .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _bdf !=nil {_dadd =append (_dadd ,_bdf ...);};for _ ,_be :=range _dadd {_dff ,_cefg :=_c .NewFromContents (_be ._dffe ,_be ._ece );if _cefg !=nil {return nil ,_cefg ;};_afd ,_ ,_ ,_cefg :=_dff .ExtractPageText ();if _cefg !=nil {return nil ,_cefg ;};for _ ,_eef :=range _afd .Marks ().Elements (){if _eef .Font ==nil {continue ;};if _ ,_acf :=_ccb [_eef .Font ];!_acf {_ccb [_eef .Font ]=struct{}{};};};};};_bec :=map[*_b .PdfObjectStream ][]*_da .PdfFont {};for _gf :=range _ccb {_ad :=_gf .FontDescriptor ();if _ad ==nil ||_ad .FontFile2 ==nil {continue ;};_bgc ,_fgc :=_b .GetStream (_ad .FontFile2 );if !_fgc {continue ;};_bec [_bgc ]=append (_bec [_bgc ],_gf );};for _gbg :=range _bec {var _dga []rune ;var _acc []_bd .GlyphIndex ;for _ ,_fcd :=range _bec [_gbg ]{switch _dbg :=_fcd .Encoder ().(type ){case *_ec .IdentityEncoder :_gef :=_dbg .RegisteredRunes ();_dag :=make ([]_bd .GlyphIndex ,len (_gef ));for _eeb ,_cdfb :=range _gef {_dag [_eeb ]=_bd .GlyphIndex (_cdfb );};_acc =append (_acc ,_dag ...);case *_ec .TrueTypeFontEncoder :_fab :=_dbg .RegisteredRunes ();_dga =append (_dga ,_fab ...);case _ec .SimpleEncoder :_bcb :=_dbg .Charcodes ();for _ ,_aff :=range _bcb {_cee ,_gfc :=_dbg .CharcodeToRune (_aff );if !_gfc {_d .Log .Debug ("\u0043\u0068a\u0072\u0063\u006f\u0064\u0065\u003c\u002d\u003e\u0072\u0075\u006e\u0065\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064: \u0025\u0064",_aff );continue ;};_dga =append (_dga ,_cee );};};};_ebb =_gde (_gbg ,_dga ,_acc );if _ebb !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006eg\u0020f\u006f\u006e\u0074\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u003a\u0020\u0025\u0076",_ebb );return nil ,_ebb ;};_fc [_gbg ]=struct{}{};};return _fc ,nil ;};func _dcg (_dd _b .PdfObject )[]content {if _dd ==nil {return nil ;};_bbb ,_bbbe :=_b .GetArray (_dd );if !_bbbe {_d .Log .Debug ("\u0041\u006e\u006e\u006fts\u0020\u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0061\u0072\u0072\u0061\u0079");return nil ;};var _gba []content ;for _ ,_bgb :=range _bbb .Elements (){_baa ,_gga :=_b .GetDict (_bgb );if !_gga {_d .Log .Debug ("I\u0067\u006e\u006f\u0072\u0069\u006eg\u0020\u006e\u006f\u006e\u002d\u0064i\u0063\u0074\u0020\u0065\u006c\u0065\u006de\u006e\u0074\u0020\u0069\u006e\u0020\u0041\u006e\u006e\u006ft\u0073");continue ;};_gdbg ,_gga :=_b .GetDict (_baa .Get ("\u0041\u0050"));if !_gga {_d .Log .Debug ("\u004e\u006f\u0020\u0041P \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_gdee :=_b .TraceToDirectObject (_gdbg .Get ("\u004e"));if _gdee ==nil {_d .Log .Debug ("N\u006f\u0020\u004e\u0020en\u0074r\u0079\u0020\u002d\u0020\u0073k\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};var _eaf *_b .PdfObjectStream ;switch _fca :=_gdee .(type ){case *_b .PdfObjectDictionary :_ddf ,_aab :=_b .GetName (_baa .Get ("\u0041\u0053"));if !_aab {_d .Log .Debug ("\u004e\u006f\u0020\u0041S \u0065\u006e\u0074\u0072\u0079\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069n\u0067");continue ;};_eaf ,_aab =_b .GetStream (_fca .Get (*_ddf ));if !_aab {_d .Log .Debug ("\u0046o\u0072\u006d\u0020\u006eo\u0074\u0020\u0066\u006f\u0075n\u0064 \u002d \u0073\u006b\u0069\u0070\u0070\u0069\u006eg");continue ;};case *_b .PdfObjectStream :_eaf =_fca ;};if _eaf ==nil {_d .Log .Debug ("\u0046\u006f\u0072m\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0028n\u0069\u006c\u0029\u0020\u002d\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067");continue ;};_cec ,_edf :=_da .NewXObjectFormFromStream (_eaf );if _edf !=nil {_d .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020l\u006f\u0061\u0064\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_edf );continue ;};_ade ,_edf :=_cec .GetContentStream ();if _edf !=nil {_d .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0064e\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0063\u006fn\u0074\u0065\u006et\u0073:\u0020\u0025\u0076",_edf );continue ;};_gba =append (_gba ,content {_dffe :string (_ade ),_ece :_cec .Resources });};return _gba ;};

// CombineDuplicateDirectObjects combines duplicated direct objects by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateDirectObjects struct{};

// ImagePPI optimizes images by scaling images such that the PPI (pixels per inch) is never higher than ImageUpperPPI.
// TODO(a5i): Add support for inline images.
// It implements interface model.Optimizer.
type ImagePPI struct{ImageUpperPPI float64 ;};

// Options describes PDF optimization parameters.
type Options struct{CombineDuplicateStreams bool ;CombineDuplicateDirectObjects bool ;ImageUpperPPI float64 ;ImageQuality int ;UseObjectStreams bool ;CombineIdenticalIndirectObjects bool ;CompressStreams bool ;CleanFonts bool ;SubsetFonts bool ;CleanContentstream bool ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_caf *CleanFonts )Optimize (objects []_b .PdfObject )(_gfe []_b .PdfObject ,_agg error ){var _fga map[*_b .PdfObjectStream ]struct{};if _caf .Subset {var _gdb error ;_fga ,_gdb =_ff (objects );if _gdb !=nil {return nil ,_gdb ;};};for _ ,_cgd :=range objects {_aed ,_dagc :=_b .GetStream (_cgd );if !_dagc {continue ;};if _ ,_ded :=_fga [_aed ];_ded {continue ;};_bbd ,_fcdg :=_b .NewEncoderFromStream (_aed );if _fcdg !=nil {_d .Log .Debug ("\u0045\u0052RO\u0052\u0020\u0067e\u0074\u0074\u0069\u006eg e\u006eco\u0064\u0065\u0072\u003a\u0020\u0025\u0076 -\u0020\u0069\u0067\u006e\u006f\u0072\u0069n\u0067",_fcdg );continue ;};_dgb ,_fcdg :=_bbd .DecodeStream (_aed );if _fcdg !=nil {_d .Log .Debug ("\u0044\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u003a\u0020\u0025v\u0020\u002d\u0020\u0069\u0067\u006e\u006f\u0072\u0069\u006e\u0067",_fcdg );continue ;};if len (_dgb )< 4{continue ;};_faeb :=string (_dgb [:4]);if _faeb =="\u004f\u0054\u0054\u004f"{continue ;};if _faeb !="\u0000\u0001\u0000\u0000"&&_faeb !="\u0074\u0072\u0075\u0065"{continue ;};_dagf ,_fcdg :=_bd .Parse (_ga .NewReader (_dgb ));if _fcdg !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020P\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_fcdg );continue ;};_fcdg =_dagf .Optimize ();if _fcdg !=nil {continue ;};var _edba _ga .Buffer ;_fcdg =_dagf .Write (&_edba );if _fcdg !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u0020W\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076\u0020\u002d\u0020\u0069\u0067\u006eo\u0072\u0069\u006e\u0067",_fcdg );continue ;};if _edba .Len ()> len (_dgb ){_d .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");continue ;};_fdda ,_fcdg :=_b .MakeStream (_edba .Bytes (),_b .NewFlateEncoder ());if _fcdg !=nil {continue ;};*_aed =*_fdda ;_aed .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_b .MakeInteger (int64 (_edba .Len ())));};return objects ,nil ;};type content struct{_dffe string ;_ece *_da .PdfPageResources ;};

// Chain allows to use sequence of optimizers.
// It implements interface model.Optimizer.
type Chain struct{_dg []_da .Optimizer };

// CombineDuplicateStreams combines duplicated streams by its data hash.
// It implements interface model.Optimizer.
type CombineDuplicateStreams struct{};

// Append appends optimizers to the chain.
func (_dge *Chain )Append (optimizers ..._da .Optimizer ){_dge ._dg =append (_dge ._dg ,optimizers ...)};

// Optimize optimizes PDF objects to decrease PDF size.
func (_abg *CombineDuplicateDirectObjects )Optimize (objects []_b .PdfObject )(_feb []_b .PdfObject ,_dadb error ){_fgge (objects );_bgd :=make (map[string ][]*_b .PdfObjectDictionary );var _fcdd func (_adg *_b .PdfObjectDictionary );_fcdd =func (_ceed *_b .PdfObjectDictionary ){for _ ,_add :=range _ceed .Keys (){_bf :=_ceed .Get (_add );if _aefb ,_ecf :=_bf .(*_b .PdfObjectDictionary );_ecf {_cac :=_ed .New ();_cac .Write ([]byte (_aefb .WriteString ()));_daad :=string (_cac .Sum (nil ));_bgd [_daad ]=append (_bgd [_daad ],_aefb );_fcdd (_aefb );};};};for _ ,_ebd :=range objects {_fce ,_cbb :=_ebd .(*_b .PdfIndirectObject );if !_cbb {continue ;};if _ddb ,_afeb :=_fce .PdfObject .(*_b .PdfObjectDictionary );_afeb {_fcdd (_ddb );};};_dbgb :=make ([]_b .PdfObject ,0,len (_bgd ));_bfd :=make (map[_b .PdfObject ]_b .PdfObject );for _ ,_fdgb :=range _bgd {if len (_fdgb )< 2{continue ;};_ccd :=_b .MakeDict ();_ccd .Merge (_fdgb [0]);_cag :=_b .MakeIndirectObject (_ccd );_dbgb =append (_dbgb ,_cag );for _bgf :=0;_bgf < len (_fdgb );_bgf ++{_gfg :=_fdgb [_bgf ];_bfd [_gfg ]=_cag ;};};_feb =make ([]_b .PdfObject ,len (objects ));copy (_feb ,objects );_feb =append (_dbgb ,_feb ...);_gcfba (_feb ,_bfd );return _feb ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_edc *CompressStreams )Optimize (objects []_b .PdfObject )(_beg []_b .PdfObject ,_bded error ){_beg =make ([]_b .PdfObject ,len (objects ));copy (_beg ,objects );for _ ,_gcf :=range objects {_gbgfb ,_accf :=_b .GetStream (_gcf );if !_accf {continue ;};if _fdb :=_gbgfb .Get ("\u0046\u0069\u006c\u0074\u0065\u0072");_fdb !=nil {if _ ,_gfff :=_b .GetName (_fdb );_gfff {continue ;};if _ebdb ,_efb :=_b .GetArray (_fdb );_efb &&_ebdb .Len ()> 0{continue ;};};_afcb :=_b .NewFlateEncoder ();var _gffb []byte ;_gffb ,_bded =_afcb .EncodeBytes (_gbgfb .Stream );if _bded !=nil {return _beg ,_bded ;};_egf :=_afcb .MakeStreamDict ();if len (_gffb )+len (_egf .WriteString ())< len (_gbgfb .Stream ){_gbgfb .Stream =_gffb ;_gbgfb .PdfObjectDictionary .Merge (_egf );_gbgfb .PdfObjectDictionary .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_b .MakeInteger (int64 (len (_gbgfb .Stream ))));};};return _beg ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_dfe *CombineDuplicateStreams )Optimize (objects []_b .PdfObject )(_faed []_b .PdfObject ,_fdga error ){_gfb :=make (map[_b .PdfObject ]_b .PdfObject );_daae :=make (map[_b .PdfObject ]struct{});_ggae :=make (map[string ][]*_b .PdfObjectStream );for _ ,_edg :=range objects {if _ecb ,_ffd :=_edg .(*_b .PdfObjectStream );_ffd {_fgad :=_ed .New ();_fgad .Write ([]byte (_ecb .Stream ));_edbab :=string (_fgad .Sum (nil ));_ggae [_edbab ]=append (_ggae [_edbab ],_ecb );};};for _ ,_fgbe :=range _ggae {if len (_fgbe )< 2{continue ;};_gea :=_fgbe [0];for _fee :=1;_fee < len (_fgbe );_fee ++{_gfa :=_fgbe [_fee ];_gfb [_gfa ]=_gea ;_daae [_gfa ]=struct{}{};};};_faed =make ([]_b .PdfObject ,0,len (objects )-len (_daae ));for _ ,_efa :=range objects {if _ ,_bdb :=_daae [_efa ];_bdb {continue ;};_faed =append (_faed ,_efa );};_gcfba (_faed ,_gfb );return _faed ,nil ;};func _gde (_bgg *_b .PdfObjectStream ,_gafe []rune ,_aef []_bd .GlyphIndex )error {_bgg ,_aga :=_b .GetStream (_bgg );if !_aga {_d .Log .Debug ("\u0045\u006d\u0062\u0065\u0064\u0064\u0065\u0064\u0020\u0066\u006f\u006e\u0074\u0020\u006f\u0062\u006a\u0065c\u0074\u0020\u006e\u006f\u0074\u0020\u0066o\u0075\u006e\u0064\u0020\u002d\u002d\u0020\u0041\u0042\u004f\u0052T\u0020\u0073\u0075\u0062\u0073\u0065\u0074\u0074\u0069\u006e\u0067");return _ab .New ("\u0066\u006f\u006e\u0074fi\u006c\u0065\u0032\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_eg ,_ede :=_b .DecodeStream (_bgg );if _ede !=nil {_d .Log .Debug ("\u0044\u0065c\u006f\u0064\u0065 \u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0076",_ede );return _ede ;};_edb ,_ede :=_bd .Parse (_ga .NewReader (_eg ));if _ede !=nil {_d .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073\u0069n\u0067\u0020\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0020f\u006f\u006e\u0074",len (_bgg .Stream ));return _ede ;};_fe :=_aef ;if len (_gafe )> 0{_gcg :=_edb .LookupRunes (_gafe );_fe =append (_fe ,_gcg ...);};_edb ,_ede =_edb .SubsetKeepIndices (_fe );if _ede !=nil {_d .Log .Debug ("\u0045R\u0052\u004f\u0052\u0020s\u0075\u0062\u0073\u0065\u0074t\u0069n\u0067 \u0066\u006f\u006e\u0074\u003a\u0020\u0025v",_ede );return _ede ;};var _afc _ga .Buffer ;_ede =_edb .Write (&_afc );if _ede !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_ede );return _ede ;};if _afc .Len ()> len (_eg ){_d .Log .Debug ("\u0052\u0065-\u0077\u0072\u0069\u0074\u0074\u0065\u006e\u0020\u0066\u006f\u006e\u0074\u0020\u0069\u0073\u0020\u006c\u0061\u0072\u0067\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u002d\u0020\u0073\u006b\u0069\u0070");return nil ;};_gdd ,_ede :=_b .MakeStream (_afc .Bytes (),_b .NewFlateEncoder ());if _ede !=nil {_d .Log .Debug ("\u0045\u0052\u0052\u004fR \u0057\u0072\u0069\u0074\u0069\u006e\u0067\u0020\u0066\u006f\u006e\u0074\u003a\u0020%\u0076",_ede );return _ede ;};*_bgg =*_gdd ;_bgg .Set ("\u004ce\u006e\u0067\u0074\u0068\u0031",_b .MakeInteger (int64 (_afc .Len ())));return nil ;};

// CompressStreams compresses uncompressed streams.
// It implements interface model.Optimizer.
type CompressStreams struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_feec *Image )Optimize (objects []_b .PdfObject )(_fgdd []_b .PdfObject ,_agge error ){if _feec .ImageQuality <=0{return objects ,nil ;};_dedf :=_ccbd (objects );if len (_dedf )==0{return objects ,nil ;};_bdede :=make (map[_b .PdfObject ]_b .PdfObject );_eaef :=make (map[_b .PdfObject ]struct{});for _ ,_bebd :=range _dedf {_aea :=_bebd .Stream .PdfObjectDictionary .Get (_b .PdfObjectName ("\u0053\u004d\u0061s\u006b"));_eaef [_aea ]=struct{}{};};for _faa ,_cab :=range _dedf {_dfa :=_cab .Stream ;if _ ,_gdc :=_eaef [_dfa ];_gdc {continue ;};_cage ,_aee :=_b .NewEncoderFromStream (_dfa );if _aee !=nil {_d .Log .Warning ("\u0045\u0072\u0072\u006f\u0072 \u0067\u0065\u0074\u0020\u0065\u006e\u0063\u006f\u0064\u0065\u0072\u0020\u0066o\u0072\u0020\u0074\u0068\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0025\u0073");continue ;};_fabg ,_aee :=_cage .DecodeStream (_dfa );if _aee !=nil {_d .Log .Warning ("\u0045\u0072\u0072\u006f\u0072\u0020\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0074\u0068e\u0020i\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0025\u0073");continue ;};_gfbc :=_b .NewDCTEncoder ();_gfbc .ColorComponents =_cab .ColorComponents ;_gfbc .Quality =_feec .ImageQuality ;_gfbc .BitsPerComponent =_cab .BitsPerComponent ;_gfbc .Width =_cab .Width ;_gfbc .Height =_cab .Height ;_eda ,_aee :=_gfbc .EncodeBytes (_fabg );if _aee !=nil {_d .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_aee );return nil ,_aee ;};var _dcb _b .StreamEncoder ;_dcb =_gfbc ;{_dfc :=_b .NewFlateEncoder ();_cfdee :=_b .NewMultiEncoder ();_cfdee .AddEncoder (_dfc );_cfdee .AddEncoder (_gfbc );_agag ,_gcda :=_cfdee .EncodeBytes (_fabg );if _gcda !=nil {return nil ,_gcda ;};if len (_agag )< len (_eda ){_d .Log .Debug ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063\u0020\u0069\u006d\u0070\u0072\u006f\u0076\u0065\u0073\u003a\u0020\u0025\u0064\u0020\u0074o\u0020\u0025\u0064\u0020\u0028o\u0072\u0069g\u0020\u0025\u0064\u0029",len (_eda ),len (_agag ),len (_dfa .Stream ));_eda =_agag ;_dcb =_cfdee ;};};_eddf :=len (_dfa .Stream );if _eddf < len (_eda ){continue ;};_dgbc :=&_b .PdfObjectStream {Stream :_eda };_dgbc .PdfObjectReference =_dfa .PdfObjectReference ;_dgbc .PdfObjectDictionary =_b .MakeDict ();_dgbc .Merge (_dfa .PdfObjectDictionary );_dgbc .Merge (_dcb .MakeStreamDict ());_dgbc .Set ("\u004c\u0065\u006e\u0067\u0074\u0068",_b .MakeInteger (int64 (len (_eda ))));_bdede [_dfa ]=_dgbc ;_dedf [_faa ].Stream =_dgbc ;};_fgdd =make ([]_b .PdfObject ,len (objects ));copy (_fgdd ,objects );_gcfba (_fgdd ,_bdede );return _fgdd ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cfd *CombineIdenticalIndirectObjects )Optimize (objects []_b .PdfObject )(_gae []_b .PdfObject ,_bdcd error ){_fgge (objects );_fef :=make (map[_b .PdfObject ]_b .PdfObject );_dee :=make (map[_b .PdfObject ]struct{});_gda :=make (map[string ][]*_b .PdfIndirectObject );for _ ,_gbd :=range objects {_fabb ,_gdag :=_gbd .(*_b .PdfIndirectObject );if !_gdag {continue ;};if _cfde ,_aba :=_fabb .PdfObject .(*_b .PdfObjectDictionary );_aba {if _dfeg ,_beb :=_cfde .Get ("\u0054\u0079\u0070\u0065").(*_b .PdfObjectName );_beb &&*_dfeg =="\u0050\u0061\u0067\u0065"{continue ;};_bce :=_ed .New ();_bce .Write ([]byte (_cfde .WriteString ()));_eee :=string (_bce .Sum (nil ));_gda [_eee ]=append (_gda [_eee ],_fabb );};};for _ ,_cda :=range _gda {if len (_cda )< 2{continue ;};_bebg :=_cda [0];for _agd :=1;_agd < len (_cda );_agd ++{_feee :=_cda [_agd ];_fef [_feee ]=_bebg ;_dee [_feee ]=struct{}{};};};_gae =make ([]_b .PdfObject ,0,len (objects )-len (_dee ));for _ ,_feeec :=range objects {if _ ,_gcd :=_dee [_feeec ];_gcd {continue ;};_gae =append (_gae ,_feeec );};_gcfba (_gae ,_fef );return _gae ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_cdf *CleanContentstream )Optimize (objects []_b .PdfObject )(_ea []_b .PdfObject ,_ge error ){_ef :=map[*_b .PdfObjectStream ]struct{}{};var _fdg []*_b .PdfObjectStream ;_cb :=func (_cc *_b .PdfObjectStream ){if _ ,_gd :=_ef [_cc ];!_gd {_ef [_cc ]=struct{}{};_fdg =append (_fdg ,_cc );};};for _ ,_ba :=range objects {switch _ce :=_ba .(type ){case *_b .PdfIndirectObject :switch _fgg :=_ce .PdfObject .(type ){case *_b .PdfObjectDictionary :if _de ,_cae :=_b .GetName (_fgg .Get ("\u0054\u0079\u0070\u0065"));!_cae ||_de .String ()!="\u0050\u0061\u0067\u0065"{continue ;};if _dgeg ,_gad :=_b .GetStream (_fgg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_gad {_cb (_dgeg );}else if _bdc ,_ggbb :=_b .GetArray (_fgg .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));_ggbb {for _ ,_bb :=range _bdc .Elements (){if _daa ,_eae :=_b .GetStream (_bb );_eae {_cb (_daa );};};};};case *_b .PdfObjectStream :if _fgd ,_cg :=_b .GetName (_ce .Get ("\u0054\u0079\u0070\u0065"));!_cg ||_fgd .String ()!="\u0058O\u0062\u006a\u0065\u0063\u0074"{continue ;};if _gaf ,_daf :=_b .GetName (_ce .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));!_daf ||_gaf .String ()!="\u0046\u006f\u0072\u006d"{continue ;};_cb (_ce );};};for _ ,_fgb :=range _fdg {_ge =_ee (_fgb );if _ge !=nil {return nil ,_ge ;};};return objects ,nil ;};

// Optimize optimizes PDF objects to decrease PDF size.
func (_gefe *ImagePPI )Optimize (objects []_b .PdfObject )(_dfcf []_b .PdfObject ,_bda error ){if _gefe .ImageUpperPPI <=0{return objects ,nil ;};_fec :=_ccbd (objects );if len (_fec )==0{return objects ,nil ;};_bcdd :=make (map[_b .PdfObject ]struct{});for _ ,_bba :=range _fec {_fgca :=_bba .Stream .PdfObjectDictionary .Get (_b .PdfObjectName ("\u0053\u004d\u0061s\u006b"));_bcdd [_fgca ]=struct{}{};};_dgef :=make (map[*_b .PdfObjectStream ]*imageInfo );for _ ,_ged :=range _fec {_dgef [_ged .Stream ]=_ged ;};var _aeee *_b .PdfObjectDictionary ;for _ ,_cceb :=range objects {if _gag ,_aggf :=_b .GetDict (_cceb );_aeee ==nil &&_aggf {if _bdae ,_eebd :=_b .GetName (_gag .Get (_b .PdfObjectName ("\u0054\u0079\u0070\u0065")));_eebd &&*_bdae =="\u0043a\u0074\u0061\u006c\u006f\u0067"{_aeee =_gag ;};};};if _aeee ==nil {return objects ,nil ;};_egg ,_fge :=_b .GetDict (_aeee .Get (_b .PdfObjectName ("\u0050\u0061\u0067e\u0073")));if !_fge {return objects ,nil ;};_acde ,_eddc :=_b .GetArray (_egg .Get (_b .PdfObjectName ("\u004b\u0069\u0064\u0073")));if !_eddc {return objects ,nil ;};_dfec :=make (map[string ]*imageInfo );for _ ,_eac :=range _acde .Elements (){_gebd ,_bad :=_b .GetDict (_eac );if !_bad {continue ;};_eaff ,_ecc :=_b .GetArray (_gebd .Get ("\u0043\u006f\u006e\u0074\u0065\u006e\u0074\u0073"));if !_ecc {continue ;};_gbac ,_efae :=_b .GetDict (_gebd .Get ("\u0052e\u0073\u006f\u0075\u0072\u0063\u0065s"));if !_efae {continue ;};_dde ,_gbe :=_b .GetDict (_gbac .Get ("\u0058O\u0062\u006a\u0065\u0063\u0074"));if !_gbe {continue ;};_fcddf :=_dde .Keys ();for _ ,_acfe :=range _fcddf {if _bbc ,_dfcc :=_b .GetStream (_dde .Get (_acfe ));_dfcc {if _dfcg ,_ggab :=_dgef [_bbc ];_ggab {_dfec [string (_acfe )]=_dfcg ;};};};for _ ,_gaga :=range _eaff .Elements (){if _geff ,_eeg :=_b .GetStream (_gaga );_eeg {_afgf ,_dcbb :=_b .NewEncoderFromStream (_geff );if _dcbb !=nil {return nil ,_dcbb ;};_dcf ,_dcbb :=_afgf .DecodeStream (_geff );if _dcbb !=nil {return nil ,_dcbb ;};_deef :=_fa .NewContentStreamParser (string (_dcf ));_geffd ,_dcbb :=_deef .Parse ();if _dcbb !=nil {return nil ,_dcbb ;};_aabb ,_ggabb :=1.0,1.0;for _ ,_gefad :=range *_geffd {if _gefad .Operand =="\u0051"{_aabb ,_ggabb =1.0,1.0;};if _gefad .Operand =="\u0063\u006d"&&len (_gefad .Params )==6{if _gedd ,_gbc :=_b .GetFloatVal (_gefad .Params [0]);_gbc {_aabb =_aabb *_gedd ;};if _caba ,_fdbg :=_b .GetFloatVal (_gefad .Params [3]);_fdbg {_ggabb =_ggabb *_caba ;};if _egfc ,_cfa :=_b .GetIntVal (_gefad .Params [0]);_cfa {_aabb =_aabb *float64 (_egfc );};if _acbe ,_caeb :=_b .GetIntVal (_gefad .Params [3]);_caeb {_ggabb =_ggabb *float64 (_acbe );};};if _gefad .Operand =="\u0044\u006f"&&len (_gefad .Params )==1{_dgd ,_gcgb :=_b .GetName (_gefad .Params [0]);if !_gcgb {continue ;};if _cad ,_fbb :=_dfec [string (*_dgd )];_fbb {_eed ,_cdfbe :=_aabb /72.0,_ggabb /72.0;_gcde ,_fbc :=float64 (_cad .Width )/_eed ,float64 (_cad .Height )/_cdfbe ;if _eed ==0||_cdfbe ==0{_gcde =72.0;_fbc =72.0;};_cad .PPI =_f .Max (_cad .PPI ,_gcde );_cad .PPI =_f .Max (_cad .PPI ,_fbc );};};};};};};for _ ,_bfdb :=range _fec {if _ ,_ebdf :=_bcdd [_bfdb .Stream ];_ebdf {continue ;};if _bfdb .PPI <=_gefe .ImageUpperPPI {continue ;};_afgff :=_gefe .ImageUpperPPI /_bfdb .PPI ;if _ecg :=_dgf (_bfdb .Stream ,_afgff );_ecg !=nil {_d .Log .Debug ("\u0045\u0072\u0072\u006f\u0072 \u0073\u0063\u0061\u006c\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006be\u0065\u0070\u0020\u006f\u0072\u0069\u0067\u0069\u006e\u0061\u006c\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073",_ecg );}else {if _eba ,_ccea :=_b .GetStream (_bfdb .Stream .PdfObjectDictionary .Get (_b .PdfObjectName ("\u0053\u004d\u0061s\u006b")));_ccea {if _affg :=_dgf (_eba ,_afgff );_affg !=nil {return nil ,_affg ;};};};};return objects ,nil ;};

// New creates a optimizers chain from options.
func New (options Options )*Chain {_cea :=new (Chain );if options .CleanFonts ||options .SubsetFonts {_cea .Append (&CleanFonts {Subset :options .SubsetFonts });};if options .CleanContentstream {_cea .Append (new (CleanContentstream ));};if options .ImageUpperPPI > 0{_afed :=new (ImagePPI );_afed .ImageUpperPPI =options .ImageUpperPPI ;_cea .Append (_afed );};if options .ImageQuality > 0{_dgc :=new (Image );_dgc .ImageQuality =options .ImageQuality ;_cea .Append (_dgc );};if options .CombineDuplicateDirectObjects {_cea .Append (new (CombineDuplicateDirectObjects ));};if options .CombineDuplicateStreams {_cea .Append (new (CombineDuplicateStreams ));};if options .CombineIdenticalIndirectObjects {_cea .Append (new (CombineIdenticalIndirectObjects ));};if options .UseObjectStreams {_cea .Append (new (ObjectStreams ));};if options .CompressStreams {_cea .Append (new (CompressStreams ));};return _cea ;};func _fgge (_ddec []_b .PdfObject ){for _gbbdg ,_ddgd :=range _ddec {switch _ebgf :=_ddgd .(type ){case *_b .PdfIndirectObject :_ebgf .ObjectNumber =int64 (_gbbdg +1);_ebgf .GenerationNumber =0;case *_b .PdfObjectStream :_ebgf .ObjectNumber =int64 (_gbbdg +1);_ebgf .GenerationNumber =0;case *_b .PdfObjectStreams :_ebgf .ObjectNumber =int64 (_gbbdg +1);_ebgf .GenerationNumber =0;};};};func _gcfba (_abd []_b .PdfObject ,_abdc map[_b .PdfObject ]_b .PdfObject ){if _abdc ==nil ||len (_abdc )==0{return ;};for _adfc ,_eab :=range _abd {if _ddef ,_eefe :=_abdc [_eab ];_eefe {_abd [_adfc ]=_ddef ;continue ;};_abdc [_eab ]=_eab ;switch _geg :=_eab .(type ){case *_b .PdfObjectArray :_ecbf :=make ([]_b .PdfObject ,_geg .Len ());copy (_ecbf ,_geg .Elements ());_gcfba (_ecbf ,_abdc );for _dca ,_deg :=range _ecbf {_geg .Set (_dca ,_deg );};case *_b .PdfObjectStreams :_gcfba (_geg .Elements (),_abdc );case *_b .PdfObjectStream :_efaf :=[]_b .PdfObject {_geg .PdfObjectDictionary };_gcfba (_efaf ,_abdc );_geg .PdfObjectDictionary =_efaf [0].(*_b .PdfObjectDictionary );case *_b .PdfObjectDictionary :_fcdf :=_geg .Keys ();_age :=make ([]_b .PdfObject ,len (_fcdf ));for _cca ,_gbbd :=range _fcdf {_age [_cca ]=_geg .Get (_gbbd );};_gcfba (_age ,_abdc );for _cadb ,_dbee :=range _fcdf {_geg .Set (_dbee ,_age [_cadb ]);};case *_b .PdfIndirectObject :_dbgc :=[]_b .PdfObject {_geg .PdfObject };_gcfba (_dbgc ,_abdc );_geg .PdfObject =_dbgc [0];};};};

// Optimize optimizes PDF objects to decrease PDF size.
func (_ggg *ObjectStreams )Optimize (objects []_b .PdfObject )(_bcc []_b .PdfObject ,_gcfb error ){_ddg :=&_b .PdfObjectStreams {};_ecfb :=make ([]_b .PdfObject ,0,len (objects ));for _ ,_dcfg :=range objects {if _cedc ,_gfbg :=_dcfg .(*_b .PdfIndirectObject );_gfbg &&_cedc .GenerationNumber ==0{_ddg .Append (_dcfg );}else {_ecfb =append (_ecfb ,_dcfg );};};if _ddg .Len ()==0{return _ecfb ,nil ;};_bcc =make ([]_b .PdfObject ,0,len (_ecfb )+_ddg .Len ()+1);if _ddg .Len ()> 1{_bcc =append (_bcc ,_ddg );};_bcc =append (_bcc ,_ddg .Elements ()...);_bcc =append (_bcc ,_ecfb ...);return _bcc ,nil ;};func _ggba (_fbe []_b .PdfObject )objectStructure {_debe :=objectStructure {};_eff :=false ;for _ ,_gbcg :=range _fbe {switch _eebf :=_gbcg .(type ){case *_b .PdfIndirectObject :_fbec ,_dcfb :=_b .GetDict (_eebf );if !_dcfb {continue ;};_cgg ,_dcfb :=_b .GetName (_fbec .Get ("\u0054\u0079\u0070\u0065"));if !_dcfb {continue ;};switch _cgg .String (){case "\u0043a\u0074\u0061\u006c\u006f\u0067":_debe ._bbcc =_fbec ;_eff =true ;};};if _eff {break ;};};if !_eff {return _debe ;};_eaa ,_acca :=_b .GetDict (_debe ._bbcc .Get ("\u0050\u0061\u0067e\u0073"));if !_acca {return _debe ;};_debe ._ffb =_eaa ;_bafd ,_acca :=_b .GetArray (_eaa .Get ("\u004b\u0069\u0064\u0073"));if !_acca {return _debe ;};for _ ,_fbd :=range _bafd .Elements (){_gfad ,_ffed :=_b .GetIndirect (_fbd );if !_ffed {break ;};_debe ._ege =append (_debe ._ege ,_gfad );};return _debe ;};func _ee (_gc *_b .PdfObjectStream )error {_ca ,_db :=_b .DecodeStream (_gc );if _db !=nil {return _db ;};_aeb :=_fa .NewContentStreamParser (string (_ca ));_cfc ,_db :=_aeb .Parse ();if _db !=nil {return _db ;};_cfc =_eb (_cfc );_ebg :=_cfc .Bytes ();if len (_ebg )>=len (_ca ){return nil ;};_fg ,_db :=_b .MakeStream (_cfc .Bytes (),_b .NewFlateEncoder ());if _db !=nil {return _db ;};_gc .Stream =_fg .Stream ;_gc .Merge (_fg .PdfObjectDictionary );return nil ;};

// ObjectStreams groups PDF objects to object streams.
// It implements interface model.Optimizer.
type ObjectStreams struct{};

// Optimize optimizes PDF objects to decrease PDF size.
func (_fd *Chain )Optimize (objects []_b .PdfObject )(_fdf []_b .PdfObject ,_afe error ){_fdf =objects ;for _ ,_afg :=range _fd ._dg {_fdf ,_afe =_afg .Optimize (_fdf );if _afe !=nil {return _fdf ,_afe ;};};return _fdf ,nil ;};func _eb (_gab *_fa .ContentStreamOperations )*_fa .ContentStreamOperations {if _gab ==nil {return nil ;};_gg :=_fa .ContentStreamOperations {};for _ ,_cd :=range *_gab {switch _cd .Operand {case "\u0042\u0044\u0043","\u0042\u004d\u0043","\u0045\u004d\u0043":continue ;case "\u0054\u006d":if len (_cd .Params )==6{if _ae ,_bde :=_b .GetNumbersAsFloat (_cd .Params );_bde ==nil {if _ae [0]==1&&_ae [1]==0&&_ae [2]==0&&_ae [3]==1{_cd =&_fa .ContentStreamOperation {Params :[]_b .PdfObject {_cd .Params [4],_cd .Params [5]},Operand :"\u0054\u0064"};};};};};_gg =append (_gg ,_cd );};return &_gg ;};func _dgf (_agdd *_b .PdfObjectStream ,_acb float64 )error {_cfg ,_fgddc :=_da .NewXObjectImageFromStream (_agdd );if _fgddc !=nil {return _fgddc ;};_def ,_fgddc :=_cfg .ToImage ();if _fgddc !=nil {return _fgddc ;};_bfb ,_fgddc :=_def .ToGoImage ();if _fgddc !=nil {return _fgddc ;};_gbf :=int (_f .RoundToEven (float64 (_def .Width )*_acb ));_adf :=int (_f .RoundToEven (float64 (_def .Height )*_acb ));_ega :=_af .Rect (0,0,_gbf ,_adf );var _abgg _e .Image ;var _gdf func (_af .Image )(*_da .Image ,error );switch _cfg .ColorSpace .String (){case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_abgg =_af .NewRGBA (_ega );_gdf =_da .ImageHandling .NewImageFromGoImage ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_abgg =_af .NewGray (_ega );_gdf =_da .ImageHandling .NewGrayImageFromGoImage ;default:return _g .Errorf ("\u006f\u0070\u0074\u0069\u006d\u0069\u007a\u0061t\u0069\u006f\u006e i\u0073\u0020\u006e\u006f\u0074\u0020s\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0063\u006fl\u006f\u0072\u0020\u0073\u0070\u0061\u0063\u0065 \u0025\u0073",_cfg .ColorSpace .String ());};_e .CatmullRom .Scale (_abgg ,_abgg .Bounds (),_bfb ,_bfb .Bounds (),_e .Over ,&_e .Options {});if _def ,_fgddc =_gdf (_abgg );_fgddc !=nil {return _fgddc ;};_afgg :=_b .MakeDict ();_afgg .Set ("\u0051u\u0061\u006c\u0069\u0074\u0079",_b .MakeInteger (100));_afgg .Set ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr",_b .MakeInteger (1));_cfg .Filter .UpdateParams (_afgg );if _fgddc =_cfg .SetImage (_def ,nil );_fgddc !=nil {return _fgddc ;};_cfg .ToPdfObject ();return nil ;};

// CleanContentstream cleans up redundant operands in content streams, including Page and XObject Form
// contents. This process includes:
// 1. Marked content operators are removed.
// 2. Some operands are simplified (shorter form).
// TODO: Add more reduction methods and improving the methods for identifying unnecessary operands.
type CleanContentstream struct{};type objectStructure struct{_bbcc *_b .PdfObjectDictionary ;_ffb *_b .PdfObjectDictionary ;_ege []*_b .PdfIndirectObject ;};

// CleanFonts cleans up embedded fonts, reducing font sizes.
type CleanFonts struct{

// Subset embedded fonts if encountered (if true).
// Otherwise attempts to reduce the font program.
Subset bool ;};