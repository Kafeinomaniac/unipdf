//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package pdfutil ;import (_be "github.com/unidoc/unipdf/v3/common";_a "github.com/unidoc/unipdf/v3/contentstream";_d "github.com/unidoc/unipdf/v3/contentstream/draw";_g "github.com/unidoc/unipdf/v3/core";_c "github.com/unidoc/unipdf/v3/model";);

// NormalizePage performs the following operations on the passed in page:
// - Normalize the page rotation.
//   Rotates the contents of the page according to the Rotate entry, thus
//   flattening the rotation. The Rotate entry of the page is set to nil.
// - Normalize the media box.
//   If the media box of the page is offsetted (Llx != 0 or Lly != 0),
//   the contents of the page are translated to (-Llx, -Lly). After
//   normalization, the media box is updated (Llx and Lly are set to 0 and
//   Urx and Ury are updated accordingly).
// - Normalize the crop box.
//   The crop box of the page is updated based on the previous operations.
// After normalization, the page should look the same if openend using a
// PDF viewer.
// NOTE: This function does not normalize annotations, outlines other parts
// that are not part of the basic geometry and page content streams.
func NormalizePage (page *_c .PdfPage )error {_cg ,_gd :=page .GetMediaBox ();if _gd !=nil {return _gd ;};_bed :=page .Rotate ;_bf :=_bed !=nil &&*_bed %360!=0&&*_bed %90==0;_cg .Normalize ();_ga ,_dd ,_f ,_cf :=_cg .Llx ,_cg .Lly ,_cg .Width (),_cg .Height ();_db :=_ga !=0||_dd !=0;if !_bf &&!_db {return nil ;};_ce :=func (_e ,_ag ,_fc float64 )_d .BoundingBox {return _d .Path {Points :[]_d .Point {_d .NewPoint (0,0).Rotate (_fc ),_d .NewPoint (_e ,0).Rotate (_fc ),_d .NewPoint (0,_ag ).Rotate (_fc ),_d .NewPoint (_e ,_ag ).Rotate (_fc )}}.GetBoundingBox ();};_cfb :=_a .NewContentCreator ();var _ff float64 ;if _bf {_ff =-float64 (*page .Rotate );_bfb :=_ce (_f ,_cf ,_ff );_cfb .Translate ((_bfb .Width -_f )/2+_f /2,(_bfb .Height -_cf )/2+_cf /2);_cfb .RotateDeg (_ff );_cfb .Translate (-_f /2,-_cf /2);_f ,_cf =_bfb .Width ,_bfb .Height ;};if _db {_cfb .Translate (-_ga ,-_dd );};_eb :=_cfb .Operations ();_gb ,_gd :=_g .MakeStream (_eb .Bytes (),_g .NewFlateEncoder ());if _gd !=nil {return _gd ;};_ba :=_g .MakeArray (_gb );_ba .Append (page .GetContentStreamObjs ()...);*_cg =_c .PdfRectangle {Urx :_f ,Ury :_cf };if _ef :=page .CropBox ;_ef !=nil {_ef .Normalize ();_bb ,_ceb ,_gg ,_gdd :=_ef .Llx -_ga ,_ef .Lly -_dd ,_ef .Width (),_ef .Height ();if _bf {_cd :=_ce (_gg ,_gdd ,_ff );_gg ,_gdd =_cd .Width ,_cd .Height ;};*_ef =_c .PdfRectangle {Llx :_bb ,Lly :_ceb ,Urx :_bb +_gg ,Ury :_ceb +_gdd };};_be .Log .Debug ("\u0052\u006f\u0074\u0061\u0074\u0065\u003d\u0025\u0066\u00b0\u0020\u004f\u0070\u0073\u003d%\u0071 \u004d\u0065\u0064\u0069\u0061\u0042\u006f\u0078\u003d\u0025\u002e\u0032\u0066",_ff ,_eb ,_cg );page .Contents =_ba ;page .Rotate =nil ;return nil ;};