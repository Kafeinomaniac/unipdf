//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package fjson provides support for loading PDF form field data from JSON data/files.
package fjson ;import (_ae "encoding/json";_bb "github.com/unidoc/unipdf/v3/core";_c "github.com/unidoc/unipdf/v3/model";_e "io";_b "os";);

// FieldValues implements model.FieldValueProvider interface.
func (_gba *FieldData )FieldValues ()(map[string ]_bb .PdfObject ,error ){_de :=make (map[string ]_bb .PdfObject );for _ ,_dbc :=range _gba ._d {if len (_dbc .Value )> 0{_de [_dbc .Name ]=_bb .MakeString (_dbc .Value );};};return _de ,nil ;};

// LoadFromJSON loads JSON form data from `r`.
func LoadFromJSON (r _e .Reader )(*FieldData ,error ){var _ba FieldData ;_ec :=_ae .NewDecoder (r ).Decode (&_ba ._d );if _ec !=nil {return nil ,_ec ;};return &_ba ,nil ;};

// LoadFromJSONFile loads form field data from a JSON file.
func LoadFromJSONFile (filePath string )(*FieldData ,error ){_cd ,_f :=_b .Open (filePath );if _f !=nil {return nil ,_f ;};defer _cd .Close ();return LoadFromJSON (_cd );};

// LoadFromPDF loads form field data from a PDF.
func LoadFromPDF (rs _e .ReadSeeker )(*FieldData ,error ){_aec ,_ad :=_c .NewPdfReader (rs );if _ad !=nil {return nil ,_ad ;};if _aec .AcroForm ==nil {return nil ,nil ;};var _ecd []fieldValue ;_df :=_aec .AcroForm .AllFields ();for _ ,_g :=range _df {var _cc []string ;_ge :=make (map[string ]struct{});_gc ,_da :=_g .FullName ();if _da !=nil {return nil ,_da ;};if _gf ,_gd :=_g .V .(*_bb .PdfObjectString );_gd {_ecd =append (_ecd ,fieldValue {Name :_gc ,Value :_gf .Decoded ()});continue ;};var _dgg string ;for _ ,_eb :=range _g .Annotations {_be ,_ee :=_bb .GetName (_eb .AS );if _ee {_dgg =_be .String ();};_ccf ,_bea :=_bb .GetDict (_eb .AP );if !_bea {continue ;};_ebf ,_ :=_bb .GetDict (_ccf .Get ("\u004e"));for _ ,_af :=range _ebf .Keys (){_ab :=_af .String ();if _ ,_gb :=_ge [_ab ];!_gb {_cc =append (_cc ,_ab );_ge [_ab ]=struct{}{};};};_fed ,_ :=_bb .GetDict (_ccf .Get ("\u0044"));for _ ,_fea :=range _fed .Keys (){_dab :=_fea .String ();if _ ,_fd :=_ge [_dab ];!_fd {_cc =append (_cc ,_dab );_ge [_dab ]=struct{}{};};};};_db :=fieldValue {Name :_gc ,Value :_dgg ,Options :_cc };_ecd =append (_ecd ,_db );};_dac :=FieldData {_d :_ecd };return &_dac ,nil ;};

// JSON returns the field data as a string in JSON format.
func (_fde FieldData )JSON ()(string ,error ){_ce ,_gcd :=_ae .MarshalIndent (_fde ._d ,"","\u0020\u0020\u0020\u0020");return string (_ce ),_gcd ;};type fieldValue struct{Name string `json:"name"`;Value string `json:"value"`;

// Options lists allowed values if present.
Options []string `json:"options,omitempty"`;};

// FieldData represents form field data loaded from JSON file.
type FieldData struct{_d []fieldValue };

// LoadFromPDFFile loads form field data from a PDF file.
func LoadFromPDFFile (filePath string )(*FieldData ,error ){_ag ,_feb :=_b .Open (filePath );if _feb !=nil {return nil ,_feb ;};defer _ag .Close ();return LoadFromPDF (_ag );};