//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package common contains common properties used by the subpackages.
package common ;import (_ge "fmt";_b "io";_d "os";_c "path/filepath";_f "runtime";_e "time";);

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_ad ConsoleLogger )IsLogLevel (level LogLevel )bool {return _ad .LogLevel >=level };

// Error logs error message.
func (_fbd WriterLogger )Error (format string ,args ...interface{}){if _fbd .LogLevel >=LogLevelError {_gb :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_fbd .logToWriter (_fbd .Output ,_gb ,format ,args ...);};};

// Info does nothing for dummy logger.
func (DummyLogger )Info (format string ,args ...interface{}){};

// Warning logs warning message.
func (_ae ConsoleLogger )Warning (format string ,args ...interface{}){if _ae .LogLevel >=LogLevelWarning {_cf :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_ae .output (_d .Stdout ,_cf ,format ,args ...);};};

// LogLevel is the verbosity level for logging.
type LogLevel int ;

// IsLogLevel returns true from dummy logger.
func (DummyLogger )IsLogLevel (level LogLevel )bool {return true };

// DummyLogger does nothing.
type DummyLogger struct{};

// Trace logs trace message.
func (_dd ConsoleLogger )Trace (format string ,args ...interface{}){if _dd .LogLevel >=LogLevelTrace {_aa :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_dd .output (_d .Stdout ,_aa ,format ,args ...);};};const (LogLevelTrace LogLevel =5;LogLevelDebug LogLevel =4;LogLevelInfo LogLevel =3;LogLevelNotice LogLevel =2;LogLevelWarning LogLevel =1;LogLevelError LogLevel =0;);

// Logger is the interface used for logging in the unipdf package.
type Logger interface{Error (_bg string ,_gea ...interface{});Warning (_db string ,_dg ...interface{});Notice (_fe string ,_ec ...interface{});Info (_dbd string ,_ga ...interface{});Debug (_ff string ,_bc ...interface{});Trace (_a string ,_ecg ...interface{});IsLogLevel (_ab LogLevel )bool ;};const _cdf =2020;func (_cd ConsoleLogger )output (_gc _b .Writer ,_cfe string ,_ac string ,_fgg ...interface{}){_bdc (_gc ,_cfe ,_ac ,_fgg ...);};

// NewConsoleLogger creates new console logger.
func NewConsoleLogger (logLevel LogLevel )*ConsoleLogger {return &ConsoleLogger {LogLevel :logLevel }};

// Error does nothing for dummy logger.
func (DummyLogger )Error (format string ,args ...interface{}){};

// Info logs info message.
func (_feb WriterLogger )Info (format string ,args ...interface{}){if _feb .LogLevel >=LogLevelInfo {_da :="\u005bI\u004e\u0046\u004f\u005d\u0020";_feb .logToWriter (_feb .Output ,_da ,format ,args ...);};};

// Notice logs notice message.
func (_dbc WriterLogger )Notice (format string ,args ...interface{}){if _dbc .LogLevel >=LogLevelNotice {_fa :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_dbc .logToWriter (_dbc .Output ,_fa ,format ,args ...);};};var Log Logger =DummyLogger {};

// NewWriterLogger creates new 'writer' logger.
func NewWriterLogger (logLevel LogLevel ,writer _b .Writer )*WriterLogger {_ag :=WriterLogger {Output :writer ,LogLevel :logLevel };return &_ag ;};

// Debug logs debug message.
func (_cc WriterLogger )Debug (format string ,args ...interface{}){if _cc .LogLevel >=LogLevelDebug {_dae :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_cc .logToWriter (_cc .Output ,_dae ,format ,args ...);};};

// ConsoleLogger is a logger that writes logs to the 'os.Stdout'
type ConsoleLogger struct{LogLevel LogLevel ;};

// Debug logs debug message.
func (_gg ConsoleLogger )Debug (format string ,args ...interface{}){if _gg .LogLevel >=LogLevelDebug {_fb :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_gg .output (_d .Stdout ,_fb ,format ,args ...);};};

// Error logs error message.
func (_dge ConsoleLogger )Error (format string ,args ...interface{}){if _dge .LogLevel >=LogLevelError {_ce :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_dge .output (_d .Stdout ,_ce ,format ,args ...);};};

// Trace does nothing for dummy logger.
func (DummyLogger )Trace (format string ,args ...interface{}){};

// Debug does nothing for dummy logger.
func (DummyLogger )Debug (format string ,args ...interface{}){};

// SetLogger sets 'logger' to be used by the unidoc unipdf library.
func SetLogger (logger Logger ){Log =logger };const _bda =10;

// WriterLogger is the logger that writes data to the Output writer
type WriterLogger struct{LogLevel LogLevel ;Output _b .Writer ;};const _ea =35;

// Warning does nothing for dummy logger.
func (DummyLogger )Warning (format string ,args ...interface{}){};

// Trace logs trace message.
func (_bd WriterLogger )Trace (format string ,args ...interface{}){if _bd .LogLevel >=LogLevelTrace {_febc :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_bd .logToWriter (_bd .Output ,_febc ,format ,args ...);};};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_adc WriterLogger )IsLogLevel (level LogLevel )bool {return _adc .LogLevel >=level };func (_ggg WriterLogger )logToWriter (_dc _b .Writer ,_dbe string ,_aea string ,_eb ...interface{}){_bdc (_dc ,_dbe ,_aea ,_eb );};

// Warning logs warning message.
func (_gge WriterLogger )Warning (format string ,args ...interface{}){if _gge .LogLevel >=LogLevelWarning {_de :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_gge .logToWriter (_gge .Output ,_de ,format ,args ...);};};func UtcTimeFormat (t _e .Time )string {return t .Format (_agd )+"\u0020\u0055\u0054\u0043"};

// Notice does nothing for dummy logger.
func (DummyLogger )Notice (format string ,args ...interface{}){};const Version ="\u0033\u002e\u0031\u0032\u002e\u0033";const _gf =13;const _agd ="\u0032\u0020\u004aan\u0075\u0061\u0072\u0079\u0020\u0032\u0030\u0030\u0036\u0020\u0061\u0074\u0020\u0031\u0035\u003a\u0030\u0034";

// Notice logs notice message.
func (_dgc ConsoleLogger )Notice (format string ,args ...interface{}){if _dgc .LogLevel >=LogLevelNotice {_df :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_dgc .output (_d .Stdout ,_df ,format ,args ...);};};func _bdc (_gaa _b .Writer ,_dfa string ,_gac string ,_ffa ...interface{}){_ ,_aed ,_eba ,_dda :=_f .Caller (3);if !_dda {_aed ="\u003f\u003f\u003f";_eba =0;}else {_aed =_c .Base (_aed );};_cg :=_ge .Sprintf ("\u0025s\u0020\u0025\u0073\u003a\u0025\u0064 ",_dfa ,_aed ,_eba )+_gac +"\u000a";_ge .Fprintf (_gaa ,_cg ,_ffa ...);};var ReleasedAt =_e .Date (_cdf ,_bda ,_ddb ,_gf ,_ea ,0,0,_e .UTC );

// Info logs info message.
func (_fg ConsoleLogger )Info (format string ,args ...interface{}){if _fg .LogLevel >=LogLevelInfo {_bgd :="\u005bI\u004e\u0046\u004f\u005d\u0020";_fg .output (_d .Stdout ,_bgd ,format ,args ...);};};const _ddb =12;